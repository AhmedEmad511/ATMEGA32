
Simple_calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003164  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00003164  000031d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000270c  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000107f  00000000  00000000  0000590c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000698b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006acb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008884  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000976f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a51c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a909  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b0d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <main>
      7a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 95 18 	jmp	0x312a	; 0x312a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 95 18 	jmp	0x312a	; 0x312a <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 85 18 	jmp	0x310a	; 0x310a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SW_Def>:
/*********************************************************************************/
/*********************************************************************************/
#include "SW_interface.h"

u8 SW_Def(SW_t *SW)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <SW_Def+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <SW_Def+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	89 83       	std	Y+1, r24	; 0x01
	switch(SW ->PUL_t)
     b48:	e9 81       	ldd	r30, Y+1	; 0x01
     b4a:	fa 81       	ldd	r31, Y+2	; 0x02
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	3c 83       	std	Y+4, r19	; 0x04
     b54:	2b 83       	std	Y+3, r18	; 0x03
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	d1 f0       	breq	.+52     	; 0xb92 <SW_Def+0x5c>
     b5e:	2b 81       	ldd	r18, Y+3	; 0x03
     b60:	3c 81       	ldd	r19, Y+4	; 0x04
     b62:	21 30       	cpi	r18, 0x01	; 1
     b64:	31 05       	cpc	r19, r1
     b66:	f9 f4       	brne	.+62     	; 0xba6 <SW_Def+0x70>
	{
	case PULL_UP :
		DIO_u8SetPinDirection(SW->PORT,SW->PIN,INPUT);
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	80 81       	ld	r24, Z
     b6e:	e9 81       	ldd	r30, Y+1	; 0x01
     b70:	fa 81       	ldd	r31, Y+2	; 0x02
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	69 2f       	mov	r22, r25
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(SW->PORT,SW->PIN,HIGH);
     b7c:	e9 81       	ldd	r30, Y+1	; 0x01
     b7e:	fa 81       	ldd	r31, Y+2	; 0x02
     b80:	80 81       	ld	r24, Z
     b82:	e9 81       	ldd	r30, Y+1	; 0x01
     b84:	fa 81       	ldd	r31, Y+2	; 0x02
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	69 2f       	mov	r22, r25
     b8a:	41 e0       	ldi	r20, 0x01	; 1
     b8c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
     b90:	0a c0       	rjmp	.+20     	; 0xba6 <SW_Def+0x70>
		break;
	case PULL_DOWN :
		DIO_u8SetPinDirection(SW->PORT,SW->PIN,INPUT);
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	80 81       	ld	r24, Z
     b98:	e9 81       	ldd	r30, Y+1	; 0x01
     b9a:	fa 81       	ldd	r31, Y+2	; 0x02
     b9c:	91 81       	ldd	r25, Z+1	; 0x01
     b9e:	69 2f       	mov	r22, r25
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_u8SetPinDirection>
		break;
	default:
		break;
	}

}
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <SW_GetState>:
u8 SW_GetState(SW_t* SW)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	27 97       	sbiw	r28, 0x07	; 7
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	9b 83       	std	Y+3, r25	; 0x03
     bcc:	8a 83       	std	Y+2, r24	; 0x02
	u8 value;
	switch (SW ->PUL_t)
     bce:	ea 81       	ldd	r30, Y+2	; 0x02
     bd0:	fb 81       	ldd	r31, Y+3	; 0x03
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	3e 83       	std	Y+6, r19	; 0x06
     bda:	2d 83       	std	Y+5, r18	; 0x05
     bdc:	8d 81       	ldd	r24, Y+5	; 0x05
     bde:	9e 81       	ldd	r25, Y+6	; 0x06
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	c9 f0       	breq	.+50     	; 0xc16 <SW_GetState+0x60>
     be4:	2d 81       	ldd	r18, Y+5	; 0x05
     be6:	3e 81       	ldd	r19, Y+6	; 0x06
     be8:	21 30       	cpi	r18, 0x01	; 1
     bea:	31 05       	cpc	r19, r1
     bec:	21 f5       	brne	.+72     	; 0xc36 <SW_GetState+0x80>
	{
	case PULL_UP :
		DIO_u8GetPinValue(SW->PORT,SW->PIN,&value);
     bee:	ea 81       	ldd	r30, Y+2	; 0x02
     bf0:	fb 81       	ldd	r31, Y+3	; 0x03
     bf2:	80 81       	ld	r24, Z
     bf4:	ea 81       	ldd	r30, Y+2	; 0x02
     bf6:	fb 81       	ldd	r31, Y+3	; 0x03
     bf8:	91 81       	ldd	r25, Z+1	; 0x01
     bfa:	69 2f       	mov	r22, r25
     bfc:	9e 01       	movw	r18, r28
     bfe:	2f 5f       	subi	r18, 0xFF	; 255
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	a9 01       	movw	r20, r18
     c04:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_u8GetPinValue>

		return(!value);
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	1c 82       	std	Y+4, r1	; 0x04
     c0c:	88 23       	and	r24, r24
     c0e:	a1 f4       	brne	.+40     	; 0xc38 <SW_GetState+0x82>
     c10:	31 e0       	ldi	r19, 0x01	; 1
     c12:	3c 83       	std	Y+4, r19	; 0x04
     c14:	11 c0       	rjmp	.+34     	; 0xc38 <SW_GetState+0x82>

		break;
	case PULL_DOWN :
		DIO_u8GetPinValue(SW->PORT,SW->PIN,&value);
     c16:	ea 81       	ldd	r30, Y+2	; 0x02
     c18:	fb 81       	ldd	r31, Y+3	; 0x03
     c1a:	80 81       	ld	r24, Z
     c1c:	ea 81       	ldd	r30, Y+2	; 0x02
     c1e:	fb 81       	ldd	r31, Y+3	; 0x03
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	69 2f       	mov	r22, r25
     c24:	9e 01       	movw	r18, r28
     c26:	2f 5f       	subi	r18, 0xFF	; 255
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	a9 01       	movw	r20, r18
     c2c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_u8GetPinValue>
		return (value);
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	8c 83       	std	Y+4, r24	; 0x04
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <SW_GetState+0x82>
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <SW_GetState+0x86>
		break;
	default :
		break;
	}
}
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	9f 83       	std	Y+7, r25	; 0x07
     c3c:	8f 81       	ldd	r24, Y+7	; 0x07
     c3e:	27 96       	adiw	r28, 0x07	; 7
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <SSD_setNumber>:
#include "SS_interface.h"
u8 SSD_setNumber(u8 Number , SSD_t* SSD)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	00 d0       	rcall	.+0      	; 0xc56 <SSD_setNumber+0x6>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <SSD_setNumber+0x8>
     c58:	00 d0       	rcall	.+0      	; 0xc5a <SSD_setNumber+0xa>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	7b 83       	std	Y+3, r23	; 0x03
     c62:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortDirection(SSD->PORT,0xff);
     c64:	ea 81       	ldd	r30, Y+2	; 0x02
     c66:	fb 81       	ldd	r31, Y+3	; 0x03
     c68:	81 81       	ldd	r24, Z+1	; 0x01
     c6a:	6f ef       	ldi	r22, 0xFF	; 255
     c6c:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(SSD->PORT,SSD->COM_type ? segmentA[Number] : ~segmentA[Number]);
     c70:	ea 81       	ldd	r30, Y+2	; 0x02
     c72:	fb 81       	ldd	r31, Y+3	; 0x03
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	ea 81       	ldd	r30, Y+2	; 0x02
     c7a:	fb 81       	ldd	r31, Y+3	; 0x03
     c7c:	80 81       	ld	r24, Z
     c7e:	88 23       	and	r24, r24
     c80:	49 f0       	breq	.+18     	; 0xc94 <SSD_setNumber+0x44>
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	fc 01       	movw	r30, r24
     c8a:	ec 58       	subi	r30, 0x8C	; 140
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	90 81       	ld	r25, Z
     c90:	9c 83       	std	Y+4, r25	; 0x04
     c92:	0a c0       	rjmp	.+20     	; 0xca8 <SSD_setNumber+0x58>
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	fc 01       	movw	r30, r24
     c9c:	ec 58       	subi	r30, 0x8C	; 140
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 81       	ld	r24, Z
     ca2:	98 2f       	mov	r25, r24
     ca4:	90 95       	com	r25
     ca6:	9c 83       	std	Y+4, r25	; 0x04
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	6c 81       	ldd	r22, Y+4	; 0x04
     cac:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_u8SetPortValue>
	DIO_u8SetPinDirection(SSD->EnablePort,SSD->EnablePin,OUTPUT);
     cb0:	ea 81       	ldd	r30, Y+2	; 0x02
     cb2:	fb 81       	ldd	r31, Y+3	; 0x03
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	ea 81       	ldd	r30, Y+2	; 0x02
     cb8:	fb 81       	ldd	r31, Y+3	; 0x03
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	69 2f       	mov	r22, r25
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_u8SetPinDirection>
}
     cc4:	26 96       	adiw	r28, 0x06	; 6
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <SSD_Enable>:

u8 SSD_Enable(SSD_t*SSD)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <SSD_Enable+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <SSD_Enable+0x8>
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD -> COM_type)
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	80 81       	ld	r24, Z
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	3c 83       	std	Y+4, r19	; 0x04
     cf4:	2b 83       	std	Y+3, r18	; 0x03
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	31 f0       	breq	.+12     	; 0xd0a <SSD_Enable+0x34>
     cfe:	2b 81       	ldd	r18, Y+3	; 0x03
     d00:	3c 81       	ldd	r19, Y+4	; 0x04
     d02:	21 30       	cpi	r18, 0x01	; 1
     d04:	31 05       	cpc	r19, r1
     d06:	61 f0       	breq	.+24     	; 0xd20 <SSD_Enable+0x4a>
     d08:	15 c0       	rjmp	.+42     	; 0xd34 <SSD_Enable+0x5e>
	{
	case ANODE : DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,1) ;break;
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	e9 81       	ldd	r30, Y+1	; 0x01
     d12:	fa 81       	ldd	r31, Y+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	69 2f       	mov	r22, r25
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <SSD_Enable+0x5e>
	case CATHODE :DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,0); break;
     d20:	e9 81       	ldd	r30, Y+1	; 0x01
     d22:	fa 81       	ldd	r31, Y+2	; 0x02
     d24:	82 81       	ldd	r24, Z+2	; 0x02
     d26:	e9 81       	ldd	r30, Y+1	; 0x01
     d28:	fa 81       	ldd	r31, Y+2	; 0x02
     d2a:	93 81       	ldd	r25, Z+3	; 0x03
     d2c:	69 2f       	mov	r22, r25
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
	default:break;
	}
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <SSD_Disable>:
u8 SSD_Disable(SSD_t*SSD)
{
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <SSD_Disable+0x6>
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <SSD_Disable+0x8>
     d4c:	0f 92       	push	r0
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	9a 83       	std	Y+2, r25	; 0x02
     d54:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD -> COM_type)
     d56:	e9 81       	ldd	r30, Y+1	; 0x01
     d58:	fa 81       	ldd	r31, Y+2	; 0x02
     d5a:	80 81       	ld	r24, Z
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3c 83       	std	Y+4, r19	; 0x04
     d62:	2b 83       	std	Y+3, r18	; 0x03
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	9c 81       	ldd	r25, Y+4	; 0x04
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	31 f0       	breq	.+12     	; 0xd78 <SSD_Disable+0x34>
     d6c:	2b 81       	ldd	r18, Y+3	; 0x03
     d6e:	3c 81       	ldd	r19, Y+4	; 0x04
     d70:	21 30       	cpi	r18, 0x01	; 1
     d72:	31 05       	cpc	r19, r1
     d74:	61 f0       	breq	.+24     	; 0xd8e <SSD_Disable+0x4a>
     d76:	15 c0       	rjmp	.+42     	; 0xda2 <SSD_Disable+0x5e>
	{
	case ANODE : DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,0);break;
     d78:	e9 81       	ldd	r30, Y+1	; 0x01
     d7a:	fa 81       	ldd	r31, Y+2	; 0x02
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	e9 81       	ldd	r30, Y+1	; 0x01
     d80:	fa 81       	ldd	r31, Y+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	69 2f       	mov	r22, r25
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
     d8c:	0a c0       	rjmp	.+20     	; 0xda2 <SSD_Disable+0x5e>
	case CATHODE :DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,1);break;
     d8e:	e9 81       	ldd	r30, Y+1	; 0x01
     d90:	fa 81       	ldd	r31, Y+2	; 0x02
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	e9 81       	ldd	r30, Y+1	; 0x01
     d96:	fa 81       	ldd	r31, Y+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	69 2f       	mov	r22, r25
     d9c:	41 e0       	ldi	r20, 0x01	; 1
     d9e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
	default:break;
	}
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	08 95       	ret

00000db2 <LED_TurnOn>:
/*********************************************************************************/
/*********************************************************************************/
#include "LED_interface.h"

u8 LED_TurnOn(LED_t* LED)
{
     db2:	df 93       	push	r29
     db4:	cf 93       	push	r28
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <LED_TurnOn+0x6>
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDirection(LED ->PORT,LED->PIN,OUTPUT);
     dc2:	e9 81       	ldd	r30, Y+1	; 0x01
     dc4:	fa 81       	ldd	r31, Y+2	; 0x02
     dc6:	80 81       	ld	r24, Z
     dc8:	e9 81       	ldd	r30, Y+1	; 0x01
     dca:	fa 81       	ldd	r31, Y+2	; 0x02
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	69 2f       	mov	r22, r25
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(LED ->PORT,LED->PIN,HIGH);
     dd6:	e9 81       	ldd	r30, Y+1	; 0x01
     dd8:	fa 81       	ldd	r31, Y+2	; 0x02
     dda:	80 81       	ld	r24, Z
     ddc:	e9 81       	ldd	r30, Y+1	; 0x01
     dde:	fa 81       	ldd	r31, Y+2	; 0x02
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	69 2f       	mov	r22, r25
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <LED_TurnOff>:

u8 LED_TurnOff(LED_t* LED)
{
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <LED_TurnOff+0x6>
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDirection(LED ->PORT,LED->PIN,OUTPUT);
     e06:	e9 81       	ldd	r30, Y+1	; 0x01
     e08:	fa 81       	ldd	r31, Y+2	; 0x02
     e0a:	80 81       	ld	r24, Z
     e0c:	e9 81       	ldd	r30, Y+1	; 0x01
     e0e:	fa 81       	ldd	r31, Y+2	; 0x02
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	69 2f       	mov	r22, r25
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(LED ->PORT,LED->PIN,LOW);
     e1a:	e9 81       	ldd	r30, Y+1	; 0x01
     e1c:	fa 81       	ldd	r31, Y+2	; 0x02
     e1e:	80 81       	ld	r24, Z
     e20:	e9 81       	ldd	r30, Y+1	; 0x01
     e22:	fa 81       	ldd	r31, Y+2	; 0x02
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	69 2f       	mov	r22, r25
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>

}
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <LCD_voidSendCommand>:

#include "LCD_interface.h"
#include <util/delay.h>

void LCD_voidSendCommand(u8 Copy_u8Command)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	2f 97       	sbiw	r28, 0x0f	; 15
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE ==EIGHT_BIT
	/*set RS pin low for Command*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOW);
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
	/*Set RW pin LOW for Write*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
	/*Send Command in data PORT*/
	DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Command);
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	6f 85       	ldd	r22, Y+15	; 0x0f
     e68:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_u8SetPortValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	62 e0       	ldi	r22, 0x02	; 2
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e4       	ldi	r27, 0x40	; 64
     e7e:	8b 87       	std	Y+11, r24	; 0x0b
     e80:	9c 87       	std	Y+12, r25	; 0x0c
     e82:	ad 87       	std	Y+13, r26	; 0x0d
     e84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e86:	6b 85       	ldd	r22, Y+11	; 0x0b
     e88:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4a ef       	ldi	r20, 0xFA	; 250
     e94:	54 e4       	ldi	r21, 0x44	; 68
     e96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	8f 83       	std	Y+7, r24	; 0x07
     ea0:	98 87       	std	Y+8, r25	; 0x08
     ea2:	a9 87       	std	Y+9, r26	; 0x09
     ea4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ea6:	6f 81       	ldd	r22, Y+7	; 0x07
     ea8:	78 85       	ldd	r23, Y+8	; 0x08
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e8       	ldi	r20, 0x80	; 128
     eb4:	5f e3       	ldi	r21, 0x3F	; 63
     eb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     eba:	88 23       	and	r24, r24
     ebc:	2c f4       	brge	.+10     	; 0xec8 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	3f c0       	rjmp	.+126    	; 0xf46 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     ec8:	6f 81       	ldd	r22, Y+7	; 0x07
     eca:	78 85       	ldd	r23, Y+8	; 0x08
     ecc:	89 85       	ldd	r24, Y+9	; 0x09
     ece:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	3f ef       	ldi	r19, 0xFF	; 255
     ed4:	4f e7       	ldi	r20, 0x7F	; 127
     ed6:	57 e4       	ldi	r21, 0x47	; 71
     ed8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     edc:	18 16       	cp	r1, r24
     ede:	4c f5       	brge	.+82     	; 0xf32 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e2       	ldi	r20, 0x20	; 32
     eee:	51 e4       	ldi	r21, 0x41	; 65
     ef0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	bc 01       	movw	r22, r24
     efa:	cd 01       	movw	r24, r26
     efc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <LCD_voidSendCommand+0xee>
     f0a:	88 ec       	ldi	r24, 0xC8	; 200
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <LCD_voidSendCommand+0xdc>
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	9e 81       	ldd	r25, Y+6	; 0x06
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	69 f7       	brne	.-38     	; 0xf0a <LCD_voidSendCommand+0xd0>
     f30:	14 c0       	rjmp	.+40     	; 0xf5a <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f32:	6f 81       	ldd	r22, Y+7	; 0x07
     f34:	78 85       	ldd	r23, Y+8	; 0x08
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	9e 83       	std	Y+6, r25	; 0x06
     f44:	8d 83       	std	Y+5, r24	; 0x05
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <LCD_voidSendCommand+0x118>
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
     f5a:	82 e0       	ldi	r24, 0x02	; 2
     f5c:	62 e0       	ldi	r22, 0x02	; 2
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(LCD_DATA_PORT,(Copy_u8Command << 4));
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
#endif
}
     f64:	2f 96       	adiw	r28, 0x0f	; 15
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	2f 97       	sbiw	r28, 0x0f	; 15
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == EIGHT_BIT
	/*set RS pin HIGH for DATA*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,HIGH );
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
	/*Set RW pin LOW for Write*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
	/*Send Command in data PORT*/
	DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Data);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	6f 85       	ldd	r22, Y+15	; 0x0f
     fa4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_u8SetPortValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	a0 e0       	ldi	r26, 0x00	; 0
     fb8:	b0 e4       	ldi	r27, 0x40	; 64
     fba:	8b 87       	std	Y+11, r24	; 0x0b
     fbc:	9c 87       	std	Y+12, r25	; 0x0c
     fbe:	ad 87       	std	Y+13, r26	; 0x0d
     fc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	4a ef       	ldi	r20, 0xFA	; 250
     fd0:	54 e4       	ldi	r21, 0x44	; 68
     fd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	8f 83       	std	Y+7, r24	; 0x07
     fdc:	98 87       	std	Y+8, r25	; 0x08
     fde:	a9 87       	std	Y+9, r26	; 0x09
     fe0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	5f e3       	ldi	r21, 0x3F	; 63
     ff2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ff6:	88 23       	and	r24, r24
     ff8:	2c f4       	brge	.+10     	; 0x1004 <LCD_voidSendData+0x8e>
		__ticks = 1;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9e 83       	std	Y+6, r25	; 0x06
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	3f c0       	rjmp	.+126    	; 0x1082 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	3f ef       	ldi	r19, 0xFF	; 255
    1010:	4f e7       	ldi	r20, 0x7F	; 127
    1012:	57 e4       	ldi	r21, 0x47	; 71
    1014:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1018:	18 16       	cp	r1, r24
    101a:	4c f5       	brge	.+82     	; 0x106e <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101c:	6b 85       	ldd	r22, Y+11	; 0x0b
    101e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1020:	8d 85       	ldd	r24, Y+13	; 0x0d
    1022:	9e 85       	ldd	r25, Y+14	; 0x0e
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e2       	ldi	r20, 0x20	; 32
    102a:	51 e4       	ldi	r21, 0x41	; 65
    102c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	9e 83       	std	Y+6, r25	; 0x06
    1042:	8d 83       	std	Y+5, r24	; 0x05
    1044:	0f c0       	rjmp	.+30     	; 0x1064 <LCD_voidSendData+0xee>
    1046:	88 ec       	ldi	r24, 0xC8	; 200
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <LCD_voidSendData+0xdc>
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	69 f7       	brne	.-38     	; 0x1046 <LCD_voidSendData+0xd0>
    106c:	14 c0       	rjmp	.+40     	; 0x1096 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	9e 83       	std	Y+6, r25	; 0x06
    1080:	8d 83       	std	Y+5, r24	; 0x05
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <LCD_voidSendData+0x118>
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	62 e0       	ldi	r22, 0x02	; 2
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <DIO_u8SetPinValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
#endif
}
    10a0:	2f 96       	adiw	r28, 0x0f	; 15
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <LCD_voidInit>:

void LCD_voidInit(void)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	2e 97       	sbiw	r28, 0x0e	; 14
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 ef       	ldi	r26, 0xF0	; 240
    10cc:	b1 e4       	ldi	r27, 0x41	; 65
    10ce:	8b 87       	std	Y+11, r24	; 0x0b
    10d0:	9c 87       	std	Y+12, r25	; 0x0c
    10d2:	ad 87       	std	Y+13, r26	; 0x0d
    10d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10da:	8d 85       	ldd	r24, Y+13	; 0x0d
    10dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8f 83       	std	Y+7, r24	; 0x07
    10f0:	98 87       	std	Y+8, r25	; 0x08
    10f2:	a9 87       	std	Y+9, r26	; 0x09
    10f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <LCD_voidInit+0x66>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6b 85       	ldd	r22, Y+11	; 0x0b
    1132:	7c 85       	ldd	r23, Y+12	; 0x0c
    1134:	8d 85       	ldd	r24, Y+13	; 0x0d
    1136:	9e 85       	ldd	r25, Y+14	; 0x0e
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <LCD_voidInit+0xc6>
    115a:	88 ec       	ldi	r24, 0xC8	; 200
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCD_voidInit+0xb4>
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <LCD_voidInit+0xa8>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_voidInit+0xf0>
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01

	/*Put function set command 0011NFXX XX dont care
	 * N for number of line 0-->one line 1-->2 lines
	 * F for font size 0-->5x8 1-->5x11 */

	LCD_voidSendCommand(0b00111000);
    11aa:	88 e3       	ldi	r24, 0x38	; 56
    11ac:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_voidSendCommand>
	/*Display ON/OFF control 00001DCB
	 * D For display control 0--> Disable 1-->Enable
	 * C For cursor Enable 0-->Disable 1-->Enable
	 * B For Blink cursor enable 0-->Disable 1-->Enable*/

	LCD_voidSendCommand(0b00001100);
    11b0:	8c e0       	ldi	r24, 0x0C	; 12
    11b2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_voidSendCommand>

	/*Display clear*/

	LCD_voidSendCommand(1);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_voidSendCommand>
	LCD_voidSendCommand(0b11000000);
    _delay_ms(1);
	LCD_voidSendCommand(0b00000001);
#endif

}
    11bc:	2e 96       	adiw	r28, 0x0e	; 14
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <LCD_voidSendString>:

void LCD_voidSendString(const char* String )
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <LCD_voidSendString+0x6>
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	9b 83       	std	Y+3, r25	; 0x03
    11dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter =  0 ;
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	0e c0       	rjmp	.+28     	; 0x11fe <LCD_voidSendString+0x30>
	while(String[Counter])
	{
		LCD_voidSendData(String[Counter]);
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	9b 81       	ldd	r25, Y+3	; 0x03
    11ec:	fc 01       	movw	r30, r24
    11ee:	e2 0f       	add	r30, r18
    11f0:	f3 1f       	adc	r31, r19
    11f2:	80 81       	ld	r24, Z
    11f4:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_voidSendData>
		Counter++;
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* String )
{
	u8 Counter =  0 ;
	while(String[Counter])
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	fc 01       	movw	r30, r24
    120a:	e2 0f       	add	r30, r18
    120c:	f3 1f       	adc	r31, r19
    120e:	80 81       	ld	r24, Z
    1210:	88 23       	and	r24, r24
    1212:	39 f7       	brne	.-50     	; 0x11e2 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[Counter]);
		Counter++;
	}
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 X_position,u8 Y_Position)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <LCD_voidGoToXY+0x6>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	8a 83       	std	Y+2, r24	; 0x02
    122e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	/*X position is the Row and Y is Col.
	 * Address of first row is from 0 to 0xf
	 * Second row is from 0x40 to 0x4f*/
	if(X_position==0)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 23       	and	r24, r24
    1234:	19 f4       	brne	.+6      	; 0x123c <LCD_voidGoToXY+0x1c>
	{
		Address =Y_Position;
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	89 83       	std	Y+1, r24	; 0x01
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <LCD_voidGoToXY+0x28>
	}
	else if(X_position==1)
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	19 f4       	brne	.+6      	; 0x1248 <LCD_voidGoToXY+0x28>
	{
		Address =0x40 + Y_Position ;
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	80 5c       	subi	r24, 0xC0	; 192
    1246:	89 83       	std	Y+1, r24	; 0x01
	}
	/*The command to set address that you want is 0b10000000
	 * So we add 128 to the address*/
	LCD_voidSendCommand((Address|0b10000000));
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	80 68       	ori	r24, 0x80	; 128
    124c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_voidSendCommand>
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <LCD_voidSpecialChar>:

void LCD_voidSpecialChar(u8* Pattern,u8 Block_no,u8 Xposition,u8 Yposition)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	27 97       	sbiw	r28, 0x07	; 7
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	6d 83       	std	Y+5, r22	; 0x05
    1276:	4e 83       	std	Y+6, r20	; 0x06
    1278:	2f 83       	std	Y+7, r18	; 0x07
	u8 Address = Block_no*8;
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	88 2f       	mov	r24, r24
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(Address+64);
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	80 5c       	subi	r24, 0xC0	; 192
    1292:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_voidSendCommand>
	for(u8 i=0 ;i<8;i++)
    1296:	19 82       	std	Y+1, r1	; 0x01
    1298:	0e c0       	rjmp	.+28     	; 0x12b6 <LCD_voidSpecialChar+0x5a>
	{
		LCD_voidSendData(Pattern[i]);
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	fc 01       	movw	r30, r24
    12a6:	e2 0f       	add	r30, r18
    12a8:	f3 1f       	adc	r31, r19
    12aa:	80 81       	ld	r24, Z
    12ac:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_voidSendData>

void LCD_voidSpecialChar(u8* Pattern,u8 Block_no,u8 Xposition,u8 Yposition)
{
	u8 Address = Block_no*8;
	LCD_voidSendCommand(Address+64);
	for(u8 i=0 ;i<8;i++)
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	88 30       	cpi	r24, 0x08	; 8
    12ba:	78 f3       	brcs	.-34     	; 0x129a <LCD_voidSpecialChar+0x3e>
	{
		LCD_voidSendData(Pattern[i]);
	}
	LCD_voidGoToXY(Xposition,Yposition);
    12bc:	8e 81       	ldd	r24, Y+6	; 0x06
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
	LCD_voidSendData(Block_no);
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_voidSendData>
}
    12ca:	27 96       	adiw	r28, 0x07	; 7
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(u32 Number)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	63 97       	sbiw	r28, 0x13	; 19
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	68 8b       	std	Y+16, r22	; 0x10
    12f2:	79 8b       	std	Y+17, r23	; 0x11
    12f4:	8a 8b       	std	Y+18, r24	; 0x12
    12f6:	9b 8b       	std	Y+19, r25	; 0x13
	u8 str[8];
	u8 i;
	u32 num;
	u8 rem;
	u8 len =0;
    12f8:	19 82       	std	Y+1, r1	; 0x01
	num=Number;
    12fa:	88 89       	ldd	r24, Y+16	; 0x10
    12fc:	99 89       	ldd	r25, Y+17	; 0x11
    12fe:	aa 89       	ldd	r26, Y+18	; 0x12
    1300:	bb 89       	ldd	r27, Y+19	; 0x13
    1302:	8b 83       	std	Y+3, r24	; 0x03
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	ad 83       	std	Y+5, r26	; 0x05
    1308:	be 83       	std	Y+6, r27	; 0x06
    130a:	15 c0       	rjmp	.+42     	; 0x1336 <LCD_voidWriteNumber+0x5a>
	while(num != 0)
	{
		len++;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	89 83       	std	Y+1, r24	; 0x01
		num=num/10;
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	ad 81       	ldd	r26, Y+5	; 0x05
    1318:	be 81       	ldd	r27, Y+6	; 0x06
    131a:	2a e0       	ldi	r18, 0x0A	; 10
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>
    132a:	da 01       	movw	r26, r20
    132c:	c9 01       	movw	r24, r18
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	ad 83       	std	Y+5, r26	; 0x05
    1334:	be 83       	std	Y+6, r27	; 0x06
	u8 i;
	u32 num;
	u8 rem;
	u8 len =0;
	num=Number;
	while(num != 0)
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	ad 81       	ldd	r26, Y+5	; 0x05
    133c:	be 81       	ldd	r27, Y+6	; 0x06
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	a1 05       	cpc	r26, r1
    1342:	b1 05       	cpc	r27, r1
    1344:	19 f7       	brne	.-58     	; 0x130c <LCD_voidWriteNumber+0x30>
	{
		len++;
		num=num/10;
	}
	for(i=0;i<len;i++)
    1346:	1f 82       	std	Y+7, r1	; 0x07
    1348:	37 c0       	rjmp	.+110    	; 0x13b8 <LCD_voidWriteNumber+0xdc>
	{
		rem=Number%10;
    134a:	88 89       	ldd	r24, Y+16	; 0x10
    134c:	99 89       	ldd	r25, Y+17	; 0x11
    134e:	aa 89       	ldd	r26, Y+18	; 0x12
    1350:	bb 89       	ldd	r27, Y+19	; 0x13
    1352:	2a e0       	ldi	r18, 0x0A	; 10
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	8a 83       	std	Y+2, r24	; 0x02
		Number=Number/10;
    1368:	88 89       	ldd	r24, Y+16	; 0x10
    136a:	99 89       	ldd	r25, Y+17	; 0x11
    136c:	aa 89       	ldd	r26, Y+18	; 0x12
    136e:	bb 89       	ldd	r27, Y+19	; 0x13
    1370:	2a e0       	ldi	r18, 0x0A	; 10
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	bc 01       	movw	r22, r24
    137a:	cd 01       	movw	r24, r26
    137c:	0e 94 43 18 	call	0x3086	; 0x3086 <__udivmodsi4>
    1380:	da 01       	movw	r26, r20
    1382:	c9 01       	movw	r24, r18
    1384:	88 8b       	std	Y+16, r24	; 0x10
    1386:	99 8b       	std	Y+17, r25	; 0x11
    1388:	aa 8b       	std	Y+18, r26	; 0x12
    138a:	bb 8b       	std	Y+19, r27	; 0x13
		str[len-(i+1)]=rem+'0';
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	80 95       	com	r24
    139a:	90 95       	com	r25
    139c:	28 0f       	add	r18, r24
    139e:	39 1f       	adc	r19, r25
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	48 2f       	mov	r20, r24
    13a4:	40 5d       	subi	r20, 0xD0	; 208
    13a6:	ce 01       	movw	r24, r28
    13a8:	08 96       	adiw	r24, 0x08	; 8
    13aa:	fc 01       	movw	r30, r24
    13ac:	e2 0f       	add	r30, r18
    13ae:	f3 1f       	adc	r31, r19
    13b0:	40 83       	st	Z, r20
	while(num != 0)
	{
		len++;
		num=num/10;
	}
	for(i=0;i<len;i++)
    13b2:	8f 81       	ldd	r24, Y+7	; 0x07
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	8f 83       	std	Y+7, r24	; 0x07
    13b8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	98 17       	cp	r25, r24
    13be:	28 f2       	brcs	.-118    	; 0x134a <LCD_voidWriteNumber+0x6e>
	{
		rem=Number%10;
		Number=Number/10;
		str[len-(i+1)]=rem+'0';
	}
	str[len]='\0';
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	ce 01       	movw	r24, r28
    13c8:	08 96       	adiw	r24, 0x08	; 8
    13ca:	fc 01       	movw	r30, r24
    13cc:	e2 0f       	add	r30, r18
    13ce:	f3 1f       	adc	r31, r19
    13d0:	10 82       	st	Z, r1
	LCD_voidSendString(str);
    13d2:	ce 01       	movw	r24, r28
    13d4:	08 96       	adiw	r24, 0x08	; 8
    13d6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
}
    13da:	63 96       	adiw	r28, 0x13	; 19
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <DIO_u8SetPinDirection>:
/*********************************************************************************/

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Direction)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	28 97       	sbiw	r28, 0x08	; 8
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	6b 83       	std	Y+3, r22	; 0x03
    1404:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1406:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	88 30       	cpi	r24, 0x08	; 8
    140c:	10 f0       	brcs	.+4      	; 0x1412 <DIO_u8SetPinDirection+0x26>
		Local_u8ErrorState = 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == INPUT)
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	88 23       	and	r24, r24
    1416:	09 f0       	breq	.+2      	; 0x141a <DIO_u8SetPinDirection+0x2e>
    1418:	78 c0       	rjmp	.+240    	; 0x150a <DIO_u8SetPinDirection+0x11e>
	{
		switch (Copy_u8Port)
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	38 87       	std	Y+8, r19	; 0x08
    1422:	2f 83       	std	Y+7, r18	; 0x07
    1424:	8f 81       	ldd	r24, Y+7	; 0x07
    1426:	98 85       	ldd	r25, Y+8	; 0x08
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	91 05       	cpc	r25, r1
    142c:	61 f1       	breq	.+88     	; 0x1486 <DIO_u8SetPinDirection+0x9a>
    142e:	2f 81       	ldd	r18, Y+7	; 0x07
    1430:	38 85       	ldd	r19, Y+8	; 0x08
    1432:	23 30       	cpi	r18, 0x03	; 3
    1434:	31 05       	cpc	r19, r1
    1436:	34 f4       	brge	.+12     	; 0x1444 <DIO_u8SetPinDirection+0x58>
    1438:	8f 81       	ldd	r24, Y+7	; 0x07
    143a:	98 85       	ldd	r25, Y+8	; 0x08
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	69 f0       	breq	.+26     	; 0x145c <DIO_u8SetPinDirection+0x70>
    1442:	60 c0       	rjmp	.+192    	; 0x1504 <DIO_u8SetPinDirection+0x118>
    1444:	2f 81       	ldd	r18, Y+7	; 0x07
    1446:	38 85       	ldd	r19, Y+8	; 0x08
    1448:	23 30       	cpi	r18, 0x03	; 3
    144a:	31 05       	cpc	r19, r1
    144c:	89 f1       	breq	.+98     	; 0x14b0 <DIO_u8SetPinDirection+0xc4>
    144e:	8f 81       	ldd	r24, Y+7	; 0x07
    1450:	98 85       	ldd	r25, Y+8	; 0x08
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	91 05       	cpc	r25, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <DIO_u8SetPinDirection+0x6e>
    1458:	40 c0       	rjmp	.+128    	; 0x14da <DIO_u8SetPinDirection+0xee>
    145a:	54 c0       	rjmp	.+168    	; 0x1504 <DIO_u8SetPinDirection+0x118>
		{
		case PORT_A :
			CLR_BIT(DDRA,Copy_u8Pin);
    145c:	aa e3       	ldi	r26, 0x3A	; 58
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	ea e3       	ldi	r30, 0x3A	; 58
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_u8SetPinDirection+0x8e>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_u8SetPinDirection+0x8a>
    147e:	80 95       	com	r24
    1480:	84 23       	and	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	bb c0       	rjmp	.+374    	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_B :
			CLR_BIT(DDRB,Copy_u8Pin);
    1486:	a7 e3       	ldi	r26, 0x37	; 55
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e7 e3       	ldi	r30, 0x37	; 55
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_u8SetPinDirection+0xb8>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_u8SetPinDirection+0xb4>
    14a8:	80 95       	com	r24
    14aa:	84 23       	and	r24, r20
    14ac:	8c 93       	st	X, r24
    14ae:	a6 c0       	rjmp	.+332    	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_C :
			CLR_BIT(DDRC,Copy_u8Pin);
    14b0:	a4 e3       	ldi	r26, 0x34	; 52
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e4 e3       	ldi	r30, 0x34	; 52
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_u8SetPinDirection+0xe2>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_u8SetPinDirection+0xde>
    14d2:	80 95       	com	r24
    14d4:	84 23       	and	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	91 c0       	rjmp	.+290    	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_D :
			CLR_BIT(DDRD,Copy_u8Pin);
    14da:	a1 e3       	ldi	r26, 0x31	; 49
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e1 e3       	ldi	r30, 0x31	; 49
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8SetPinDirection+0x10c>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8SetPinDirection+0x108>
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	7c c0       	rjmp	.+248    	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	79 c0       	rjmp	.+242    	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		}
	}
	else if(Copy_u8Direction == OUTPUT)
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	09 f0       	breq	.+2      	; 0x1512 <DIO_u8SetPinDirection+0x126>
    1510:	73 c0       	rjmp	.+230    	; 0x15f8 <DIO_u8SetPinDirection+0x20c>
	{
		switch (Copy_u8Port)
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3e 83       	std	Y+6, r19	; 0x06
    151a:	2d 83       	std	Y+5, r18	; 0x05
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	91 05       	cpc	r25, r1
    1524:	51 f1       	breq	.+84     	; 0x157a <DIO_u8SetPinDirection+0x18e>
    1526:	2d 81       	ldd	r18, Y+5	; 0x05
    1528:	3e 81       	ldd	r19, Y+6	; 0x06
    152a:	23 30       	cpi	r18, 0x03	; 3
    152c:	31 05       	cpc	r19, r1
    152e:	34 f4       	brge	.+12     	; 0x153c <DIO_u8SetPinDirection+0x150>
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	61 f0       	breq	.+24     	; 0x1552 <DIO_u8SetPinDirection+0x166>
    153a:	5b c0       	rjmp	.+182    	; 0x15f2 <DIO_u8SetPinDirection+0x206>
    153c:	2d 81       	ldd	r18, Y+5	; 0x05
    153e:	3e 81       	ldd	r19, Y+6	; 0x06
    1540:	23 30       	cpi	r18, 0x03	; 3
    1542:	31 05       	cpc	r19, r1
    1544:	71 f1       	breq	.+92     	; 0x15a2 <DIO_u8SetPinDirection+0x1b6>
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	91 05       	cpc	r25, r1
    154e:	e9 f1       	breq	.+122    	; 0x15ca <DIO_u8SetPinDirection+0x1de>
    1550:	50 c0       	rjmp	.+160    	; 0x15f2 <DIO_u8SetPinDirection+0x206>
		{
		case PORT_A :
			SET_BIT(DDRA,Copy_u8Pin);
    1552:	aa e3       	ldi	r26, 0x3A	; 58
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e3       	ldi	r30, 0x3A	; 58
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8SetPinDirection+0x184>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_u8SetPinDirection+0x180>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	41 c0       	rjmp	.+130    	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_B :
			SET_BIT(DDRB,Copy_u8Pin);
    157a:	a7 e3       	ldi	r26, 0x37	; 55
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e7 e3       	ldi	r30, 0x37	; 55
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8SetPinDirection+0x1ac>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_u8SetPinDirection+0x1a8>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	2d c0       	rjmp	.+90     	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_C :
			SET_BIT(DDRC,Copy_u8Pin);
    15a2:	a4 e3       	ldi	r26, 0x34	; 52
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e4 e3       	ldi	r30, 0x34	; 52
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_u8SetPinDirection+0x1d4>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_u8SetPinDirection+0x1d0>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	19 c0       	rjmp	.+50     	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_D :
			SET_BIT(DDRD,Copy_u8Pin);
    15ca:	a1 e3       	ldi	r26, 0x31	; 49
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e1 e3       	ldi	r30, 0x31	; 49
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_u8SetPinDirection+0x1fc>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_u8SetPinDirection+0x1f8>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_u8SetPinDirection+0x210>
			break;
		}
	}
	else
	{
		Local_u8ErrorState =1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fe:	28 96       	adiw	r28, 0x08	; 8
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <DIO_u8SetPortDirection+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <DIO_u8SetPortDirection+0x8>
    1618:	0f 92       	push	r0
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	8a 83       	std	Y+2, r24	; 0x02
    1620:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    1622:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3d 83       	std	Y+5, r19	; 0x05
    162c:	2c 83       	std	Y+4, r18	; 0x04
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	9d 81       	ldd	r25, Y+5	; 0x05
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	91 05       	cpc	r25, r1
    1636:	d9 f0       	breq	.+54     	; 0x166e <DIO_u8SetPortDirection+0x5e>
    1638:	2c 81       	ldd	r18, Y+4	; 0x04
    163a:	3d 81       	ldd	r19, Y+5	; 0x05
    163c:	23 30       	cpi	r18, 0x03	; 3
    163e:	31 05       	cpc	r19, r1
    1640:	34 f4       	brge	.+12     	; 0x164e <DIO_u8SetPortDirection+0x3e>
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	91 05       	cpc	r25, r1
    164a:	61 f0       	breq	.+24     	; 0x1664 <DIO_u8SetPortDirection+0x54>
    164c:	1f c0       	rjmp	.+62     	; 0x168c <DIO_u8SetPortDirection+0x7c>
    164e:	2c 81       	ldd	r18, Y+4	; 0x04
    1650:	3d 81       	ldd	r19, Y+5	; 0x05
    1652:	23 30       	cpi	r18, 0x03	; 3
    1654:	31 05       	cpc	r19, r1
    1656:	81 f0       	breq	.+32     	; 0x1678 <DIO_u8SetPortDirection+0x68>
    1658:	8c 81       	ldd	r24, Y+4	; 0x04
    165a:	9d 81       	ldd	r25, Y+5	; 0x05
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	91 05       	cpc	r25, r1
    1660:	81 f0       	breq	.+32     	; 0x1682 <DIO_u8SetPortDirection+0x72>
    1662:	14 c0       	rjmp	.+40     	; 0x168c <DIO_u8SetPortDirection+0x7c>
	{
	case PORT_A :
		DDRA = Copy_u8Direction;
    1664:	ea e3       	ldi	r30, 0x3A	; 58
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	80 83       	st	Z, r24
    166c:	11 c0       	rjmp	.+34     	; 0x1690 <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_B :
		DDRB = Copy_u8Direction;
    166e:	e7 e3       	ldi	r30, 0x37	; 55
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	80 83       	st	Z, r24
    1676:	0c c0       	rjmp	.+24     	; 0x1690 <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_C :
		DDRC = Copy_u8Direction;
    1678:	e4 e3       	ldi	r30, 0x34	; 52
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	80 83       	st	Z, r24
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_D :
		DDRD = Copy_u8Direction;
    1682:	e1 e3       	ldi	r30, 0x31	; 49
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	80 83       	st	Z, r24
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_u8SetPortDirection+0x80>
		break;
	default :
		Local_u8ErrorState =1;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1690:	89 81       	ldd	r24, Y+1	; 0x01
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	28 97       	sbiw	r28, 0x08	; 8
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    16b8:	6b 83       	std	Y+3, r22	; 0x03
    16ba:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    16bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin>7)
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	88 30       	cpi	r24, 0x08	; 8
    16c2:	10 f0       	brcs	.+4      	; 0x16c8 <DIO_u8SetPinValue+0x26>
		Local_u8ErrorState =1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Value == LOW)
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	88 23       	and	r24, r24
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <DIO_u8SetPinValue+0x2e>
    16ce:	78 c0       	rjmp	.+240    	; 0x17c0 <DIO_u8SetPinValue+0x11e>
	{
		switch (Copy_u8Port)
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	38 87       	std	Y+8, r19	; 0x08
    16d8:	2f 83       	std	Y+7, r18	; 0x07
    16da:	8f 81       	ldd	r24, Y+7	; 0x07
    16dc:	98 85       	ldd	r25, Y+8	; 0x08
    16de:	82 30       	cpi	r24, 0x02	; 2
    16e0:	91 05       	cpc	r25, r1
    16e2:	61 f1       	breq	.+88     	; 0x173c <DIO_u8SetPinValue+0x9a>
    16e4:	2f 81       	ldd	r18, Y+7	; 0x07
    16e6:	38 85       	ldd	r19, Y+8	; 0x08
    16e8:	23 30       	cpi	r18, 0x03	; 3
    16ea:	31 05       	cpc	r19, r1
    16ec:	34 f4       	brge	.+12     	; 0x16fa <DIO_u8SetPinValue+0x58>
    16ee:	8f 81       	ldd	r24, Y+7	; 0x07
    16f0:	98 85       	ldd	r25, Y+8	; 0x08
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	69 f0       	breq	.+26     	; 0x1712 <DIO_u8SetPinValue+0x70>
    16f8:	60 c0       	rjmp	.+192    	; 0x17ba <DIO_u8SetPinValue+0x118>
    16fa:	2f 81       	ldd	r18, Y+7	; 0x07
    16fc:	38 85       	ldd	r19, Y+8	; 0x08
    16fe:	23 30       	cpi	r18, 0x03	; 3
    1700:	31 05       	cpc	r19, r1
    1702:	89 f1       	breq	.+98     	; 0x1766 <DIO_u8SetPinValue+0xc4>
    1704:	8f 81       	ldd	r24, Y+7	; 0x07
    1706:	98 85       	ldd	r25, Y+8	; 0x08
    1708:	84 30       	cpi	r24, 0x04	; 4
    170a:	91 05       	cpc	r25, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <DIO_u8SetPinValue+0x6e>
    170e:	40 c0       	rjmp	.+128    	; 0x1790 <DIO_u8SetPinValue+0xee>
    1710:	54 c0       	rjmp	.+168    	; 0x17ba <DIO_u8SetPinValue+0x118>
		{
		case PORT_A :
			CLR_BIT(PORTA,Copy_u8Pin);
    1712:	ab e3       	ldi	r26, 0x3B	; 59
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	eb e3       	ldi	r30, 0x3B	; 59
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_u8SetPinValue+0x8e>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_u8SetPinValue+0x8a>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	bb c0       	rjmp	.+374    	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_B :
			CLR_BIT(PORTB,Copy_u8Pin);
    173c:	a8 e3       	ldi	r26, 0x38	; 56
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e8 e3       	ldi	r30, 0x38	; 56
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_u8SetPinValue+0xb8>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_u8SetPinValue+0xb4>
    175e:	80 95       	com	r24
    1760:	84 23       	and	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	a6 c0       	rjmp	.+332    	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_C :
			CLR_BIT(PORTC,Copy_u8Pin);
    1766:	a5 e3       	ldi	r26, 0x35	; 53
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e3       	ldi	r30, 0x35	; 53
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	48 2f       	mov	r20, r24
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	02 2e       	mov	r0, r18
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_u8SetPinValue+0xe2>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	0a 94       	dec	r0
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_u8SetPinValue+0xde>
    1788:	80 95       	com	r24
    178a:	84 23       	and	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	91 c0       	rjmp	.+290    	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_D :
			CLR_BIT(PORTD,Copy_u8Pin);
    1790:	a2 e3       	ldi	r26, 0x32	; 50
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e2 e3       	ldi	r30, 0x32	; 50
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_u8SetPinValue+0x10c>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_u8SetPinValue+0x108>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	7c c0       	rjmp	.+248    	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	79 c0       	rjmp	.+242    	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		}
	}
	else if(Copy_u8Value == HIGH)
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <DIO_u8SetPinValue+0x126>
    17c6:	73 c0       	rjmp	.+230    	; 0x18ae <DIO_u8SetPinValue+0x20c>
	{
		switch (Copy_u8Port)
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	3e 83       	std	Y+6, r19	; 0x06
    17d0:	2d 83       	std	Y+5, r18	; 0x05
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	82 30       	cpi	r24, 0x02	; 2
    17d8:	91 05       	cpc	r25, r1
    17da:	51 f1       	breq	.+84     	; 0x1830 <DIO_u8SetPinValue+0x18e>
    17dc:	2d 81       	ldd	r18, Y+5	; 0x05
    17de:	3e 81       	ldd	r19, Y+6	; 0x06
    17e0:	23 30       	cpi	r18, 0x03	; 3
    17e2:	31 05       	cpc	r19, r1
    17e4:	34 f4       	brge	.+12     	; 0x17f2 <DIO_u8SetPinValue+0x150>
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	91 05       	cpc	r25, r1
    17ee:	61 f0       	breq	.+24     	; 0x1808 <DIO_u8SetPinValue+0x166>
    17f0:	5b c0       	rjmp	.+182    	; 0x18a8 <DIO_u8SetPinValue+0x206>
    17f2:	2d 81       	ldd	r18, Y+5	; 0x05
    17f4:	3e 81       	ldd	r19, Y+6	; 0x06
    17f6:	23 30       	cpi	r18, 0x03	; 3
    17f8:	31 05       	cpc	r19, r1
    17fa:	71 f1       	breq	.+92     	; 0x1858 <DIO_u8SetPinValue+0x1b6>
    17fc:	8d 81       	ldd	r24, Y+5	; 0x05
    17fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	91 05       	cpc	r25, r1
    1804:	e9 f1       	breq	.+122    	; 0x1880 <DIO_u8SetPinValue+0x1de>
    1806:	50 c0       	rjmp	.+160    	; 0x18a8 <DIO_u8SetPinValue+0x206>
		{
		case PORT_A :
			SET_BIT(PORTA,Copy_u8Pin);
    1808:	ab e3       	ldi	r26, 0x3B	; 59
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	eb e3       	ldi	r30, 0x3B	; 59
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_u8SetPinValue+0x184>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_u8SetPinValue+0x180>
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24
    182e:	41 c0       	rjmp	.+130    	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_B :
			SET_BIT(PORTB,Copy_u8Pin);
    1830:	a8 e3       	ldi	r26, 0x38	; 56
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e8 e3       	ldi	r30, 0x38	; 56
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_u8SetPinValue+0x1ac>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_u8SetPinValue+0x1a8>
    1852:	84 2b       	or	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	2d c0       	rjmp	.+90     	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_C :
			SET_BIT(PORTC,Copy_u8Pin);
    1858:	a5 e3       	ldi	r26, 0x35	; 53
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 e3       	ldi	r30, 0x35	; 53
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <DIO_u8SetPinValue+0x1d4>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <DIO_u8SetPinValue+0x1d0>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	19 c0       	rjmp	.+50     	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_D :
			SET_BIT(PORTD,Copy_u8Pin);
    1880:	a2 e3       	ldi	r26, 0x32	; 50
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e2 e3       	ldi	r30, 0x32	; 50
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <DIO_u8SetPinValue+0x1fc>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <DIO_u8SetPinValue+0x1f8>
    18a2:	84 2b       	or	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_u8SetPinValue+0x210>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b4:	28 96       	adiw	r28, 0x08	; 8
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <DIO_u8SetPortValue+0x6>
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <DIO_u8SetPortValue+0x8>
    18ce:	0f 92       	push	r0
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
    18d4:	8a 83       	std	Y+2, r24	; 0x02
    18d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    18d8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	3d 83       	std	Y+5, r19	; 0x05
    18e2:	2c 83       	std	Y+4, r18	; 0x04
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	91 05       	cpc	r25, r1
    18ec:	d9 f0       	breq	.+54     	; 0x1924 <DIO_u8SetPortValue+0x5e>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	23 30       	cpi	r18, 0x03	; 3
    18f4:	31 05       	cpc	r19, r1
    18f6:	34 f4       	brge	.+12     	; 0x1904 <DIO_u8SetPortValue+0x3e>
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	91 05       	cpc	r25, r1
    1900:	61 f0       	breq	.+24     	; 0x191a <DIO_u8SetPortValue+0x54>
    1902:	1f c0       	rjmp	.+62     	; 0x1942 <DIO_u8SetPortValue+0x7c>
    1904:	2c 81       	ldd	r18, Y+4	; 0x04
    1906:	3d 81       	ldd	r19, Y+5	; 0x05
    1908:	23 30       	cpi	r18, 0x03	; 3
    190a:	31 05       	cpc	r19, r1
    190c:	81 f0       	breq	.+32     	; 0x192e <DIO_u8SetPortValue+0x68>
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	9d 81       	ldd	r25, Y+5	; 0x05
    1912:	84 30       	cpi	r24, 0x04	; 4
    1914:	91 05       	cpc	r25, r1
    1916:	81 f0       	breq	.+32     	; 0x1938 <DIO_u8SetPortValue+0x72>
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <DIO_u8SetPortValue+0x7c>
	{
	case PORT_A :
		PORTA = Copy_u8Value;
    191a:	eb e3       	ldi	r30, 0x3B	; 59
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	80 83       	st	Z, r24
    1922:	11 c0       	rjmp	.+34     	; 0x1946 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_B :
		PORTB = Copy_u8Value ;
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	80 83       	st	Z, r24
    192c:	0c c0       	rjmp	.+24     	; 0x1946 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_C :
		PORTC = Copy_u8Value ;
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	80 83       	st	Z, r24
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_D :
		PORTD = Copy_u8Value ;
    1938:	e2 e3       	ldi	r30, 0x32	; 50
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	80 83       	st	Z, r24
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_u8SetPortValue+0x80>
		break;

	default :

		Local_u8ErrorState =1;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	27 97       	sbiw	r28, 0x07	; 7
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	8a 83       	std	Y+2, r24	; 0x02
    196e:	6b 83       	std	Y+3, r22	; 0x03
    1970:	5d 83       	std	Y+5, r21	; 0x05
    1972:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    1974:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Value == NULL) || (Copy_u8Pin > 7))
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	19 f0       	breq	.+6      	; 0x1984 <DIO_u8GetPinValue+0x2c>
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	88 30       	cpi	r24, 0x08	; 8
    1982:	10 f0       	brcs	.+4      	; 0x1988 <DIO_u8GetPinValue+0x30>
		Local_u8ErrorState =1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Port)
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	3f 83       	std	Y+7, r19	; 0x07
    1990:	2e 83       	std	Y+6, r18	; 0x06
    1992:	4e 81       	ldd	r20, Y+6	; 0x06
    1994:	5f 81       	ldd	r21, Y+7	; 0x07
    1996:	42 30       	cpi	r20, 0x02	; 2
    1998:	51 05       	cpc	r21, r1
    199a:	59 f1       	breq	.+86     	; 0x19f2 <DIO_u8GetPinValue+0x9a>
    199c:	8e 81       	ldd	r24, Y+6	; 0x06
    199e:	9f 81       	ldd	r25, Y+7	; 0x07
    19a0:	83 30       	cpi	r24, 0x03	; 3
    19a2:	91 05       	cpc	r25, r1
    19a4:	34 f4       	brge	.+12     	; 0x19b2 <DIO_u8GetPinValue+0x5a>
    19a6:	2e 81       	ldd	r18, Y+6	; 0x06
    19a8:	3f 81       	ldd	r19, Y+7	; 0x07
    19aa:	21 30       	cpi	r18, 0x01	; 1
    19ac:	31 05       	cpc	r19, r1
    19ae:	69 f0       	breq	.+26     	; 0x19ca <DIO_u8GetPinValue+0x72>
    19b0:	5c c0       	rjmp	.+184    	; 0x1a6a <DIO_u8GetPinValue+0x112>
    19b2:	4e 81       	ldd	r20, Y+6	; 0x06
    19b4:	5f 81       	ldd	r21, Y+7	; 0x07
    19b6:	43 30       	cpi	r20, 0x03	; 3
    19b8:	51 05       	cpc	r21, r1
    19ba:	79 f1       	breq	.+94     	; 0x1a1a <DIO_u8GetPinValue+0xc2>
    19bc:	8e 81       	ldd	r24, Y+6	; 0x06
    19be:	9f 81       	ldd	r25, Y+7	; 0x07
    19c0:	84 30       	cpi	r24, 0x04	; 4
    19c2:	91 05       	cpc	r25, r1
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <DIO_u8GetPinValue+0x70>
    19c6:	3d c0       	rjmp	.+122    	; 0x1a42 <DIO_u8GetPinValue+0xea>
    19c8:	50 c0       	rjmp	.+160    	; 0x1a6a <DIO_u8GetPinValue+0x112>
	{
	case PORT_A :
		*Copy_u8Value = GET_BIT(PINA,Copy_u8Pin);
    19ca:	e9 e3       	ldi	r30, 0x39	; 57
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	a9 01       	movw	r20, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <DIO_u8GetPinValue+0x8a>
    19de:	55 95       	asr	r21
    19e0:	47 95       	ror	r20
    19e2:	8a 95       	dec	r24
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <DIO_u8GetPinValue+0x86>
    19e6:	ca 01       	movw	r24, r20
    19e8:	81 70       	andi	r24, 0x01	; 1
    19ea:	ec 81       	ldd	r30, Y+4	; 0x04
    19ec:	fd 81       	ldd	r31, Y+5	; 0x05
    19ee:	80 83       	st	Z, r24
    19f0:	3e c0       	rjmp	.+124    	; 0x1a6e <DIO_u8GetPinValue+0x116>
		break;
	case PORT_B :
		*Copy_u8Value = GET_BIT(PINB,Copy_u8Pin);
    19f2:	e6 e3       	ldi	r30, 0x36	; 54
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <DIO_u8GetPinValue+0xb2>
    1a06:	55 95       	asr	r21
    1a08:	47 95       	ror	r20
    1a0a:	8a 95       	dec	r24
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <DIO_u8GetPinValue+0xae>
    1a0e:	ca 01       	movw	r24, r20
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	ec 81       	ldd	r30, Y+4	; 0x04
    1a14:	fd 81       	ldd	r31, Y+5	; 0x05
    1a16:	80 83       	st	Z, r24
    1a18:	2a c0       	rjmp	.+84     	; 0x1a6e <DIO_u8GetPinValue+0x116>
		break;
	case PORT_C :
		*Copy_u8Value = GET_BIT(PINC,Copy_u8Pin);
    1a1a:	e3 e3       	ldi	r30, 0x33	; 51
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	88 2f       	mov	r24, r24
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a9 01       	movw	r20, r18
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_u8GetPinValue+0xda>
    1a2e:	55 95       	asr	r21
    1a30:	47 95       	ror	r20
    1a32:	8a 95       	dec	r24
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_u8GetPinValue+0xd6>
    1a36:	ca 01       	movw	r24, r20
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a3e:	80 83       	st	Z, r24
    1a40:	16 c0       	rjmp	.+44     	; 0x1a6e <DIO_u8GetPinValue+0x116>
		break;
	case PORT_D :
		*Copy_u8Value = GET_BIT(PIND,Copy_u8Pin);
    1a42:	e0 e3       	ldi	r30, 0x30	; 48
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a9 01       	movw	r20, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_u8GetPinValue+0x102>
    1a56:	55 95       	asr	r21
    1a58:	47 95       	ror	r20
    1a5a:	8a 95       	dec	r24
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_u8GetPinValue+0xfe>
    1a5e:	ca 01       	movw	r24, r20
    1a60:	81 70       	andi	r24, 0x01	; 1
    1a62:	ec 81       	ldd	r30, Y+4	; 0x04
    1a64:	fd 81       	ldd	r31, Y+5	; 0x05
    1a66:	80 83       	st	Z, r24
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <DIO_u8GetPinValue+0x116>
		break;
	default:
		Local_u8ErrorState =1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a70:	27 96       	adiw	r28, 0x07	; 7
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8* Copy_u8Value)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <DIO_u8GetPortValue+0x6>
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <DIO_u8GetPortValue+0x8>
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <DIO_u8GetPortValue+0xa>
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	8a 83       	std	Y+2, r24	; 0x02
    1a92:	7c 83       	std	Y+4, r23	; 0x04
    1a94:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    1a96:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	3e 83       	std	Y+6, r19	; 0x06
    1aa0:	2d 83       	std	Y+5, r18	; 0x05
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	e9 f0       	breq	.+58     	; 0x1ae6 <DIO_u8GetPortValue+0x64>
    1aac:	2d 81       	ldd	r18, Y+5	; 0x05
    1aae:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab0:	23 30       	cpi	r18, 0x03	; 3
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	34 f4       	brge	.+12     	; 0x1ac2 <DIO_u8GetPortValue+0x40>
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	91 05       	cpc	r25, r1
    1abe:	61 f0       	breq	.+24     	; 0x1ad8 <DIO_u8GetPortValue+0x56>
    1ac0:	27 c0       	rjmp	.+78     	; 0x1b10 <DIO_u8GetPortValue+0x8e>
    1ac2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac6:	23 30       	cpi	r18, 0x03	; 3
    1ac8:	31 05       	cpc	r19, r1
    1aca:	a1 f0       	breq	.+40     	; 0x1af4 <DIO_u8GetPortValue+0x72>
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	84 30       	cpi	r24, 0x04	; 4
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	b1 f0       	breq	.+44     	; 0x1b02 <DIO_u8GetPortValue+0x80>
    1ad6:	1c c0       	rjmp	.+56     	; 0x1b10 <DIO_u8GetPortValue+0x8e>
	{
	case PORT_A :
		*Copy_u8Value = PINA ;
    1ad8:	e9 e3       	ldi	r30, 0x39	; 57
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae2:	80 83       	st	Z, r24
    1ae4:	17 c0       	rjmp	.+46     	; 0x1b14 <DIO_u8GetPortValue+0x92>
		break;
	case PORT_B :
		*Copy_u8Value = PINB ;
    1ae6:	e6 e3       	ldi	r30, 0x36	; 54
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	eb 81       	ldd	r30, Y+3	; 0x03
    1aee:	fc 81       	ldd	r31, Y+4	; 0x04
    1af0:	80 83       	st	Z, r24
    1af2:	10 c0       	rjmp	.+32     	; 0x1b14 <DIO_u8GetPortValue+0x92>
		break;
	case PORT_C :
		*Copy_u8Value = PINC ;
    1af4:	e3 e3       	ldi	r30, 0x33	; 51
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	eb 81       	ldd	r30, Y+3	; 0x03
    1afc:	fc 81       	ldd	r31, Y+4	; 0x04
    1afe:	80 83       	st	Z, r24
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <DIO_u8GetPortValue+0x92>
		break;
	case PORT_D :
		*Copy_u8Value = PIND ;
    1b02:	e0 e3       	ldi	r30, 0x30	; 48
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0c:	80 83       	st	Z, r24
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <DIO_u8GetPortValue+0x92>
		break;
	default :
		Local_u8ErrorState =1;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState ;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b16:	26 96       	adiw	r28, 0x06	; 6
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <main>:
#include<util/delay.h>
#include"COTS/2-HAL/SW/SW_interface.h"
#include"COTS/2-HAL/LCD/LCD_interface.h"
void main (void)
{
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	c3 5a       	subi	r28, 0xA3	; 163
    1b36:	d0 40       	sbci	r29, 0x00	; 0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPortDirection(PORT_A, 0xff);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	6f ef       	ldi	r22, 0xFF	; 255
    1b46:	0e 94 08 0b 	call	0x1610	; 0x1610 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(PORT_B, PIN0, OUTPUT);
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_B, PIN1, OUTPUT);
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_B, PIN2, OUTPUT);
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	62 e0       	ldi	r22, 0x02	; 2
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	0e 94 f6 09 	call	0x13ec	; 0x13ec <DIO_u8SetPinDirection>
	LCD_voidInit();
    1b68:	0e 94 59 08 	call	0x10b2	; 0x10b2 <LCD_voidInit>
	u8 op[4] = {'*','/','+','-'};
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ea 57       	subi	r30, 0x7A	; 122
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	8a e2       	ldi	r24, 0x2A	; 42
    1b74:	80 83       	st	Z, r24
    1b76:	fe 01       	movw	r30, r28
    1b78:	ea 57       	subi	r30, 0x7A	; 122
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	8f e2       	ldi	r24, 0x2F	; 47
    1b7e:	81 83       	std	Z+1, r24	; 0x01
    1b80:	fe 01       	movw	r30, r28
    1b82:	ea 57       	subi	r30, 0x7A	; 122
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	8b e2       	ldi	r24, 0x2B	; 43
    1b88:	82 83       	std	Z+2, r24	; 0x02
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ea 57       	subi	r30, 0x7A	; 122
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	8d e2       	ldi	r24, 0x2D	; 45
    1b92:	83 83       	std	Z+3, r24	; 0x03
	s8 Number2=0;
    1b94:	fe 01       	movw	r30, r28
    1b96:	eb 57       	subi	r30, 0x7B	; 123
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	10 82       	st	Z, r1
	s8 Number3=0;
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ec 57       	subi	r30, 0x7C	; 124
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	10 82       	st	Z, r1
	s8 Number1=0;
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ed 57       	subi	r30, 0x7D	; 125
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	10 82       	st	Z, r1
	u8 y=0;
    1bac:	fe 01       	movw	r30, r28
    1bae:	ee 57       	subi	r30, 0x7E	; 126
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	10 82       	st	Z, r1
	SW_t INC =
	{PORT_D,PIN0,PULL_UP
	};
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	86 57       	subi	r24, 0x76	; 118
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	cb 56       	subi	r28, 0x6B	; 107
    1bbc:	df 4f       	sbci	r29, 0xFF	; 255
    1bbe:	99 83       	std	Y+1, r25	; 0x01
    1bc0:	88 83       	st	Y, r24
    1bc2:	c5 59       	subi	r28, 0x95	; 149
    1bc4:	d0 40       	sbci	r29, 0x00	; 0
    1bc6:	24 e8       	ldi	r18, 0x84	; 132
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	c9 56       	subi	r28, 0x69	; 105
    1bcc:	df 4f       	sbci	r29, 0xFF	; 255
    1bce:	39 83       	std	Y+1, r19	; 0x01
    1bd0:	28 83       	st	Y, r18
    1bd2:	c7 59       	subi	r28, 0x97	; 151
    1bd4:	d0 40       	sbci	r29, 0x00	; 0
    1bd6:	33 e0       	ldi	r19, 0x03	; 3
    1bd8:	c7 56       	subi	r28, 0x67	; 103
    1bda:	df 4f       	sbci	r29, 0xFF	; 255
    1bdc:	38 83       	st	Y, r19
    1bde:	c9 59       	subi	r28, 0x99	; 153
    1be0:	d0 40       	sbci	r29, 0x00	; 0
    1be2:	c9 56       	subi	r28, 0x69	; 105
    1be4:	df 4f       	sbci	r29, 0xFF	; 255
    1be6:	e8 81       	ld	r30, Y
    1be8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bea:	c7 59       	subi	r28, 0x97	; 151
    1bec:	d0 40       	sbci	r29, 0x00	; 0
    1bee:	00 80       	ld	r0, Z
    1bf0:	c9 56       	subi	r28, 0x69	; 105
    1bf2:	df 4f       	sbci	r29, 0xFF	; 255
    1bf4:	28 81       	ld	r18, Y
    1bf6:	39 81       	ldd	r19, Y+1	; 0x01
    1bf8:	c7 59       	subi	r28, 0x97	; 151
    1bfa:	d0 40       	sbci	r29, 0x00	; 0
    1bfc:	2f 5f       	subi	r18, 0xFF	; 255
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	c9 56       	subi	r28, 0x69	; 105
    1c02:	df 4f       	sbci	r29, 0xFF	; 255
    1c04:	39 83       	std	Y+1, r19	; 0x01
    1c06:	28 83       	st	Y, r18
    1c08:	c7 59       	subi	r28, 0x97	; 151
    1c0a:	d0 40       	sbci	r29, 0x00	; 0
    1c0c:	cb 56       	subi	r28, 0x6B	; 107
    1c0e:	df 4f       	sbci	r29, 0xFF	; 255
    1c10:	e8 81       	ld	r30, Y
    1c12:	f9 81       	ldd	r31, Y+1	; 0x01
    1c14:	c5 59       	subi	r28, 0x95	; 149
    1c16:	d0 40       	sbci	r29, 0x00	; 0
    1c18:	00 82       	st	Z, r0
    1c1a:	cb 56       	subi	r28, 0x6B	; 107
    1c1c:	df 4f       	sbci	r29, 0xFF	; 255
    1c1e:	28 81       	ld	r18, Y
    1c20:	39 81       	ldd	r19, Y+1	; 0x01
    1c22:	c5 59       	subi	r28, 0x95	; 149
    1c24:	d0 40       	sbci	r29, 0x00	; 0
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	cb 56       	subi	r28, 0x6B	; 107
    1c2c:	df 4f       	sbci	r29, 0xFF	; 255
    1c2e:	39 83       	std	Y+1, r19	; 0x01
    1c30:	28 83       	st	Y, r18
    1c32:	c5 59       	subi	r28, 0x95	; 149
    1c34:	d0 40       	sbci	r29, 0x00	; 0
    1c36:	c7 56       	subi	r28, 0x67	; 103
    1c38:	df 4f       	sbci	r29, 0xFF	; 255
    1c3a:	38 81       	ld	r19, Y
    1c3c:	c9 59       	subi	r28, 0x99	; 153
    1c3e:	d0 40       	sbci	r29, 0x00	; 0
    1c40:	31 50       	subi	r19, 0x01	; 1
    1c42:	c7 56       	subi	r28, 0x67	; 103
    1c44:	df 4f       	sbci	r29, 0xFF	; 255
    1c46:	38 83       	st	Y, r19
    1c48:	c9 59       	subi	r28, 0x99	; 153
    1c4a:	d0 40       	sbci	r29, 0x00	; 0
    1c4c:	c7 56       	subi	r28, 0x67	; 103
    1c4e:	df 4f       	sbci	r29, 0xFF	; 255
    1c50:	88 81       	ld	r24, Y
    1c52:	c9 59       	subi	r28, 0x99	; 153
    1c54:	d0 40       	sbci	r29, 0x00	; 0
    1c56:	88 23       	and	r24, r24
    1c58:	21 f6       	brne	.-120    	; 0x1be2 <main+0xba>
	SW_t DEC =
	{PORT_D,PIN1,PULL_UP
	};
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	83 57       	subi	r24, 0x73	; 115
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	c6 56       	subi	r28, 0x66	; 102
    1c62:	df 4f       	sbci	r29, 0xFF	; 255
    1c64:	99 83       	std	Y+1, r25	; 0x01
    1c66:	88 83       	st	Y, r24
    1c68:	ca 59       	subi	r28, 0x9A	; 154
    1c6a:	d0 40       	sbci	r29, 0x00	; 0
    1c6c:	e1 e8       	ldi	r30, 0x81	; 129
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	c4 56       	subi	r28, 0x64	; 100
    1c72:	df 4f       	sbci	r29, 0xFF	; 255
    1c74:	f9 83       	std	Y+1, r31	; 0x01
    1c76:	e8 83       	st	Y, r30
    1c78:	cc 59       	subi	r28, 0x9C	; 156
    1c7a:	d0 40       	sbci	r29, 0x00	; 0
    1c7c:	f3 e0       	ldi	r31, 0x03	; 3
    1c7e:	c2 56       	subi	r28, 0x62	; 98
    1c80:	df 4f       	sbci	r29, 0xFF	; 255
    1c82:	f8 83       	st	Y, r31
    1c84:	ce 59       	subi	r28, 0x9E	; 158
    1c86:	d0 40       	sbci	r29, 0x00	; 0
    1c88:	c4 56       	subi	r28, 0x64	; 100
    1c8a:	df 4f       	sbci	r29, 0xFF	; 255
    1c8c:	e8 81       	ld	r30, Y
    1c8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c90:	cc 59       	subi	r28, 0x9C	; 156
    1c92:	d0 40       	sbci	r29, 0x00	; 0
    1c94:	00 80       	ld	r0, Z
    1c96:	c4 56       	subi	r28, 0x64	; 100
    1c98:	df 4f       	sbci	r29, 0xFF	; 255
    1c9a:	28 81       	ld	r18, Y
    1c9c:	39 81       	ldd	r19, Y+1	; 0x01
    1c9e:	cc 59       	subi	r28, 0x9C	; 156
    1ca0:	d0 40       	sbci	r29, 0x00	; 0
    1ca2:	2f 5f       	subi	r18, 0xFF	; 255
    1ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca6:	c4 56       	subi	r28, 0x64	; 100
    1ca8:	df 4f       	sbci	r29, 0xFF	; 255
    1caa:	39 83       	std	Y+1, r19	; 0x01
    1cac:	28 83       	st	Y, r18
    1cae:	cc 59       	subi	r28, 0x9C	; 156
    1cb0:	d0 40       	sbci	r29, 0x00	; 0
    1cb2:	c6 56       	subi	r28, 0x66	; 102
    1cb4:	df 4f       	sbci	r29, 0xFF	; 255
    1cb6:	e8 81       	ld	r30, Y
    1cb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cba:	ca 59       	subi	r28, 0x9A	; 154
    1cbc:	d0 40       	sbci	r29, 0x00	; 0
    1cbe:	00 82       	st	Z, r0
    1cc0:	c6 56       	subi	r28, 0x66	; 102
    1cc2:	df 4f       	sbci	r29, 0xFF	; 255
    1cc4:	28 81       	ld	r18, Y
    1cc6:	39 81       	ldd	r19, Y+1	; 0x01
    1cc8:	ca 59       	subi	r28, 0x9A	; 154
    1cca:	d0 40       	sbci	r29, 0x00	; 0
    1ccc:	2f 5f       	subi	r18, 0xFF	; 255
    1cce:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd0:	c6 56       	subi	r28, 0x66	; 102
    1cd2:	df 4f       	sbci	r29, 0xFF	; 255
    1cd4:	39 83       	std	Y+1, r19	; 0x01
    1cd6:	28 83       	st	Y, r18
    1cd8:	ca 59       	subi	r28, 0x9A	; 154
    1cda:	d0 40       	sbci	r29, 0x00	; 0
    1cdc:	c2 56       	subi	r28, 0x62	; 98
    1cde:	df 4f       	sbci	r29, 0xFF	; 255
    1ce0:	38 81       	ld	r19, Y
    1ce2:	ce 59       	subi	r28, 0x9E	; 158
    1ce4:	d0 40       	sbci	r29, 0x00	; 0
    1ce6:	31 50       	subi	r19, 0x01	; 1
    1ce8:	c2 56       	subi	r28, 0x62	; 98
    1cea:	df 4f       	sbci	r29, 0xFF	; 255
    1cec:	38 83       	st	Y, r19
    1cee:	ce 59       	subi	r28, 0x9E	; 158
    1cf0:	d0 40       	sbci	r29, 0x00	; 0
    1cf2:	c2 56       	subi	r28, 0x62	; 98
    1cf4:	df 4f       	sbci	r29, 0xFF	; 255
    1cf6:	88 81       	ld	r24, Y
    1cf8:	ce 59       	subi	r28, 0x9E	; 158
    1cfa:	d0 40       	sbci	r29, 0x00	; 0
    1cfc:	88 23       	and	r24, r24
    1cfe:	21 f6       	brne	.-120    	; 0x1c88 <main+0x160>
	SW_t ENT =
	{PORT_D,PIN2,PULL_UP
	};
    1d00:	ce 01       	movw	r24, r28
    1d02:	80 57       	subi	r24, 0x70	; 112
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	c1 56       	subi	r28, 0x61	; 97
    1d08:	df 4f       	sbci	r29, 0xFF	; 255
    1d0a:	99 83       	std	Y+1, r25	; 0x01
    1d0c:	88 83       	st	Y, r24
    1d0e:	cf 59       	subi	r28, 0x9F	; 159
    1d10:	d0 40       	sbci	r29, 0x00	; 0
    1d12:	ee e7       	ldi	r30, 0x7E	; 126
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	cf 55       	subi	r28, 0x5F	; 95
    1d18:	df 4f       	sbci	r29, 0xFF	; 255
    1d1a:	f9 83       	std	Y+1, r31	; 0x01
    1d1c:	e8 83       	st	Y, r30
    1d1e:	c1 5a       	subi	r28, 0xA1	; 161
    1d20:	d0 40       	sbci	r29, 0x00	; 0
    1d22:	f3 e0       	ldi	r31, 0x03	; 3
    1d24:	cd 55       	subi	r28, 0x5D	; 93
    1d26:	df 4f       	sbci	r29, 0xFF	; 255
    1d28:	f8 83       	st	Y, r31
    1d2a:	c3 5a       	subi	r28, 0xA3	; 163
    1d2c:	d0 40       	sbci	r29, 0x00	; 0
    1d2e:	cf 55       	subi	r28, 0x5F	; 95
    1d30:	df 4f       	sbci	r29, 0xFF	; 255
    1d32:	e8 81       	ld	r30, Y
    1d34:	f9 81       	ldd	r31, Y+1	; 0x01
    1d36:	c1 5a       	subi	r28, 0xA1	; 161
    1d38:	d0 40       	sbci	r29, 0x00	; 0
    1d3a:	00 80       	ld	r0, Z
    1d3c:	cf 55       	subi	r28, 0x5F	; 95
    1d3e:	df 4f       	sbci	r29, 0xFF	; 255
    1d40:	28 81       	ld	r18, Y
    1d42:	39 81       	ldd	r19, Y+1	; 0x01
    1d44:	c1 5a       	subi	r28, 0xA1	; 161
    1d46:	d0 40       	sbci	r29, 0x00	; 0
    1d48:	2f 5f       	subi	r18, 0xFF	; 255
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	cf 55       	subi	r28, 0x5F	; 95
    1d4e:	df 4f       	sbci	r29, 0xFF	; 255
    1d50:	39 83       	std	Y+1, r19	; 0x01
    1d52:	28 83       	st	Y, r18
    1d54:	c1 5a       	subi	r28, 0xA1	; 161
    1d56:	d0 40       	sbci	r29, 0x00	; 0
    1d58:	c1 56       	subi	r28, 0x61	; 97
    1d5a:	df 4f       	sbci	r29, 0xFF	; 255
    1d5c:	e8 81       	ld	r30, Y
    1d5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d60:	cf 59       	subi	r28, 0x9F	; 159
    1d62:	d0 40       	sbci	r29, 0x00	; 0
    1d64:	00 82       	st	Z, r0
    1d66:	c1 56       	subi	r28, 0x61	; 97
    1d68:	df 4f       	sbci	r29, 0xFF	; 255
    1d6a:	28 81       	ld	r18, Y
    1d6c:	39 81       	ldd	r19, Y+1	; 0x01
    1d6e:	cf 59       	subi	r28, 0x9F	; 159
    1d70:	d0 40       	sbci	r29, 0x00	; 0
    1d72:	2f 5f       	subi	r18, 0xFF	; 255
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	c1 56       	subi	r28, 0x61	; 97
    1d78:	df 4f       	sbci	r29, 0xFF	; 255
    1d7a:	39 83       	std	Y+1, r19	; 0x01
    1d7c:	28 83       	st	Y, r18
    1d7e:	cf 59       	subi	r28, 0x9F	; 159
    1d80:	d0 40       	sbci	r29, 0x00	; 0
    1d82:	cd 55       	subi	r28, 0x5D	; 93
    1d84:	df 4f       	sbci	r29, 0xFF	; 255
    1d86:	38 81       	ld	r19, Y
    1d88:	c3 5a       	subi	r28, 0xA3	; 163
    1d8a:	d0 40       	sbci	r29, 0x00	; 0
    1d8c:	31 50       	subi	r19, 0x01	; 1
    1d8e:	cd 55       	subi	r28, 0x5D	; 93
    1d90:	df 4f       	sbci	r29, 0xFF	; 255
    1d92:	38 83       	st	Y, r19
    1d94:	c3 5a       	subi	r28, 0xA3	; 163
    1d96:	d0 40       	sbci	r29, 0x00	; 0
    1d98:	cd 55       	subi	r28, 0x5D	; 93
    1d9a:	df 4f       	sbci	r29, 0xFF	; 255
    1d9c:	88 81       	ld	r24, Y
    1d9e:	c3 5a       	subi	r28, 0xA3	; 163
    1da0:	d0 40       	sbci	r29, 0x00	; 0
    1da2:	88 23       	and	r24, r24
    1da4:	21 f6       	brne	.-120    	; 0x1d2e <main+0x206>
	SW_Def(&INC);
    1da6:	ce 01       	movw	r24, r28
    1da8:	86 57       	subi	r24, 0x76	; 118
    1daa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dac:	0e 94 9b 05 	call	0xb36	; 0xb36 <SW_Def>
	SW_Def(&DEC);
    1db0:	ce 01       	movw	r24, r28
    1db2:	83 57       	subi	r24, 0x73	; 115
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	0e 94 9b 05 	call	0xb36	; 0xb36 <SW_Def>
	SW_Def(&ENT);
    1dba:	ce 01       	movw	r24, r28
    1dbc:	80 57       	subi	r24, 0x70	; 112
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	0e 94 9b 05 	call	0xb36	; 0xb36 <SW_Def>
	LCD_voidSendString("0 * 0");
    1dc4:	80 e6       	ldi	r24, 0x60	; 96
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
	LCD_voidGoToXY(1,y);
    1dcc:	fe 01       	movw	r30, r28
    1dce:	ee 57       	subi	r30, 0x7E	; 126
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	60 81       	ld	r22, Z
    1dd6:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
	LCD_voidSendString("^");
    1dda:	86 e6       	ldi	r24, 0x66	; 102
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
	LCD_voidGoToXY(0,y);
    1de2:	fe 01       	movw	r30, r28
    1de4:	ee 57       	subi	r30, 0x7E	; 126
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	60 81       	ld	r22, Z
    1dec:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
	while(1)
	{
		if(y==0)
    1df0:	fe 01       	movw	r30, r28
    1df2:	ee 57       	subi	r30, 0x7E	; 126
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	88 23       	and	r24, r24
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <main+0x2d6>
    1dfc:	a8 c2       	rjmp	.+1360   	; 0x234e <main+0x826>
		{
			while(1)
			{
				if(SW_GetState(&INC)==1)
    1dfe:	ce 01       	movw	r24, r28
    1e00:	86 57       	subi	r24, 0x76	; 118
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <main+0x2e6>
    1e0c:	da c0       	rjmp	.+436    	; 0x1fc2 <main+0x49a>
				{
					Number1++;
    1e0e:	de 01       	movw	r26, r28
    1e10:	ad 57       	subi	r26, 0x7D	; 125
    1e12:	bf 4f       	sbci	r27, 0xFF	; 255
    1e14:	fe 01       	movw	r30, r28
    1e16:	ed 57       	subi	r30, 0x7D	; 125
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	8c 93       	st	X, r24
					if(Number1==10)
    1e20:	fe 01       	movw	r30, r28
    1e22:	ed 57       	subi	r30, 0x7D	; 125
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 81       	ld	r24, Z
    1e28:	8a 30       	cpi	r24, 0x0A	; 10
    1e2a:	21 f4       	brne	.+8      	; 0x1e34 <main+0x30c>
					{
						Number1=0;
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	ed 57       	subi	r30, 0x7D	; 125
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	10 82       	st	Z, r1
					}
					LCD_voidWriteNumber(Number1);
    1e34:	fe 01       	movw	r30, r28
    1e36:	ed 57       	subi	r30, 0x7D	; 125
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	99 27       	eor	r25, r25
    1e3e:	87 fd       	sbrc	r24, 7
    1e40:	90 95       	com	r25
    1e42:	a9 2f       	mov	r26, r25
    1e44:	b9 2f       	mov	r27, r25
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e5 58       	subi	r30, 0x85	; 133
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	aa ef       	ldi	r26, 0xFA	; 250
    1e5a:	b3 e4       	ldi	r27, 0x43	; 67
    1e5c:	80 83       	st	Z, r24
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	a2 83       	std	Z+2, r26	; 0x02
    1e62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e64:	8e 01       	movw	r16, r28
    1e66:	09 58       	subi	r16, 0x89	; 137
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e5 58       	subi	r30, 0x85	; 133
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a ef       	ldi	r20, 0xFA	; 250
    1e7e:	54 e4       	ldi	r21, 0x44	; 68
    1e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	f8 01       	movw	r30, r16
    1e8a:	80 83       	st	Z, r24
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	a2 83       	std	Z+2, r26	; 0x02
    1e90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e92:	fe 01       	movw	r30, r28
    1e94:	e9 58       	subi	r30, 0x89	; 137
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	44 f4       	brge	.+16     	; 0x1ec0 <main+0x398>
		__ticks = 1;
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	eb 58       	subi	r30, 0x8B	; 139
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    1ebe:	64 c0       	rjmp	.+200    	; 0x1f88 <main+0x460>
	else if (__tmp > 65535)
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e9 58       	subi	r30, 0x89	; 137
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	60 81       	ld	r22, Z
    1ec8:	71 81       	ldd	r23, Z+1	; 0x01
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	93 81       	ldd	r25, Z+3	; 0x03
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	0c f0       	brlt	.+2      	; 0x1ee0 <main+0x3b8>
    1ede:	43 c0       	rjmp	.+134    	; 0x1f66 <main+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e5 58       	subi	r30, 0x85	; 133
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	60 81       	ld	r22, Z
    1ee8:	71 81       	ldd	r23, Z+1	; 0x01
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
    1ef4:	51 e4       	ldi	r21, 0x41	; 65
    1ef6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	8e 01       	movw	r16, r28
    1f00:	0b 58       	subi	r16, 0x8B	; 139
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	f8 01       	movw	r30, r16
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24
    1f16:	1f c0       	rjmp	.+62     	; 0x1f56 <main+0x42e>
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ed 58       	subi	r30, 0x8D	; 141
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	88 ec       	ldi	r24, 0xC8	; 200
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
    1f26:	fe 01       	movw	r30, r28
    1f28:	ed 58       	subi	r30, 0x8D	; 141
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	80 81       	ld	r24, Z
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <main+0x408>
    1f34:	fe 01       	movw	r30, r28
    1f36:	ed 58       	subi	r30, 0x8D	; 141
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3e:	de 01       	movw	r26, r28
    1f40:	ab 58       	subi	r26, 0x8B	; 139
    1f42:	bf 4f       	sbci	r27, 0xFF	; 255
    1f44:	fe 01       	movw	r30, r28
    1f46:	eb 58       	subi	r30, 0x8B	; 139
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	91 81       	ldd	r25, Z+1	; 0x01
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	11 96       	adiw	r26, 0x01	; 1
    1f52:	9c 93       	st	X, r25
    1f54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f56:	fe 01       	movw	r30, r28
    1f58:	eb 58       	subi	r30, 0x8B	; 139
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	d1 f6       	brne	.-76     	; 0x1f18 <main+0x3f0>
    1f64:	27 c0       	rjmp	.+78     	; 0x1fb4 <main+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f66:	8e 01       	movw	r16, r28
    1f68:	0b 58       	subi	r16, 0x8B	; 139
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e9 58       	subi	r30, 0x89	; 137
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	f8 01       	movw	r30, r16
    1f84:	91 83       	std	Z+1, r25	; 0x01
    1f86:	80 83       	st	Z, r24
    1f88:	de 01       	movw	r26, r28
    1f8a:	af 58       	subi	r26, 0x8F	; 143
    1f8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8e:	fe 01       	movw	r30, r28
    1f90:	eb 58       	subi	r30, 0x8B	; 139
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	8d 93       	st	X+, r24
    1f9a:	9c 93       	st	X, r25
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ef 58       	subi	r30, 0x8F	; 143
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	91 81       	ldd	r25, Z+1	; 0x01
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <main+0x47e>
    1faa:	fe 01       	movw	r30, r28
    1fac:	ef 58       	subi	r30, 0x8F	; 143
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_voidGoToXY(0,y);
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ee 57       	subi	r30, 0x7E	; 126
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	60 81       	ld	r22, Z
    1fbe:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
				}
				if(SW_GetState(&DEC)==1)
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	83 57       	subi	r24, 0x73	; 115
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <main+0x4aa>
    1fd0:	db c0       	rjmp	.+438    	; 0x2188 <main+0x660>
				{
					Number1--;
    1fd2:	de 01       	movw	r26, r28
    1fd4:	ad 57       	subi	r26, 0x7D	; 125
    1fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ed 57       	subi	r30, 0x7D	; 125
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	81 50       	subi	r24, 0x01	; 1
    1fe2:	8c 93       	st	X, r24
					if(Number1<0)
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ed 57       	subi	r30, 0x7D	; 125
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <main+0x4d2>
					{
						Number1=9;
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ed 57       	subi	r30, 0x7D	; 125
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	89 e0       	ldi	r24, 0x09	; 9
    1ff8:	80 83       	st	Z, r24
					}
					LCD_voidWriteNumber(Number1);
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ed 57       	subi	r30, 0x7D	; 125
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	99 27       	eor	r25, r25
    2004:	87 fd       	sbrc	r24, 7
    2006:	90 95       	com	r25
    2008:	a9 2f       	mov	r26, r25
    200a:	b9 2f       	mov	r27, r25
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    2014:	fe 01       	movw	r30, r28
    2016:	e3 59       	subi	r30, 0x93	; 147
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	aa ef       	ldi	r26, 0xFA	; 250
    2020:	b3 e4       	ldi	r27, 0x43	; 67
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	a2 83       	std	Z+2, r26	; 0x02
    2028:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202a:	8e 01       	movw	r16, r28
    202c:	07 59       	subi	r16, 0x97	; 151
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	fe 01       	movw	r30, r28
    2032:	e3 59       	subi	r30, 0x93	; 147
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	60 81       	ld	r22, Z
    2038:	71 81       	ldd	r23, Z+1	; 0x01
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	f8 01       	movw	r30, r16
    2050:	80 83       	st	Z, r24
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	a2 83       	std	Z+2, r26	; 0x02
    2056:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2058:	fe 01       	movw	r30, r28
    205a:	e7 59       	subi	r30, 0x97	; 151
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	44 f4       	brge	.+16     	; 0x2086 <main+0x55e>
		__ticks = 1;
    2076:	fe 01       	movw	r30, r28
    2078:	e9 59       	subi	r30, 0x99	; 153
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	80 83       	st	Z, r24
    2084:	64 c0       	rjmp	.+200    	; 0x214e <main+0x626>
	else if (__tmp > 65535)
    2086:	fe 01       	movw	r30, r28
    2088:	e7 59       	subi	r30, 0x97	; 151
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	4f e7       	ldi	r20, 0x7F	; 127
    209a:	57 e4       	ldi	r21, 0x47	; 71
    209c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20a0:	18 16       	cp	r1, r24
    20a2:	0c f0       	brlt	.+2      	; 0x20a6 <main+0x57e>
    20a4:	43 c0       	rjmp	.+134    	; 0x212c <main+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	fe 01       	movw	r30, r28
    20a8:	e3 59       	subi	r30, 0x93	; 147
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	60 81       	ld	r22, Z
    20ae:	71 81       	ldd	r23, Z+1	; 0x01
    20b0:	82 81       	ldd	r24, Z+2	; 0x02
    20b2:	93 81       	ldd	r25, Z+3	; 0x03
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	8e 01       	movw	r16, r28
    20c6:	09 59       	subi	r16, 0x99	; 153
    20c8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	f8 01       	movw	r30, r16
    20d8:	91 83       	std	Z+1, r25	; 0x01
    20da:	80 83       	st	Z, r24
    20dc:	1f c0       	rjmp	.+62     	; 0x211c <main+0x5f4>
    20de:	fe 01       	movw	r30, r28
    20e0:	eb 59       	subi	r30, 0x9B	; 155
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	88 ec       	ldi	r24, 0xC8	; 200
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	80 83       	st	Z, r24
    20ec:	fe 01       	movw	r30, r28
    20ee:	eb 59       	subi	r30, 0x9B	; 155
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <main+0x5ce>
    20fa:	fe 01       	movw	r30, r28
    20fc:	eb 59       	subi	r30, 0x9B	; 155
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	91 83       	std	Z+1, r25	; 0x01
    2102:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2104:	de 01       	movw	r26, r28
    2106:	a9 59       	subi	r26, 0x99	; 153
    2108:	bf 4f       	sbci	r27, 0xFF	; 255
    210a:	fe 01       	movw	r30, r28
    210c:	e9 59       	subi	r30, 0x99	; 153
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	11 96       	adiw	r26, 0x01	; 1
    2118:	9c 93       	st	X, r25
    211a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	fe 01       	movw	r30, r28
    211e:	e9 59       	subi	r30, 0x99	; 153
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	91 81       	ldd	r25, Z+1	; 0x01
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	d1 f6       	brne	.-76     	; 0x20de <main+0x5b6>
    212a:	27 c0       	rjmp	.+78     	; 0x217a <main+0x652>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	8e 01       	movw	r16, r28
    212e:	09 59       	subi	r16, 0x99	; 153
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	fe 01       	movw	r30, r28
    2134:	e7 59       	subi	r30, 0x97	; 151
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	f8 01       	movw	r30, r16
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	de 01       	movw	r26, r28
    2150:	ad 59       	subi	r26, 0x9D	; 157
    2152:	bf 4f       	sbci	r27, 0xFF	; 255
    2154:	fe 01       	movw	r30, r28
    2156:	e9 59       	subi	r30, 0x99	; 153
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	80 81       	ld	r24, Z
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	8d 93       	st	X+, r24
    2160:	9c 93       	st	X, r25
    2162:	fe 01       	movw	r30, r28
    2164:	ed 59       	subi	r30, 0x9D	; 157
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	91 81       	ldd	r25, Z+1	; 0x01
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <main+0x644>
    2170:	fe 01       	movw	r30, r28
    2172:	ed 59       	subi	r30, 0x9D	; 157
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
					_delay_ms(500);
					LCD_voidGoToXY(0,y);
    217a:	fe 01       	movw	r30, r28
    217c:	ee 57       	subi	r30, 0x7E	; 126
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	60 81       	ld	r22, Z
    2184:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
				}
				if(SW_GetState(&ENT)==1)
    2188:	ce 01       	movw	r24, r28
    218a:	80 57       	subi	r24, 0x70	; 112
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    2192:	81 30       	cpi	r24, 0x01	; 1
    2194:	09 f0       	breq	.+2      	; 0x2198 <main+0x670>
    2196:	d3 c0       	rjmp	.+422    	; 0x233e <main+0x816>
				{
					LCD_voidGoToXY(1,y);
    2198:	fe 01       	movw	r30, r28
    219a:	ee 57       	subi	r30, 0x7E	; 126
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	60 81       	ld	r22, Z
    21a2:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidSendString(" ");
    21a6:	88 e6       	ldi	r24, 0x68	; 104
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
					y+=2;
    21ae:	de 01       	movw	r26, r28
    21b0:	ae 57       	subi	r26, 0x7E	; 126
    21b2:	bf 4f       	sbci	r27, 0xFF	; 255
    21b4:	fe 01       	movw	r30, r28
    21b6:	ee 57       	subi	r30, 0x7E	; 126
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	80 81       	ld	r24, Z
    21bc:	8e 5f       	subi	r24, 0xFE	; 254
    21be:	8c 93       	st	X, r24
					LCD_voidGoToXY(1,y);
    21c0:	fe 01       	movw	r30, r28
    21c2:	ee 57       	subi	r30, 0x7E	; 126
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	60 81       	ld	r22, Z
    21ca:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidSendString("^");
    21ce:	86 e6       	ldi	r24, 0x66	; 102
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
    21d6:	fe 01       	movw	r30, r28
    21d8:	e1 5a       	subi	r30, 0xA1	; 161
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	aa ef       	ldi	r26, 0xFA	; 250
    21e2:	b3 e4       	ldi	r27, 0x43	; 67
    21e4:	80 83       	st	Z, r24
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	a2 83       	std	Z+2, r26	; 0x02
    21ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	8e 01       	movw	r16, r28
    21ee:	05 5a       	subi	r16, 0xA5	; 165
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e1 5a       	subi	r30, 0xA1	; 161
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	f8 01       	movw	r30, r16
    2212:	80 83       	st	Z, r24
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	a2 83       	std	Z+2, r26	; 0x02
    2218:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    221a:	fe 01       	movw	r30, r28
    221c:	e5 5a       	subi	r30, 0xA5	; 165
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	44 f4       	brge	.+16     	; 0x2248 <main+0x720>
		__ticks = 1;
    2238:	fe 01       	movw	r30, r28
    223a:	e7 5a       	subi	r30, 0xA7	; 167
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
    2246:	64 c0       	rjmp	.+200    	; 0x2310 <main+0x7e8>
	else if (__tmp > 65535)
    2248:	fe 01       	movw	r30, r28
    224a:	e5 5a       	subi	r30, 0xA5	; 165
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	60 81       	ld	r22, Z
    2250:	71 81       	ldd	r23, Z+1	; 0x01
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	4f e7       	ldi	r20, 0x7F	; 127
    225c:	57 e4       	ldi	r21, 0x47	; 71
    225e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2262:	18 16       	cp	r1, r24
    2264:	0c f0       	brlt	.+2      	; 0x2268 <main+0x740>
    2266:	43 c0       	rjmp	.+134    	; 0x22ee <main+0x7c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	fe 01       	movw	r30, r28
    226a:	e1 5a       	subi	r30, 0xA1	; 161
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	60 81       	ld	r22, Z
    2270:	71 81       	ldd	r23, Z+1	; 0x01
    2272:	82 81       	ldd	r24, Z+2	; 0x02
    2274:	93 81       	ldd	r25, Z+3	; 0x03
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8e 01       	movw	r16, r28
    2288:	07 5a       	subi	r16, 0xA7	; 167
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	f8 01       	movw	r30, r16
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	1f c0       	rjmp	.+62     	; 0x22de <main+0x7b6>
    22a0:	fe 01       	movw	r30, r28
    22a2:	e9 5a       	subi	r30, 0xA9	; 169
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	88 ec       	ldi	r24, 0xC8	; 200
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	fe 01       	movw	r30, r28
    22b0:	e9 5a       	subi	r30, 0xA9	; 169
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	91 81       	ldd	r25, Z+1	; 0x01
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <main+0x790>
    22bc:	fe 01       	movw	r30, r28
    22be:	e9 5a       	subi	r30, 0xA9	; 169
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	de 01       	movw	r26, r28
    22c8:	a7 5a       	subi	r26, 0xA7	; 167
    22ca:	bf 4f       	sbci	r27, 0xFF	; 255
    22cc:	fe 01       	movw	r30, r28
    22ce:	e7 5a       	subi	r30, 0xA7	; 167
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	11 96       	adiw	r26, 0x01	; 1
    22da:	9c 93       	st	X, r25
    22dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	fe 01       	movw	r30, r28
    22e0:	e7 5a       	subi	r30, 0xA7	; 167
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	d1 f6       	brne	.-76     	; 0x22a0 <main+0x778>
    22ec:	28 c0       	rjmp	.+80     	; 0x233e <main+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ee:	8e 01       	movw	r16, r28
    22f0:	07 5a       	subi	r16, 0xA7	; 167
    22f2:	1f 4f       	sbci	r17, 0xFF	; 255
    22f4:	fe 01       	movw	r30, r28
    22f6:	e5 5a       	subi	r30, 0xA5	; 165
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	f8 01       	movw	r30, r16
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
    2310:	de 01       	movw	r26, r28
    2312:	ab 5a       	subi	r26, 0xAB	; 171
    2314:	bf 4f       	sbci	r27, 0xFF	; 255
    2316:	fe 01       	movw	r30, r28
    2318:	e7 5a       	subi	r30, 0xA7	; 167
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 81       	ld	r24, Z
    231e:	91 81       	ldd	r25, Z+1	; 0x01
    2320:	11 96       	adiw	r26, 0x01	; 1
    2322:	9c 93       	st	X, r25
    2324:	8e 93       	st	-X, r24
    2326:	fe 01       	movw	r30, r28
    2328:	eb 5a       	subi	r30, 0xAB	; 171
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <main+0x808>
    2334:	fe 01       	movw	r30, r28
    2336:	eb 5a       	subi	r30, 0xAB	; 171
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	91 83       	std	Z+1, r25	; 0x01
    233c:	80 83       	st	Z, r24
					_delay_ms(500);
				}
				if(y==2)
    233e:	fe 01       	movw	r30, r28
    2340:	ee 57       	subi	r30, 0x7E	; 126
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	82 30       	cpi	r24, 0x02	; 2
    2348:	09 f4       	brne	.+2      	; 0x234c <main+0x824>
    234a:	52 cd       	rjmp	.-1372   	; 0x1df0 <main+0x2c8>
    234c:	58 cd       	rjmp	.-1360   	; 0x1dfe <main+0x2d6>
					break;
			}
		}
		else if(y==2)
    234e:	fe 01       	movw	r30, r28
    2350:	ee 57       	subi	r30, 0x7E	; 126
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 81       	ld	r24, Z
    2356:	82 30       	cpi	r24, 0x02	; 2
    2358:	09 f0       	breq	.+2      	; 0x235c <main+0x834>
    235a:	58 c2       	rjmp	.+1200   	; 0x280c <main+0xce4>
		{
			LCD_voidGoToXY(0,y);
    235c:	fe 01       	movw	r30, r28
    235e:	ee 57       	subi	r30, 0x7E	; 126
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	60 81       	ld	r22, Z
    2366:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
			LCD_voidSendData(op[Number2]);
    236a:	fe 01       	movw	r30, r28
    236c:	eb 57       	subi	r30, 0x7B	; 123
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	28 2f       	mov	r18, r24
    2374:	33 27       	eor	r19, r19
    2376:	27 fd       	sbrc	r18, 7
    2378:	30 95       	com	r19
    237a:	ce 01       	movw	r24, r28
    237c:	8a 57       	subi	r24, 0x7A	; 122
    237e:	9f 4f       	sbci	r25, 0xFF	; 255
    2380:	fc 01       	movw	r30, r24
    2382:	e2 0f       	add	r30, r18
    2384:	f3 1f       	adc	r31, r19
    2386:	80 81       	ld	r24, Z
    2388:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_voidSendData>
			while(1)
			{
				if(SW_GetState(&INC)==1)
    238c:	ce 01       	movw	r24, r28
    238e:	86 57       	subi	r24, 0x76	; 118
    2390:	9f 4f       	sbci	r25, 0xFF	; 255
    2392:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	09 f0       	breq	.+2      	; 0x239c <main+0x874>
    239a:	de c0       	rjmp	.+444    	; 0x2558 <main+0xa30>
				{
					LCD_voidGoToXY(0,y);
    239c:	fe 01       	movw	r30, r28
    239e:	ee 57       	subi	r30, 0x7E	; 126
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	60 81       	ld	r22, Z
    23a6:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					Number2++;
    23aa:	de 01       	movw	r26, r28
    23ac:	ab 57       	subi	r26, 0x7B	; 123
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	eb 57       	subi	r30, 0x7B	; 123
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	8c 93       	st	X, r24
					if(Number2==4)
    23bc:	fe 01       	movw	r30, r28
    23be:	eb 57       	subi	r30, 0x7B	; 123
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	84 30       	cpi	r24, 0x04	; 4
    23c6:	21 f4       	brne	.+8      	; 0x23d0 <main+0x8a8>
					{
						Number2=0;
    23c8:	fe 01       	movw	r30, r28
    23ca:	eb 57       	subi	r30, 0x7B	; 123
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	10 82       	st	Z, r1
					}
					LCD_voidSendData(op[Number2]);
    23d0:	fe 01       	movw	r30, r28
    23d2:	eb 57       	subi	r30, 0x7B	; 123
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	28 2f       	mov	r18, r24
    23da:	33 27       	eor	r19, r19
    23dc:	27 fd       	sbrc	r18, 7
    23de:	30 95       	com	r19
    23e0:	ce 01       	movw	r24, r28
    23e2:	8a 57       	subi	r24, 0x7A	; 122
    23e4:	9f 4f       	sbci	r25, 0xFF	; 255
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	80 81       	ld	r24, Z
    23ee:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_voidSendData>
    23f2:	fe 01       	movw	r30, r28
    23f4:	ef 5a       	subi	r30, 0xAF	; 175
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	aa ef       	ldi	r26, 0xFA	; 250
    23fe:	b3 e4       	ldi	r27, 0x43	; 67
    2400:	80 83       	st	Z, r24
    2402:	91 83       	std	Z+1, r25	; 0x01
    2404:	a2 83       	std	Z+2, r26	; 0x02
    2406:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	8e 01       	movw	r16, r28
    240a:	03 5b       	subi	r16, 0xB3	; 179
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	fe 01       	movw	r30, r28
    2410:	ef 5a       	subi	r30, 0xAF	; 175
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	60 81       	ld	r22, Z
    2416:	71 81       	ldd	r23, Z+1	; 0x01
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a ef       	ldi	r20, 0xFA	; 250
    2422:	54 e4       	ldi	r21, 0x44	; 68
    2424:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	f8 01       	movw	r30, r16
    242e:	80 83       	st	Z, r24
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	a2 83       	std	Z+2, r26	; 0x02
    2434:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2436:	fe 01       	movw	r30, r28
    2438:	e3 5b       	subi	r30, 0xB3	; 179
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e8       	ldi	r20, 0x80	; 128
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2450:	88 23       	and	r24, r24
    2452:	44 f4       	brge	.+16     	; 0x2464 <main+0x93c>
		__ticks = 1;
    2454:	fe 01       	movw	r30, r28
    2456:	e5 5b       	subi	r30, 0xB5	; 181
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	64 c0       	rjmp	.+200    	; 0x252c <main+0xa04>
	else if (__tmp > 65535)
    2464:	fe 01       	movw	r30, r28
    2466:	e3 5b       	subi	r30, 0xB3	; 179
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	60 81       	ld	r22, Z
    246c:	71 81       	ldd	r23, Z+1	; 0x01
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	0c f0       	brlt	.+2      	; 0x2484 <main+0x95c>
    2482:	43 c0       	rjmp	.+134    	; 0x250a <main+0x9e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	fe 01       	movw	r30, r28
    2486:	ef 5a       	subi	r30, 0xAF	; 175
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e2       	ldi	r20, 0x20	; 32
    2498:	51 e4       	ldi	r21, 0x41	; 65
    249a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8e 01       	movw	r16, r28
    24a4:	05 5b       	subi	r16, 0xB5	; 181
    24a6:	1f 4f       	sbci	r17, 0xFF	; 255
    24a8:	bc 01       	movw	r22, r24
    24aa:	cd 01       	movw	r24, r26
    24ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	f8 01       	movw	r30, r16
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	80 83       	st	Z, r24
    24ba:	1f c0       	rjmp	.+62     	; 0x24fa <main+0x9d2>
    24bc:	fe 01       	movw	r30, r28
    24be:	e7 5b       	subi	r30, 0xB7	; 183
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
    24ca:	fe 01       	movw	r30, r28
    24cc:	e7 5b       	subi	r30, 0xB7	; 183
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <main+0x9ac>
    24d8:	fe 01       	movw	r30, r28
    24da:	e7 5b       	subi	r30, 0xB7	; 183
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	de 01       	movw	r26, r28
    24e4:	a5 5b       	subi	r26, 0xB5	; 181
    24e6:	bf 4f       	sbci	r27, 0xFF	; 255
    24e8:	fe 01       	movw	r30, r28
    24ea:	e5 5b       	subi	r30, 0xB5	; 181
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	9c 93       	st	X, r25
    24f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	fe 01       	movw	r30, r28
    24fc:	e5 5b       	subi	r30, 0xB5	; 181
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	d1 f6       	brne	.-76     	; 0x24bc <main+0x994>
    2508:	27 c0       	rjmp	.+78     	; 0x2558 <main+0xa30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	8e 01       	movw	r16, r28
    250c:	05 5b       	subi	r16, 0xB5	; 181
    250e:	1f 4f       	sbci	r17, 0xFF	; 255
    2510:	fe 01       	movw	r30, r28
    2512:	e3 5b       	subi	r30, 0xB3	; 179
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	f8 01       	movw	r30, r16
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	80 83       	st	Z, r24
    252c:	de 01       	movw	r26, r28
    252e:	a9 5b       	subi	r26, 0xB9	; 185
    2530:	bf 4f       	sbci	r27, 0xFF	; 255
    2532:	fe 01       	movw	r30, r28
    2534:	e5 5b       	subi	r30, 0xB5	; 181
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	8d 93       	st	X+, r24
    253e:	9c 93       	st	X, r25
    2540:	fe 01       	movw	r30, r28
    2542:	e9 5b       	subi	r30, 0xB9	; 185
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	f1 f7       	brne	.-4      	; 0x254a <main+0xa22>
    254e:	fe 01       	movw	r30, r28
    2550:	e9 5b       	subi	r30, 0xB9	; 185
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
					_delay_ms(500);
				}
				if(SW_GetState(&DEC)==1)
    2558:	ce 01       	movw	r24, r28
    255a:	83 57       	subi	r24, 0x73	; 115
    255c:	9f 4f       	sbci	r25, 0xFF	; 255
    255e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	09 f0       	breq	.+2      	; 0x2568 <main+0xa40>
    2566:	b1 c0       	rjmp	.+354    	; 0x26ca <main+0xba2>
				{
					LCD_voidGoToXY(0,y);
    2568:	fe 01       	movw	r30, r28
    256a:	ee 57       	subi	r30, 0x7E	; 126
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	60 81       	ld	r22, Z
    2572:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					Number2--;
    2576:	de 01       	movw	r26, r28
    2578:	ab 57       	subi	r26, 0x7B	; 123
    257a:	bf 4f       	sbci	r27, 0xFF	; 255
    257c:	fe 01       	movw	r30, r28
    257e:	eb 57       	subi	r30, 0x7B	; 123
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	81 50       	subi	r24, 0x01	; 1
    2586:	8c 93       	st	X, r24
					if(Number2<0)
    2588:	fe 01       	movw	r30, r28
    258a:	eb 57       	subi	r30, 0x7B	; 123
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 81       	ld	r24, Z
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <main+0xa76>
					{
						Number2=3;
    2594:	fe 01       	movw	r30, r28
    2596:	eb 57       	subi	r30, 0x7B	; 123
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	83 e0       	ldi	r24, 0x03	; 3
    259c:	80 83       	st	Z, r24
					}
					LCD_voidSendData(op[Number2]);
    259e:	fe 01       	movw	r30, r28
    25a0:	eb 57       	subi	r30, 0x7B	; 123
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	28 2f       	mov	r18, r24
    25a8:	33 27       	eor	r19, r19
    25aa:	27 fd       	sbrc	r18, 7
    25ac:	30 95       	com	r19
    25ae:	ce 01       	movw	r24, r28
    25b0:	8a 57       	subi	r24, 0x7A	; 122
    25b2:	9f 4f       	sbci	r25, 0xFF	; 255
    25b4:	fc 01       	movw	r30, r24
    25b6:	e2 0f       	add	r30, r18
    25b8:	f3 1f       	adc	r31, r19
    25ba:	80 81       	ld	r24, Z
    25bc:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_voidSendData>
    25c0:	fe 01       	movw	r30, r28
    25c2:	ed 5b       	subi	r30, 0xBD	; 189
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	aa ef       	ldi	r26, 0xFA	; 250
    25cc:	b3 e4       	ldi	r27, 0x43	; 67
    25ce:	80 83       	st	Z, r24
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	a2 83       	std	Z+2, r26	; 0x02
    25d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	8e 01       	movw	r16, r28
    25d8:	01 5c       	subi	r16, 0xC1	; 193
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	fe 01       	movw	r30, r28
    25de:	ed 5b       	subi	r30, 0xBD	; 189
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a ef       	ldi	r20, 0xFA	; 250
    25f0:	54 e4       	ldi	r21, 0x44	; 68
    25f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	f8 01       	movw	r30, r16
    25fc:	80 83       	st	Z, r24
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	a2 83       	std	Z+2, r26	; 0x02
    2602:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2604:	fe 01       	movw	r30, r28
    2606:	ff 96       	adiw	r30, 0x3f	; 63
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <main+0xb02>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9e af       	std	Y+62, r25	; 0x3e
    2626:	8d af       	std	Y+61, r24	; 0x3d
    2628:	46 c0       	rjmp	.+140    	; 0x26b6 <main+0xb8e>
	else if (__tmp > 65535)
    262a:	fe 01       	movw	r30, r28
    262c:	ff 96       	adiw	r30, 0x3f	; 63
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	64 f5       	brge	.+88     	; 0x269e <main+0xb76>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	fe 01       	movw	r30, r28
    2648:	ed 5b       	subi	r30, 0xBD	; 189
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e2       	ldi	r20, 0x20	; 32
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	9e af       	std	Y+62, r25	; 0x3e
    2672:	8d af       	std	Y+61, r24	; 0x3d
    2674:	0f c0       	rjmp	.+30     	; 0x2694 <main+0xb6c>
    2676:	88 ec       	ldi	r24, 0xC8	; 200
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9c af       	std	Y+60, r25	; 0x3c
    267c:	8b af       	std	Y+59, r24	; 0x3b
    267e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2680:	9c ad       	ldd	r25, Y+60	; 0x3c
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <main+0xb5a>
    2686:	9c af       	std	Y+60, r25	; 0x3c
    2688:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268a:	8d ad       	ldd	r24, Y+61	; 0x3d
    268c:	9e ad       	ldd	r25, Y+62	; 0x3e
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	9e af       	std	Y+62, r25	; 0x3e
    2692:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2694:	8d ad       	ldd	r24, Y+61	; 0x3d
    2696:	9e ad       	ldd	r25, Y+62	; 0x3e
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	69 f7       	brne	.-38     	; 0x2676 <main+0xb4e>
    269c:	16 c0       	rjmp	.+44     	; 0x26ca <main+0xba2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269e:	fe 01       	movw	r30, r28
    26a0:	ff 96       	adiw	r30, 0x3f	; 63
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e af       	std	Y+62, r25	; 0x3e
    26b4:	8d af       	std	Y+61, r24	; 0x3d
    26b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    26b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    26ba:	9a af       	std	Y+58, r25	; 0x3a
    26bc:	89 af       	std	Y+57, r24	; 0x39
    26be:	89 ad       	ldd	r24, Y+57	; 0x39
    26c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <main+0xb9a>
    26c6:	9a af       	std	Y+58, r25	; 0x3a
    26c8:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(500);
				}
				if(SW_GetState(&ENT)==1)
    26ca:	ce 01       	movw	r24, r28
    26cc:	80 57       	subi	r24, 0x70	; 112
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	09 f0       	breq	.+2      	; 0x26da <main+0xbb2>
    26d8:	91 c0       	rjmp	.+290    	; 0x27fc <main+0xcd4>
				{
					LCD_voidGoToXY(1,y);
    26da:	fe 01       	movw	r30, r28
    26dc:	ee 57       	subi	r30, 0x7E	; 126
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	60 81       	ld	r22, Z
    26e4:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidSendString(" ");
    26e8:	88 e6       	ldi	r24, 0x68	; 104
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
					y+=2;
    26f0:	de 01       	movw	r26, r28
    26f2:	ae 57       	subi	r26, 0x7E	; 126
    26f4:	bf 4f       	sbci	r27, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	ee 57       	subi	r30, 0x7E	; 126
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	8e 5f       	subi	r24, 0xFE	; 254
    2700:	8c 93       	st	X, r24
					LCD_voidGoToXY(1,y);
    2702:	fe 01       	movw	r30, r28
    2704:	ee 57       	subi	r30, 0x7E	; 126
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	60 81       	ld	r22, Z
    270c:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidSendString("^");
    2710:	86 e6       	ldi	r24, 0x66	; 102
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	aa ef       	ldi	r26, 0xFA	; 250
    271e:	b3 e4       	ldi	r27, 0x43	; 67
    2720:	8d ab       	std	Y+53, r24	; 0x35
    2722:	9e ab       	std	Y+54, r25	; 0x36
    2724:	af ab       	std	Y+55, r26	; 0x37
    2726:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	6d a9       	ldd	r22, Y+53	; 0x35
    272a:	7e a9       	ldd	r23, Y+54	; 0x36
    272c:	8f a9       	ldd	r24, Y+55	; 0x37
    272e:	98 ad       	ldd	r25, Y+56	; 0x38
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a ef       	ldi	r20, 0xFA	; 250
    2736:	54 e4       	ldi	r21, 0x44	; 68
    2738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	89 ab       	std	Y+49, r24	; 0x31
    2742:	9a ab       	std	Y+50, r25	; 0x32
    2744:	ab ab       	std	Y+51, r26	; 0x33
    2746:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2748:	69 a9       	ldd	r22, Y+49	; 0x31
    274a:	7a a9       	ldd	r23, Y+50	; 0x32
    274c:	8b a9       	ldd	r24, Y+51	; 0x33
    274e:	9c a9       	ldd	r25, Y+52	; 0x34
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	2c f4       	brge	.+10     	; 0x276a <main+0xc42>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	98 ab       	std	Y+48, r25	; 0x30
    2766:	8f a7       	std	Y+47, r24	; 0x2f
    2768:	3f c0       	rjmp	.+126    	; 0x27e8 <main+0xcc0>
	else if (__tmp > 65535)
    276a:	69 a9       	ldd	r22, Y+49	; 0x31
    276c:	7a a9       	ldd	r23, Y+50	; 0x32
    276e:	8b a9       	ldd	r24, Y+51	; 0x33
    2770:	9c a9       	ldd	r25, Y+52	; 0x34
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	4c f5       	brge	.+82     	; 0x27d4 <main+0xcac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	6d a9       	ldd	r22, Y+53	; 0x35
    2784:	7e a9       	ldd	r23, Y+54	; 0x36
    2786:	8f a9       	ldd	r24, Y+55	; 0x37
    2788:	98 ad       	ldd	r25, Y+56	; 0x38
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e2       	ldi	r20, 0x20	; 32
    2790:	51 e4       	ldi	r21, 0x41	; 65
    2792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	98 ab       	std	Y+48, r25	; 0x30
    27a8:	8f a7       	std	Y+47, r24	; 0x2f
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <main+0xca2>
    27ac:	88 ec       	ldi	r24, 0xC8	; 200
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9e a7       	std	Y+46, r25	; 0x2e
    27b2:	8d a7       	std	Y+45, r24	; 0x2d
    27b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    27b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <main+0xc90>
    27bc:	9e a7       	std	Y+46, r25	; 0x2e
    27be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c2:	98 a9       	ldd	r25, Y+48	; 0x30
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	98 ab       	std	Y+48, r25	; 0x30
    27c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    27cc:	98 a9       	ldd	r25, Y+48	; 0x30
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	69 f7       	brne	.-38     	; 0x27ac <main+0xc84>
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <main+0xcd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	69 a9       	ldd	r22, Y+49	; 0x31
    27d6:	7a a9       	ldd	r23, Y+50	; 0x32
    27d8:	8b a9       	ldd	r24, Y+51	; 0x33
    27da:	9c a9       	ldd	r25, Y+52	; 0x34
    27dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	98 ab       	std	Y+48, r25	; 0x30
    27e6:	8f a7       	std	Y+47, r24	; 0x2f
    27e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ea:	98 a9       	ldd	r25, Y+48	; 0x30
    27ec:	9c a7       	std	Y+44, r25	; 0x2c
    27ee:	8b a7       	std	Y+43, r24	; 0x2b
    27f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <main+0xccc>
    27f8:	9c a7       	std	Y+44, r25	; 0x2c
    27fa:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
				}
				if(y==4)
    27fc:	fe 01       	movw	r30, r28
    27fe:	ee 57       	subi	r30, 0x7E	; 126
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	84 30       	cpi	r24, 0x04	; 4
    2806:	09 f4       	brne	.+2      	; 0x280a <main+0xce2>
    2808:	f3 ca       	rjmp	.-2586   	; 0x1df0 <main+0x2c8>
    280a:	c0 cd       	rjmp	.-1152   	; 0x238c <main+0x864>
					break;
			}
		}

		else if(y==4)
    280c:	fe 01       	movw	r30, r28
    280e:	ee 57       	subi	r30, 0x7E	; 126
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	84 30       	cpi	r24, 0x04	; 4
    2816:	09 f0       	breq	.+2      	; 0x281a <main+0xcf2>
    2818:	e4 c1       	rjmp	.+968    	; 0x2be2 <main+0x10ba>
		{
			while(1)
			{
				if(SW_GetState(&INC)==1)
    281a:	ce 01       	movw	r24, r28
    281c:	86 57       	subi	r24, 0x76	; 118
    281e:	9f 4f       	sbci	r25, 0xFF	; 255
    2820:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    2824:	81 30       	cpi	r24, 0x01	; 1
    2826:	09 f0       	breq	.+2      	; 0x282a <main+0xd02>
    2828:	99 c0       	rjmp	.+306    	; 0x295c <main+0xe34>
				{
					Number3++;
    282a:	de 01       	movw	r26, r28
    282c:	ac 57       	subi	r26, 0x7C	; 124
    282e:	bf 4f       	sbci	r27, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	ec 57       	subi	r30, 0x7C	; 124
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	8f 5f       	subi	r24, 0xFF	; 255
    283a:	8c 93       	st	X, r24
					LCD_voidGoToXY(0,y);
    283c:	fe 01       	movw	r30, r28
    283e:	ee 57       	subi	r30, 0x7E	; 126
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	60 81       	ld	r22, Z
    2846:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					if(Number3==10)
    284a:	fe 01       	movw	r30, r28
    284c:	ec 57       	subi	r30, 0x7C	; 124
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 81       	ld	r24, Z
    2852:	8a 30       	cpi	r24, 0x0A	; 10
    2854:	21 f4       	brne	.+8      	; 0x285e <main+0xd36>
					{
						Number3=0;
    2856:	fe 01       	movw	r30, r28
    2858:	ec 57       	subi	r30, 0x7C	; 124
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	10 82       	st	Z, r1
					}
					LCD_voidWriteNumber(Number3);
    285e:	fe 01       	movw	r30, r28
    2860:	ec 57       	subi	r30, 0x7C	; 124
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	99 27       	eor	r25, r25
    2868:	87 fd       	sbrc	r24, 7
    286a:	90 95       	com	r25
    286c:	a9 2f       	mov	r26, r25
    286e:	b9 2f       	mov	r27, r25
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	aa ef       	ldi	r26, 0xFA	; 250
    287e:	b3 e4       	ldi	r27, 0x43	; 67
    2880:	8f a3       	std	Y+39, r24	; 0x27
    2882:	98 a7       	std	Y+40, r25	; 0x28
    2884:	a9 a7       	std	Y+41, r26	; 0x29
    2886:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6f a1       	ldd	r22, Y+39	; 0x27
    288a:	78 a5       	ldd	r23, Y+40	; 0x28
    288c:	89 a5       	ldd	r24, Y+41	; 0x29
    288e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a ef       	ldi	r20, 0xFA	; 250
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8b a3       	std	Y+35, r24	; 0x23
    28a2:	9c a3       	std	Y+36, r25	; 0x24
    28a4:	ad a3       	std	Y+37, r26	; 0x25
    28a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28a8:	6b a1       	ldd	r22, Y+35	; 0x23
    28aa:	7c a1       	ldd	r23, Y+36	; 0x24
    28ac:	8d a1       	ldd	r24, Y+37	; 0x25
    28ae:	9e a1       	ldd	r25, Y+38	; 0x26
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <main+0xda2>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9a a3       	std	Y+34, r25	; 0x22
    28c6:	89 a3       	std	Y+33, r24	; 0x21
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <main+0xe20>
	else if (__tmp > 65535)
    28ca:	6b a1       	ldd	r22, Y+35	; 0x23
    28cc:	7c a1       	ldd	r23, Y+36	; 0x24
    28ce:	8d a1       	ldd	r24, Y+37	; 0x25
    28d0:	9e a1       	ldd	r25, Y+38	; 0x26
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <main+0xe0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6f a1       	ldd	r22, Y+39	; 0x27
    28e4:	78 a5       	ldd	r23, Y+40	; 0x28
    28e6:	89 a5       	ldd	r24, Y+41	; 0x29
    28e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9a a3       	std	Y+34, r25	; 0x22
    2908:	89 a3       	std	Y+33, r24	; 0x21
    290a:	0f c0       	rjmp	.+30     	; 0x292a <main+0xe02>
    290c:	88 ec       	ldi	r24, 0xC8	; 200
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	98 a3       	std	Y+32, r25	; 0x20
    2912:	8f 8f       	std	Y+31, r24	; 0x1f
    2914:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2916:	98 a1       	ldd	r25, Y+32	; 0x20
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <main+0xdf0>
    291c:	98 a3       	std	Y+32, r25	; 0x20
    291e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	89 a1       	ldd	r24, Y+33	; 0x21
    2922:	9a a1       	ldd	r25, Y+34	; 0x22
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9a a3       	std	Y+34, r25	; 0x22
    2928:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	89 a1       	ldd	r24, Y+33	; 0x21
    292c:	9a a1       	ldd	r25, Y+34	; 0x22
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <main+0xde4>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <main+0xe34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6b a1       	ldd	r22, Y+35	; 0x23
    2936:	7c a1       	ldd	r23, Y+36	; 0x24
    2938:	8d a1       	ldd	r24, Y+37	; 0x25
    293a:	9e a1       	ldd	r25, Y+38	; 0x26
    293c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9a a3       	std	Y+34, r25	; 0x22
    2946:	89 a3       	std	Y+33, r24	; 0x21
    2948:	89 a1       	ldd	r24, Y+33	; 0x21
    294a:	9a a1       	ldd	r25, Y+34	; 0x22
    294c:	9e 8f       	std	Y+30, r25	; 0x1e
    294e:	8d 8f       	std	Y+29, r24	; 0x1d
    2950:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2952:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <main+0xe2c>
    2958:	9e 8f       	std	Y+30, r25	; 0x1e
    295a:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
				}
				if(SW_GetState(&DEC)==1)
    295c:	ce 01       	movw	r24, r28
    295e:	83 57       	subi	r24, 0x73	; 115
    2960:	9f 4f       	sbci	r25, 0xFF	; 255
    2962:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	09 f0       	breq	.+2      	; 0x296c <main+0xe44>
    296a:	9a c0       	rjmp	.+308    	; 0x2aa0 <main+0xf78>
				{
					Number3--;
    296c:	de 01       	movw	r26, r28
    296e:	ac 57       	subi	r26, 0x7C	; 124
    2970:	bf 4f       	sbci	r27, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	ec 57       	subi	r30, 0x7C	; 124
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	81 50       	subi	r24, 0x01	; 1
    297c:	8c 93       	st	X, r24
					LCD_voidGoToXY(0,y);
    297e:	fe 01       	movw	r30, r28
    2980:	ee 57       	subi	r30, 0x7E	; 126
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	60 81       	ld	r22, Z
    2988:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					if(Number3<0)
    298c:	fe 01       	movw	r30, r28
    298e:	ec 57       	subi	r30, 0x7C	; 124
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	80 81       	ld	r24, Z
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <main+0xe7a>
					{
						Number3=9;
    2998:	fe 01       	movw	r30, r28
    299a:	ec 57       	subi	r30, 0x7C	; 124
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	89 e0       	ldi	r24, 0x09	; 9
    29a0:	80 83       	st	Z, r24
					}
					LCD_voidWriteNumber(Number3);
    29a2:	fe 01       	movw	r30, r28
    29a4:	ec 57       	subi	r30, 0x7C	; 124
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	80 81       	ld	r24, Z
    29aa:	99 27       	eor	r25, r25
    29ac:	87 fd       	sbrc	r24, 7
    29ae:	90 95       	com	r25
    29b0:	a9 2f       	mov	r26, r25
    29b2:	b9 2f       	mov	r27, r25
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	aa ef       	ldi	r26, 0xFA	; 250
    29c2:	b3 e4       	ldi	r27, 0x43	; 67
    29c4:	89 8f       	std	Y+25, r24	; 0x19
    29c6:	9a 8f       	std	Y+26, r25	; 0x1a
    29c8:	ab 8f       	std	Y+27, r26	; 0x1b
    29ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29cc:	69 8d       	ldd	r22, Y+25	; 0x19
    29ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	4a ef       	ldi	r20, 0xFA	; 250
    29da:	54 e4       	ldi	r21, 0x44	; 68
    29dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	8d 8b       	std	Y+21, r24	; 0x15
    29e6:	9e 8b       	std	Y+22, r25	; 0x16
    29e8:	af 8b       	std	Y+23, r26	; 0x17
    29ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ec:	6d 89       	ldd	r22, Y+21	; 0x15
    29ee:	7e 89       	ldd	r23, Y+22	; 0x16
    29f0:	8f 89       	ldd	r24, Y+23	; 0x17
    29f2:	98 8d       	ldd	r25, Y+24	; 0x18
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e8       	ldi	r20, 0x80	; 128
    29fa:	5f e3       	ldi	r21, 0x3F	; 63
    29fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a00:	88 23       	and	r24, r24
    2a02:	2c f4       	brge	.+10     	; 0x2a0e <main+0xee6>
		__ticks = 1;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9c 8b       	std	Y+20, r25	; 0x14
    2a0a:	8b 8b       	std	Y+19, r24	; 0x13
    2a0c:	3f c0       	rjmp	.+126    	; 0x2a8c <main+0xf64>
	else if (__tmp > 65535)
    2a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a10:	7e 89       	ldd	r23, Y+22	; 0x16
    2a12:	8f 89       	ldd	r24, Y+23	; 0x17
    2a14:	98 8d       	ldd	r25, Y+24	; 0x18
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	3f ef       	ldi	r19, 0xFF	; 255
    2a1a:	4f e7       	ldi	r20, 0x7F	; 127
    2a1c:	57 e4       	ldi	r21, 0x47	; 71
    2a1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a22:	18 16       	cp	r1, r24
    2a24:	4c f5       	brge	.+82     	; 0x2a78 <main+0xf50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a26:	69 8d       	ldd	r22, Y+25	; 0x19
    2a28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e2       	ldi	r20, 0x20	; 32
    2a34:	51 e4       	ldi	r21, 0x41	; 65
    2a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	9c 8b       	std	Y+20, r25	; 0x14
    2a4c:	8b 8b       	std	Y+19, r24	; 0x13
    2a4e:	0f c0       	rjmp	.+30     	; 0x2a6e <main+0xf46>
    2a50:	88 ec       	ldi	r24, 0xC8	; 200
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9a 8b       	std	Y+18, r25	; 0x12
    2a56:	89 8b       	std	Y+17, r24	; 0x11
    2a58:	89 89       	ldd	r24, Y+17	; 0x11
    2a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a5c:	01 97       	sbiw	r24, 0x01	; 1
    2a5e:	f1 f7       	brne	.-4      	; 0x2a5c <main+0xf34>
    2a60:	9a 8b       	std	Y+18, r25	; 0x12
    2a62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	9c 8b       	std	Y+20, r25	; 0x14
    2a6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a70:	9c 89       	ldd	r25, Y+20	; 0x14
    2a72:	00 97       	sbiw	r24, 0x00	; 0
    2a74:	69 f7       	brne	.-38     	; 0x2a50 <main+0xf28>
    2a76:	14 c0       	rjmp	.+40     	; 0x2aa0 <main+0xf78>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a78:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9c 8b       	std	Y+20, r25	; 0x14
    2a8a:	8b 8b       	std	Y+19, r24	; 0x13
    2a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a90:	98 8b       	std	Y+16, r25	; 0x10
    2a92:	8f 87       	std	Y+15, r24	; 0x0f
    2a94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a96:	98 89       	ldd	r25, Y+16	; 0x10
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <main+0xf70>
    2a9c:	98 8b       	std	Y+16, r25	; 0x10
    2a9e:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
				}
				if(SW_GetState(&ENT)==1)
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	80 57       	subi	r24, 0x70	; 112
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <SW_GetState>
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	09 f0       	breq	.+2      	; 0x2ab0 <main+0xf88>
    2aae:	91 c0       	rjmp	.+290    	; 0x2bd2 <main+0x10aa>
				{
					LCD_voidGoToXY(1,y);
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	ee 57       	subi	r30, 0x7E	; 126
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	60 81       	ld	r22, Z
    2aba:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidSendString(" ");
    2abe:	88 e6       	ldi	r24, 0x68	; 104
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
					y+=2;
    2ac6:	de 01       	movw	r26, r28
    2ac8:	ae 57       	subi	r26, 0x7E	; 126
    2aca:	bf 4f       	sbci	r27, 0xFF	; 255
    2acc:	fe 01       	movw	r30, r28
    2ace:	ee 57       	subi	r30, 0x7E	; 126
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 81       	ld	r24, Z
    2ad4:	8e 5f       	subi	r24, 0xFE	; 254
    2ad6:	8c 93       	st	X, r24
					LCD_voidGoToXY(0,y);
    2ad8:	fe 01       	movw	r30, r28
    2ada:	ee 57       	subi	r30, 0x7E	; 126
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	60 81       	ld	r22, Z
    2ae2:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidSendString("=");
    2ae6:	8a e6       	ldi	r24, 0x6A	; 106
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_voidSendString>
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	aa ef       	ldi	r26, 0xFA	; 250
    2af4:	b3 e4       	ldi	r27, 0x43	; 67
    2af6:	8b 87       	std	Y+11, r24	; 0x0b
    2af8:	9c 87       	std	Y+12, r25	; 0x0c
    2afa:	ad 87       	std	Y+13, r26	; 0x0d
    2afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a ef       	ldi	r20, 0xFA	; 250
    2b0c:	54 e4       	ldi	r21, 0x44	; 68
    2b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	8f 83       	std	Y+7, r24	; 0x07
    2b18:	98 87       	std	Y+8, r25	; 0x08
    2b1a:	a9 87       	std	Y+9, r26	; 0x09
    2b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	78 85       	ldd	r23, Y+8	; 0x08
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <main+0x1018>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	3f c0       	rjmp	.+126    	; 0x2bbe <main+0x1096>
	else if (__tmp > 65535)
    2b40:	6f 81       	ldd	r22, Y+7	; 0x07
    2b42:	78 85       	ldd	r23, Y+8	; 0x08
    2b44:	89 85       	ldd	r24, Y+9	; 0x09
    2b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	4c f5       	brge	.+82     	; 0x2baa <main+0x1082>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <main+0x1078>
    2b82:	88 ec       	ldi	r24, 0xC8	; 200
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9c 83       	std	Y+4, r25	; 0x04
    2b88:	8b 83       	std	Y+3, r24	; 0x03
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <main+0x1066>
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <main+0x105a>
    2ba8:	14 c0       	rjmp	.+40     	; 0x2bd2 <main+0x10aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <main+0x10a2>
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
				if(y==6)
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ee 57       	subi	r30, 0x7E	; 126
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	86 30       	cpi	r24, 0x06	; 6
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <main+0x10b8>
    2bde:	08 c9       	rjmp	.-3568   	; 0x1df0 <main+0x2c8>
    2be0:	1c ce       	rjmp	.-968    	; 0x281a <main+0xcf2>
					break;
			}
		}
		else if(y==6) {
    2be2:	fe 01       	movw	r30, r28
    2be4:	ee 57       	subi	r30, 0x7E	; 126
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	86 30       	cpi	r24, 0x06	; 6
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <main+0x10c8>
    2bee:	00 c9       	rjmp	.-3584   	; 0x1df0 <main+0x2c8>
			y=8;
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	ee 57       	subi	r30, 0x7E	; 126
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	88 e0       	ldi	r24, 0x08	; 8
    2bf8:	80 83       	st	Z, r24
			u8 Result;
			LCD_voidGoToXY(0,y);
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ee 57       	subi	r30, 0x7E	; 126
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	60 81       	ld	r22, Z
    2c04:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
			switch(Number2)
    2c08:	fe 01       	movw	r30, r28
    2c0a:	eb 57       	subi	r30, 0x7B	; 123
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	28 2f       	mov	r18, r24
    2c12:	33 27       	eor	r19, r19
    2c14:	27 fd       	sbrc	r18, 7
    2c16:	30 95       	com	r19
    2c18:	cd 56       	subi	r28, 0x6D	; 109
    2c1a:	df 4f       	sbci	r29, 0xFF	; 255
    2c1c:	39 83       	std	Y+1, r19	; 0x01
    2c1e:	28 83       	st	Y, r18
    2c20:	c3 59       	subi	r28, 0x93	; 147
    2c22:	d0 40       	sbci	r29, 0x00	; 0
    2c24:	cd 56       	subi	r28, 0x6D	; 109
    2c26:	df 4f       	sbci	r29, 0xFF	; 255
    2c28:	88 81       	ld	r24, Y
    2c2a:	99 81       	ldd	r25, Y+1	; 0x01
    2c2c:	c3 59       	subi	r28, 0x93	; 147
    2c2e:	d0 40       	sbci	r29, 0x00	; 0
    2c30:	81 30       	cpi	r24, 0x01	; 1
    2c32:	91 05       	cpc	r25, r1
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <main+0x1110>
    2c36:	4b c0       	rjmp	.+150    	; 0x2cce <main+0x11a6>
    2c38:	cd 56       	subi	r28, 0x6D	; 109
    2c3a:	df 4f       	sbci	r29, 0xFF	; 255
    2c3c:	e8 81       	ld	r30, Y
    2c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    2c40:	c3 59       	subi	r28, 0x93	; 147
    2c42:	d0 40       	sbci	r29, 0x00	; 0
    2c44:	e2 30       	cpi	r30, 0x02	; 2
    2c46:	f1 05       	cpc	r31, r1
    2c48:	54 f4       	brge	.+20     	; 0x2c5e <main+0x1136>
    2c4a:	cd 56       	subi	r28, 0x6D	; 109
    2c4c:	df 4f       	sbci	r29, 0xFF	; 255
    2c4e:	28 81       	ld	r18, Y
    2c50:	39 81       	ldd	r19, Y+1	; 0x01
    2c52:	c3 59       	subi	r28, 0x93	; 147
    2c54:	d0 40       	sbci	r29, 0x00	; 0
    2c56:	21 15       	cp	r18, r1
    2c58:	31 05       	cpc	r19, r1
    2c5a:	b1 f0       	breq	.+44     	; 0x2c88 <main+0x1160>
    2c5c:	c9 c8       	rjmp	.-3694   	; 0x1df0 <main+0x2c8>
    2c5e:	cd 56       	subi	r28, 0x6D	; 109
    2c60:	df 4f       	sbci	r29, 0xFF	; 255
    2c62:	88 81       	ld	r24, Y
    2c64:	99 81       	ldd	r25, Y+1	; 0x01
    2c66:	c3 59       	subi	r28, 0x93	; 147
    2c68:	d0 40       	sbci	r29, 0x00	; 0
    2c6a:	82 30       	cpi	r24, 0x02	; 2
    2c6c:	91 05       	cpc	r25, r1
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <main+0x114a>
    2c70:	85 c1       	rjmp	.+778    	; 0x2f7c <main+0x1454>
    2c72:	cd 56       	subi	r28, 0x6D	; 109
    2c74:	df 4f       	sbci	r29, 0xFF	; 255
    2c76:	e8 81       	ld	r30, Y
    2c78:	f9 81       	ldd	r31, Y+1	; 0x01
    2c7a:	c3 59       	subi	r28, 0x93	; 147
    2c7c:	d0 40       	sbci	r29, 0x00	; 0
    2c7e:	e3 30       	cpi	r30, 0x03	; 3
    2c80:	f1 05       	cpc	r31, r1
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <main+0x115e>
    2c84:	9a c1       	rjmp	.+820    	; 0x2fba <main+0x1492>
    2c86:	b4 c8       	rjmp	.-3736   	; 0x1df0 <main+0x2c8>
			{
			case 0:
				Result=Number1 * Number3;
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ed 57       	subi	r30, 0x7D	; 125
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	de 01       	movw	r26, r28
    2c90:	ac 57       	subi	r26, 0x7C	; 124
    2c92:	bf 4f       	sbci	r27, 0xFF	; 255
    2c94:	90 81       	ld	r25, Z
    2c96:	8c 91       	ld	r24, X
    2c98:	98 9f       	mul	r25, r24
    2c9a:	80 2d       	mov	r24, r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	ef 57       	subi	r30, 0x7F	; 127
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	80 83       	st	Z, r24
				LCD_voidGoToXY(0,y);
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ee 57       	subi	r30, 0x7E	; 126
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	60 81       	ld	r22, Z
    2cb0:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
				LCD_voidWriteNumber(Result);
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ef 57       	subi	r30, 0x7F	; 127
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a0 e0       	ldi	r26, 0x00	; 0
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    2ccc:	91 c8       	rjmp	.-3806   	; 0x1df0 <main+0x2c8>
				break;
			case 1:
				if((Number1%Number3) == 0)
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ed 57       	subi	r30, 0x7D	; 125
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 81       	ld	r24, Z
    2cd6:	48 2f       	mov	r20, r24
    2cd8:	55 27       	eor	r21, r21
    2cda:	47 fd       	sbrc	r20, 7
    2cdc:	50 95       	com	r21
    2cde:	fe 01       	movw	r30, r28
    2ce0:	ec 57       	subi	r30, 0x7C	; 124
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	33 27       	eor	r19, r19
    2cea:	27 fd       	sbrc	r18, 7
    2cec:	30 95       	com	r19
    2cee:	ca 01       	movw	r24, r20
    2cf0:	b9 01       	movw	r22, r18
    2cf2:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	69 f5       	brne	.+90     	; 0x2d54 <main+0x122c>
				{
					Result=Number1 / Number3;
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ed 57       	subi	r30, 0x7D	; 125
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	48 2f       	mov	r20, r24
    2d04:	55 27       	eor	r21, r21
    2d06:	47 fd       	sbrc	r20, 7
    2d08:	50 95       	com	r21
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ec 57       	subi	r30, 0x7C	; 124
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	28 2f       	mov	r18, r24
    2d14:	33 27       	eor	r19, r19
    2d16:	27 fd       	sbrc	r18, 7
    2d18:	30 95       	com	r19
    2d1a:	ca 01       	movw	r24, r20
    2d1c:	b9 01       	movw	r22, r18
    2d1e:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2d22:	cb 01       	movw	r24, r22
    2d24:	fe 01       	movw	r30, r28
    2d26:	ef 57       	subi	r30, 0x7F	; 127
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 83       	st	Z, r24
					LCD_voidGoToXY(0,y);
    2d2c:	fe 01       	movw	r30, r28
    2d2e:	ee 57       	subi	r30, 0x7E	; 126
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	60 81       	ld	r22, Z
    2d36:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidWriteNumber(Result);
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	ef 57       	subi	r30, 0x7F	; 127
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	a0 e0       	ldi	r26, 0x00	; 0
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	bc 01       	movw	r22, r24
    2d4c:	cd 01       	movw	r24, r26
    2d4e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    2d52:	4e c8       	rjmp	.-3940   	; 0x1df0 <main+0x2c8>
				}
				else
				{
					Result=Number1 / Number3;
    2d54:	fe 01       	movw	r30, r28
    2d56:	ed 57       	subi	r30, 0x7D	; 125
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	48 2f       	mov	r20, r24
    2d5e:	55 27       	eor	r21, r21
    2d60:	47 fd       	sbrc	r20, 7
    2d62:	50 95       	com	r21
    2d64:	fe 01       	movw	r30, r28
    2d66:	ec 57       	subi	r30, 0x7C	; 124
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	33 27       	eor	r19, r19
    2d70:	27 fd       	sbrc	r18, 7
    2d72:	30 95       	com	r19
    2d74:	ca 01       	movw	r24, r20
    2d76:	b9 01       	movw	r22, r18
    2d78:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ef 57       	subi	r30, 0x7F	; 127
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	80 83       	st	Z, r24
					LCD_voidGoToXY(0,y);
    2d86:	fe 01       	movw	r30, r28
    2d88:	ee 57       	subi	r30, 0x7E	; 126
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	60 81       	ld	r22, Z
    2d90:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidWriteNumber(Result);
    2d94:	fe 01       	movw	r30, r28
    2d96:	ef 57       	subi	r30, 0x7F	; 127
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 81       	ld	r24, Z
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 e0       	ldi	r26, 0x00	; 0
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	bc 01       	movw	r22, r24
    2da6:	cd 01       	movw	r24, r26
    2da8:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
					LCD_voidGoToXY(0,y+1);
    2dac:	fe 01       	movw	r30, r28
    2dae:	ee 57       	subi	r30, 0x7E	; 126
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	98 2f       	mov	r25, r24
    2db6:	9f 5f       	subi	r25, 0xFF	; 255
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	69 2f       	mov	r22, r25
    2dbc:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidSendData('.');
    2dc0:	8e e2       	ldi	r24, 0x2E	; 46
    2dc2:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_voidSendData>
					u8 mod=(Number1%Number3)*10;
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	ed 57       	subi	r30, 0x7D	; 125
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 81       	ld	r24, Z
    2dce:	48 2f       	mov	r20, r24
    2dd0:	55 27       	eor	r21, r21
    2dd2:	47 fd       	sbrc	r20, 7
    2dd4:	50 95       	com	r21
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ec 57       	subi	r30, 0x7C	; 124
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 81       	ld	r24, Z
    2dde:	28 2f       	mov	r18, r24
    2de0:	33 27       	eor	r19, r19
    2de2:	27 fd       	sbrc	r18, 7
    2de4:	30 95       	com	r19
    2de6:	ca 01       	movw	r24, r20
    2de8:	b9 01       	movw	r22, r18
    2dea:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2dee:	9c 01       	movw	r18, r24
    2df0:	22 0f       	add	r18, r18
    2df2:	33 1f       	adc	r19, r19
    2df4:	c9 01       	movw	r24, r18
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	82 0f       	add	r24, r18
    2e00:	93 1f       	adc	r25, r19
    2e02:	fe 01       	movw	r30, r28
    2e04:	e0 58       	subi	r30, 0x80	; 128
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 83       	st	Z, r24
					if((mod%Number3) ==0 )
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e0 58       	subi	r30, 0x80	; 128
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	48 2f       	mov	r20, r24
    2e14:	50 e0       	ldi	r21, 0x00	; 0
    2e16:	fe 01       	movw	r30, r28
    2e18:	ec 57       	subi	r30, 0x7C	; 124
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	80 81       	ld	r24, Z
    2e1e:	28 2f       	mov	r18, r24
    2e20:	33 27       	eor	r19, r19
    2e22:	27 fd       	sbrc	r18, 7
    2e24:	30 95       	com	r19
    2e26:	ca 01       	movw	r24, r20
    2e28:	b9 01       	movw	r22, r18
    2e2a:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	79 f5       	brne	.+94     	; 0x2e90 <main+0x1368>
					{
						LCD_voidGoToXY(0,y+2);
    2e32:	fe 01       	movw	r30, r28
    2e34:	ee 57       	subi	r30, 0x7E	; 126
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	80 81       	ld	r24, Z
    2e3a:	98 2f       	mov	r25, r24
    2e3c:	9e 5f       	subi	r25, 0xFE	; 254
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	69 2f       	mov	r22, r25
    2e42:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
						Result=mod/Number3 ;
    2e46:	fe 01       	movw	r30, r28
    2e48:	e0 58       	subi	r30, 0x80	; 128
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	80 81       	ld	r24, Z
    2e4e:	48 2f       	mov	r20, r24
    2e50:	50 e0       	ldi	r21, 0x00	; 0
    2e52:	fe 01       	movw	r30, r28
    2e54:	ec 57       	subi	r30, 0x7C	; 124
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 81       	ld	r24, Z
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	33 27       	eor	r19, r19
    2e5e:	27 fd       	sbrc	r18, 7
    2e60:	30 95       	com	r19
    2e62:	ca 01       	movw	r24, r20
    2e64:	b9 01       	movw	r22, r18
    2e66:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	ef 57       	subi	r30, 0x7F	; 127
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	80 83       	st	Z, r24
						LCD_voidWriteNumber(Result);
    2e74:	fe 01       	movw	r30, r28
    2e76:	ef 57       	subi	r30, 0x7F	; 127
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	80 81       	ld	r24, Z
    2e7c:	88 2f       	mov	r24, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	a0 e0       	ldi	r26, 0x00	; 0
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    2e8c:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <main+0x2c8>
					}
					else
					{
						Result=mod / Number3;
    2e90:	fe 01       	movw	r30, r28
    2e92:	e0 58       	subi	r30, 0x80	; 128
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	48 2f       	mov	r20, r24
    2e9a:	50 e0       	ldi	r21, 0x00	; 0
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	ec 57       	subi	r30, 0x7C	; 124
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	80 81       	ld	r24, Z
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	33 27       	eor	r19, r19
    2ea8:	27 fd       	sbrc	r18, 7
    2eaa:	30 95       	com	r19
    2eac:	ca 01       	movw	r24, r20
    2eae:	b9 01       	movw	r22, r18
    2eb0:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ef 57       	subi	r30, 0x7F	; 127
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	80 83       	st	Z, r24
						LCD_voidGoToXY(0,y+2);
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ee 57       	subi	r30, 0x7E	; 126
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	98 2f       	mov	r25, r24
    2ec8:	9e 5f       	subi	r25, 0xFE	; 254
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	69 2f       	mov	r22, r25
    2ece:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
						LCD_voidWriteNumber(Result);
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ef 57       	subi	r30, 0x7F	; 127
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	80 81       	ld	r24, Z
    2eda:	88 2f       	mov	r24, r24
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a0 e0       	ldi	r26, 0x00	; 0
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
						u8 mod2 =(mod%Number3)*10;
    2eea:	fe 01       	movw	r30, r28
    2eec:	e0 58       	subi	r30, 0x80	; 128
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 81       	ld	r24, Z
    2ef2:	48 2f       	mov	r20, r24
    2ef4:	50 e0       	ldi	r21, 0x00	; 0
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	ec 57       	subi	r30, 0x7C	; 124
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	28 2f       	mov	r18, r24
    2f00:	33 27       	eor	r19, r19
    2f02:	27 fd       	sbrc	r18, 7
    2f04:	30 95       	com	r19
    2f06:	ca 01       	movw	r24, r20
    2f08:	b9 01       	movw	r22, r18
    2f0a:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2f0e:	9c 01       	movw	r18, r24
    2f10:	22 0f       	add	r18, r18
    2f12:	33 1f       	adc	r19, r19
    2f14:	c9 01       	movw	r24, r18
    2f16:	88 0f       	add	r24, r24
    2f18:	99 1f       	adc	r25, r25
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	82 0f       	add	r24, r18
    2f20:	93 1f       	adc	r25, r19
    2f22:	fe 01       	movw	r30, r28
    2f24:	e1 58       	subi	r30, 0x81	; 129
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	80 83       	st	Z, r24
						LCD_voidGoToXY(0,11);
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	6b e0       	ldi	r22, 0x0B	; 11
    2f2e:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
						Result=mod2/Number3 ;
    2f32:	fe 01       	movw	r30, r28
    2f34:	e1 58       	subi	r30, 0x81	; 129
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	48 2f       	mov	r20, r24
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ec 57       	subi	r30, 0x7C	; 124
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	28 2f       	mov	r18, r24
    2f48:	33 27       	eor	r19, r19
    2f4a:	27 fd       	sbrc	r18, 7
    2f4c:	30 95       	com	r19
    2f4e:	ca 01       	movw	r24, r20
    2f50:	b9 01       	movw	r22, r18
    2f52:	0e 94 30 18 	call	0x3060	; 0x3060 <__divmodhi4>
    2f56:	cb 01       	movw	r24, r22
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ef 57       	subi	r30, 0x7F	; 127
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	80 83       	st	Z, r24
						LCD_voidWriteNumber(Result);
    2f60:	fe 01       	movw	r30, r28
    2f62:	ef 57       	subi	r30, 0x7F	; 127
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 81       	ld	r24, Z
    2f68:	88 2f       	mov	r24, r24
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	a0 e0       	ldi	r26, 0x00	; 0
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	bc 01       	movw	r22, r24
    2f72:	cd 01       	movw	r24, r26
    2f74:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    2f78:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <main+0x2c8>
					}
				}
				break;
			case 2:
				Result=Number1 + Number3;
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	ed 57       	subi	r30, 0x7D	; 125
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	90 81       	ld	r25, Z
    2f84:	fe 01       	movw	r30, r28
    2f86:	ec 57       	subi	r30, 0x7C	; 124
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	ef 57       	subi	r30, 0x7F	; 127
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	89 0f       	add	r24, r25
    2f94:	80 83       	st	Z, r24
				LCD_voidGoToXY(0,8);
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	68 e0       	ldi	r22, 0x08	; 8
    2f9a:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
				LCD_voidWriteNumber(Result);
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	ef 57       	subi	r30, 0x7F	; 127
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 81       	ld	r24, Z
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	a0 e0       	ldi	r26, 0x00	; 0
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    2fb6:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <main+0x2c8>
				break;
			case 3:
				if(Number3>Number1)
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ec 57       	subi	r30, 0x7C	; 124
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	de 01       	movw	r26, r28
    2fc2:	ad 57       	subi	r26, 0x7D	; 125
    2fc4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc6:	90 81       	ld	r25, Z
    2fc8:	8c 91       	ld	r24, X
    2fca:	89 17       	cp	r24, r25
    2fcc:	44 f5       	brge	.+80     	; 0x301e <main+0x14f6>
				{
					LCD_voidGoToXY(0,8);
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	68 e0       	ldi	r22, 0x08	; 8
    2fd2:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					LCD_voidSendData('-');
    2fd6:	8d e2       	ldi	r24, 0x2D	; 45
    2fd8:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_voidSendData>
					LCD_voidGoToXY(0,9);
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	69 e0       	ldi	r22, 0x09	; 9
    2fe0:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					Result=Number3 - Number1;
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ec 57       	subi	r30, 0x7C	; 124
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	90 81       	ld	r25, Z
    2fec:	fe 01       	movw	r30, r28
    2fee:	ed 57       	subi	r30, 0x7D	; 125
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	80 81       	ld	r24, Z
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	ef 57       	subi	r30, 0x7F	; 127
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	29 2f       	mov	r18, r25
    2ffc:	28 1b       	sub	r18, r24
    2ffe:	82 2f       	mov	r24, r18
    3000:	80 83       	st	Z, r24
					LCD_voidWriteNumber(Result);
    3002:	fe 01       	movw	r30, r28
    3004:	ef 57       	subi	r30, 0x7F	; 127
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	80 81       	ld	r24, Z
    300a:	88 2f       	mov	r24, r24
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	a0 e0       	ldi	r26, 0x00	; 0
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	bc 01       	movw	r22, r24
    3014:	cd 01       	movw	r24, r26
    3016:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    301a:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <main+0x2c8>
				}
				else
				{
					LCD_voidGoToXY(0,8);
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	68 e0       	ldi	r22, 0x08	; 8
    3022:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_voidGoToXY>
					Result=Number1 - Number3;
    3026:	fe 01       	movw	r30, r28
    3028:	ed 57       	subi	r30, 0x7D	; 125
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	90 81       	ld	r25, Z
    302e:	fe 01       	movw	r30, r28
    3030:	ec 57       	subi	r30, 0x7C	; 124
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 81       	ld	r24, Z
    3036:	fe 01       	movw	r30, r28
    3038:	ef 57       	subi	r30, 0x7F	; 127
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	39 2f       	mov	r19, r25
    303e:	38 1b       	sub	r19, r24
    3040:	83 2f       	mov	r24, r19
    3042:	80 83       	st	Z, r24
					LCD_voidWriteNumber(Result);
    3044:	fe 01       	movw	r30, r28
    3046:	ef 57       	subi	r30, 0x7F	; 127
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 81       	ld	r24, Z
    304c:	88 2f       	mov	r24, r24
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	a0 e0       	ldi	r26, 0x00	; 0
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	0e 94 6e 09 	call	0x12dc	; 0x12dc <LCD_voidWriteNumber>
    305c:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <main+0x2c8>

00003060 <__divmodhi4>:
    3060:	97 fb       	bst	r25, 7
    3062:	09 2e       	mov	r0, r25
    3064:	07 26       	eor	r0, r23
    3066:	0a d0       	rcall	.+20     	; 0x307c <__divmodhi4_neg1>
    3068:	77 fd       	sbrc	r23, 7
    306a:	04 d0       	rcall	.+8      	; 0x3074 <__divmodhi4_neg2>
    306c:	2e d0       	rcall	.+92     	; 0x30ca <__udivmodhi4>
    306e:	06 d0       	rcall	.+12     	; 0x307c <__divmodhi4_neg1>
    3070:	00 20       	and	r0, r0
    3072:	1a f4       	brpl	.+6      	; 0x307a <__divmodhi4_exit>

00003074 <__divmodhi4_neg2>:
    3074:	70 95       	com	r23
    3076:	61 95       	neg	r22
    3078:	7f 4f       	sbci	r23, 0xFF	; 255

0000307a <__divmodhi4_exit>:
    307a:	08 95       	ret

0000307c <__divmodhi4_neg1>:
    307c:	f6 f7       	brtc	.-4      	; 0x307a <__divmodhi4_exit>
    307e:	90 95       	com	r25
    3080:	81 95       	neg	r24
    3082:	9f 4f       	sbci	r25, 0xFF	; 255
    3084:	08 95       	ret

00003086 <__udivmodsi4>:
    3086:	a1 e2       	ldi	r26, 0x21	; 33
    3088:	1a 2e       	mov	r1, r26
    308a:	aa 1b       	sub	r26, r26
    308c:	bb 1b       	sub	r27, r27
    308e:	fd 01       	movw	r30, r26
    3090:	0d c0       	rjmp	.+26     	; 0x30ac <__udivmodsi4_ep>

00003092 <__udivmodsi4_loop>:
    3092:	aa 1f       	adc	r26, r26
    3094:	bb 1f       	adc	r27, r27
    3096:	ee 1f       	adc	r30, r30
    3098:	ff 1f       	adc	r31, r31
    309a:	a2 17       	cp	r26, r18
    309c:	b3 07       	cpc	r27, r19
    309e:	e4 07       	cpc	r30, r20
    30a0:	f5 07       	cpc	r31, r21
    30a2:	20 f0       	brcs	.+8      	; 0x30ac <__udivmodsi4_ep>
    30a4:	a2 1b       	sub	r26, r18
    30a6:	b3 0b       	sbc	r27, r19
    30a8:	e4 0b       	sbc	r30, r20
    30aa:	f5 0b       	sbc	r31, r21

000030ac <__udivmodsi4_ep>:
    30ac:	66 1f       	adc	r22, r22
    30ae:	77 1f       	adc	r23, r23
    30b0:	88 1f       	adc	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	1a 94       	dec	r1
    30b6:	69 f7       	brne	.-38     	; 0x3092 <__udivmodsi4_loop>
    30b8:	60 95       	com	r22
    30ba:	70 95       	com	r23
    30bc:	80 95       	com	r24
    30be:	90 95       	com	r25
    30c0:	9b 01       	movw	r18, r22
    30c2:	ac 01       	movw	r20, r24
    30c4:	bd 01       	movw	r22, r26
    30c6:	cf 01       	movw	r24, r30
    30c8:	08 95       	ret

000030ca <__udivmodhi4>:
    30ca:	aa 1b       	sub	r26, r26
    30cc:	bb 1b       	sub	r27, r27
    30ce:	51 e1       	ldi	r21, 0x11	; 17
    30d0:	07 c0       	rjmp	.+14     	; 0x30e0 <__udivmodhi4_ep>

000030d2 <__udivmodhi4_loop>:
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	a6 17       	cp	r26, r22
    30d8:	b7 07       	cpc	r27, r23
    30da:	10 f0       	brcs	.+4      	; 0x30e0 <__udivmodhi4_ep>
    30dc:	a6 1b       	sub	r26, r22
    30de:	b7 0b       	sbc	r27, r23

000030e0 <__udivmodhi4_ep>:
    30e0:	88 1f       	adc	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	5a 95       	dec	r21
    30e6:	a9 f7       	brne	.-22     	; 0x30d2 <__udivmodhi4_loop>
    30e8:	80 95       	com	r24
    30ea:	90 95       	com	r25
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	08 95       	ret

000030f2 <__prologue_saves__>:
    30f2:	2f 92       	push	r2
    30f4:	3f 92       	push	r3
    30f6:	4f 92       	push	r4
    30f8:	5f 92       	push	r5
    30fa:	6f 92       	push	r6
    30fc:	7f 92       	push	r7
    30fe:	8f 92       	push	r8
    3100:	9f 92       	push	r9
    3102:	af 92       	push	r10
    3104:	bf 92       	push	r11
    3106:	cf 92       	push	r12
    3108:	df 92       	push	r13
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	ca 1b       	sub	r28, r26
    311c:	db 0b       	sbc	r29, r27
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	09 94       	ijmp

0000312a <__epilogue_restores__>:
    312a:	2a 88       	ldd	r2, Y+18	; 0x12
    312c:	39 88       	ldd	r3, Y+17	; 0x11
    312e:	48 88       	ldd	r4, Y+16	; 0x10
    3130:	5f 84       	ldd	r5, Y+15	; 0x0f
    3132:	6e 84       	ldd	r6, Y+14	; 0x0e
    3134:	7d 84       	ldd	r7, Y+13	; 0x0d
    3136:	8c 84       	ldd	r8, Y+12	; 0x0c
    3138:	9b 84       	ldd	r9, Y+11	; 0x0b
    313a:	aa 84       	ldd	r10, Y+10	; 0x0a
    313c:	b9 84       	ldd	r11, Y+9	; 0x09
    313e:	c8 84       	ldd	r12, Y+8	; 0x08
    3140:	df 80       	ldd	r13, Y+7	; 0x07
    3142:	ee 80       	ldd	r14, Y+6	; 0x06
    3144:	fd 80       	ldd	r15, Y+5	; 0x05
    3146:	0c 81       	ldd	r16, Y+4	; 0x04
    3148:	1b 81       	ldd	r17, Y+3	; 0x03
    314a:	aa 81       	ldd	r26, Y+2	; 0x02
    314c:	b9 81       	ldd	r27, Y+1	; 0x01
    314e:	ce 0f       	add	r28, r30
    3150:	d1 1d       	adc	r29, r1
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	ed 01       	movw	r28, r26
    315e:	08 95       	ret

00003160 <_exit>:
    3160:	f8 94       	cli

00003162 <__stop_program>:
    3162:	ff cf       	rjmp	.-2      	; 0x3162 <__stop_program>
