
TWO_MOTORS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  00002f3e  00002fd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000dc  008000dc  0000304e  2**0
                  ALLOC
  3 .stab         00002ce8  00000000  00000000  00003050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013ed  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007125  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007265  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000073d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000901e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000acb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b873  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <main>
      8a:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e9       	ldi	r26, 0x99	; 153
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e9       	ldi	r24, 0x99	; 153
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 72 17 	jmp	0x2ee4	; 0x2ee4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SW_Def>:
/*********************************************************************************/
/*********************************************************************************/
#include "SW_interface.h"

void SW_Def(SW_t *SW)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <SW_Def+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <SW_Def+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
	switch(SW ->PUL_t)
     b56:	e9 81       	ldd	r30, Y+1	; 0x01
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	82 81       	ldd	r24, Z+2	; 0x02
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3c 83       	std	Y+4, r19	; 0x04
     b62:	2b 83       	std	Y+3, r18	; 0x03
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	d1 f0       	breq	.+52     	; 0xba0 <SW_Def+0x5a>
     b6c:	2b 81       	ldd	r18, Y+3	; 0x03
     b6e:	3c 81       	ldd	r19, Y+4	; 0x04
     b70:	21 30       	cpi	r18, 0x01	; 1
     b72:	31 05       	cpc	r19, r1
     b74:	f9 f4       	brne	.+62     	; 0xbb4 <SW_Def+0x6e>
	{
	case PULL_UP :
		DIO_u8SetPinDirection(SW->PORT,SW->PIN,INPUT);
     b76:	e9 81       	ldd	r30, Y+1	; 0x01
     b78:	fa 81       	ldd	r31, Y+2	; 0x02
     b7a:	80 81       	ld	r24, Z
     b7c:	e9 81       	ldd	r30, Y+1	; 0x01
     b7e:	fa 81       	ldd	r31, Y+2	; 0x02
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	69 2f       	mov	r22, r25
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(SW->PORT,SW->PIN,HIGH);
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	80 81       	ld	r24, Z
     b90:	e9 81       	ldd	r30, Y+1	; 0x01
     b92:	fa 81       	ldd	r31, Y+2	; 0x02
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	69 2f       	mov	r22, r25
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
     b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <SW_Def+0x6e>
		break;
	case PULL_DOWN :
		DIO_u8SetPinDirection(SW->PORT,SW->PIN,INPUT);
     ba0:	e9 81       	ldd	r30, Y+1	; 0x01
     ba2:	fa 81       	ldd	r31, Y+2	; 0x02
     ba4:	80 81       	ld	r24, Z
     ba6:	e9 81       	ldd	r30, Y+1	; 0x01
     ba8:	fa 81       	ldd	r31, Y+2	; 0x02
     baa:	91 81       	ldd	r25, Z+1	; 0x01
     bac:	69 2f       	mov	r22, r25
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
		break;
	default:
		break;
	}
}
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <SW_GetState>:
u8 SW_GetState(SW_t* SW)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	27 97       	sbiw	r28, 0x07	; 7
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	9b 83       	std	Y+3, r25	; 0x03
     bd8:	8a 83       	std	Y+2, r24	; 0x02
	u8 value;
	switch (SW ->PUL_t)
     bda:	ea 81       	ldd	r30, Y+2	; 0x02
     bdc:	fb 81       	ldd	r31, Y+3	; 0x03
     bde:	82 81       	ldd	r24, Z+2	; 0x02
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	3e 83       	std	Y+6, r19	; 0x06
     be6:	2d 83       	std	Y+5, r18	; 0x05
     be8:	8d 81       	ldd	r24, Y+5	; 0x05
     bea:	9e 81       	ldd	r25, Y+6	; 0x06
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a9 f0       	breq	.+42     	; 0xc1a <SW_GetState+0x58>
     bf0:	2d 81       	ldd	r18, Y+5	; 0x05
     bf2:	3e 81       	ldd	r19, Y+6	; 0x06
     bf4:	21 30       	cpi	r18, 0x01	; 1
     bf6:	31 05       	cpc	r19, r1
     bf8:	01 f5       	brne	.+64     	; 0xc3a <SW_GetState+0x78>
	{
	case PULL_UP :
		DIO_u8GetPinValue(SW->PORT,SW->PIN,&value);
     bfa:	ea 81       	ldd	r30, Y+2	; 0x02
     bfc:	fb 81       	ldd	r31, Y+3	; 0x03
     bfe:	80 81       	ld	r24, Z
     c00:	ea 81       	ldd	r30, Y+2	; 0x02
     c02:	fb 81       	ldd	r31, Y+3	; 0x03
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	69 2f       	mov	r22, r25
     c08:	9e 01       	movw	r18, r28
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	a9 01       	movw	r20, r18
     c10:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
        return(value);
     c14:	39 81       	ldd	r19, Y+1	; 0x01
     c16:	3c 83       	std	Y+4, r19	; 0x04
     c18:	11 c0       	rjmp	.+34     	; 0xc3c <SW_GetState+0x7a>
		break;

	case PULL_DOWN :
		DIO_u8GetPinValue(SW->PORT,SW->PIN,&value);
     c1a:	ea 81       	ldd	r30, Y+2	; 0x02
     c1c:	fb 81       	ldd	r31, Y+3	; 0x03
     c1e:	80 81       	ld	r24, Z
     c20:	ea 81       	ldd	r30, Y+2	; 0x02
     c22:	fb 81       	ldd	r31, Y+3	; 0x03
     c24:	91 81       	ldd	r25, Z+1	; 0x01
     c26:	69 2f       	mov	r22, r25
     c28:	9e 01       	movw	r18, r28
     c2a:	2f 5f       	subi	r18, 0xFF	; 255
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	a9 01       	movw	r20, r18
     c30:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
		return(value);
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	8c 83       	std	Y+4, r24	; 0x04
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <SW_GetState+0x7a>
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <SW_GetState+0x7e>
		break;
	default :
		break;
	}
}
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	9f 83       	std	Y+7, r25	; 0x07
     c40:	8f 81       	ldd	r24, Y+7	; 0x07
     c42:	27 96       	adiw	r28, 0x07	; 7
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <SSD_setNumber>:
#include "SS_interface.h"
u8 SSD_setNumber(u8 Number , SSD_t* SSD)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <SSD_setNumber+0x6>
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <SSD_setNumber+0x8>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <SSD_setNumber+0xa>
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	7b 83       	std	Y+3, r23	; 0x03
     c66:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortDirection(SSD->PORT,0xff);
     c68:	ea 81       	ldd	r30, Y+2	; 0x02
     c6a:	fb 81       	ldd	r31, Y+3	; 0x03
     c6c:	81 81       	ldd	r24, Z+1	; 0x01
     c6e:	6f ef       	ldi	r22, 0xFF	; 255
     c70:	0e 94 05 0c 	call	0x180a	; 0x180a <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(SSD->PORT,SSD->COM_type ? segmentA[Number] : ~segmentA[Number]);
     c74:	ea 81       	ldd	r30, Y+2	; 0x02
     c76:	fb 81       	ldd	r31, Y+3	; 0x03
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	8d 83       	std	Y+5, r24	; 0x05
     c7c:	ea 81       	ldd	r30, Y+2	; 0x02
     c7e:	fb 81       	ldd	r31, Y+3	; 0x03
     c80:	80 81       	ld	r24, Z
     c82:	88 23       	and	r24, r24
     c84:	49 f0       	breq	.+18     	; 0xc98 <SSD_setNumber+0x44>
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	fc 01       	movw	r30, r24
     c8e:	ef 55       	subi	r30, 0x5F	; 95
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	90 81       	ld	r25, Z
     c94:	9c 83       	std	Y+4, r25	; 0x04
     c96:	0a c0       	rjmp	.+20     	; 0xcac <SSD_setNumber+0x58>
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	fc 01       	movw	r30, r24
     ca0:	ef 55       	subi	r30, 0x5F	; 95
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
     ca6:	98 2f       	mov	r25, r24
     ca8:	90 95       	com	r25
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	6c 81       	ldd	r22, Y+4	; 0x04
     cb0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_u8SetPortValue>
	DIO_u8SetPinDirection(SSD->EnablePort,SSD->EnablePin,OUTPUT);
     cb4:	ea 81       	ldd	r30, Y+2	; 0x02
     cb6:	fb 81       	ldd	r31, Y+3	; 0x03
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	ea 81       	ldd	r30, Y+2	; 0x02
     cbc:	fb 81       	ldd	r31, Y+3	; 0x03
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	69 2f       	mov	r22, r25
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
}
     cc8:	26 96       	adiw	r28, 0x06	; 6
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <SSD_Enable>:

u8 SSD_Enable(SSD_t*SSD)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <SSD_Enable+0x6>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <SSD_Enable+0x8>
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD -> COM_type)
     cec:	e9 81       	ldd	r30, Y+1	; 0x01
     cee:	fa 81       	ldd	r31, Y+2	; 0x02
     cf0:	80 81       	ld	r24, Z
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	3c 83       	std	Y+4, r19	; 0x04
     cf8:	2b 83       	std	Y+3, r18	; 0x03
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	9c 81       	ldd	r25, Y+4	; 0x04
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	31 f0       	breq	.+12     	; 0xd0e <SSD_Enable+0x34>
     d02:	2b 81       	ldd	r18, Y+3	; 0x03
     d04:	3c 81       	ldd	r19, Y+4	; 0x04
     d06:	21 30       	cpi	r18, 0x01	; 1
     d08:	31 05       	cpc	r19, r1
     d0a:	61 f0       	breq	.+24     	; 0xd24 <SSD_Enable+0x4a>
     d0c:	15 c0       	rjmp	.+42     	; 0xd38 <SSD_Enable+0x5e>
	{
	case ANODE : DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,1) ;break;
     d0e:	e9 81       	ldd	r30, Y+1	; 0x01
     d10:	fa 81       	ldd	r31, Y+2	; 0x02
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	e9 81       	ldd	r30, Y+1	; 0x01
     d16:	fa 81       	ldd	r31, Y+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	69 2f       	mov	r22, r25
     d1c:	41 e0       	ldi	r20, 0x01	; 1
     d1e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
     d22:	0a c0       	rjmp	.+20     	; 0xd38 <SSD_Enable+0x5e>
	case CATHODE :DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,0); break;
     d24:	e9 81       	ldd	r30, Y+1	; 0x01
     d26:	fa 81       	ldd	r31, Y+2	; 0x02
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	e9 81       	ldd	r30, Y+1	; 0x01
     d2c:	fa 81       	ldd	r31, Y+2	; 0x02
     d2e:	93 81       	ldd	r25, Z+3	; 0x03
     d30:	69 2f       	mov	r22, r25
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	default:break;
	}
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <SSD_Disable>:
u8 SSD_Disable(SSD_t*SSD)
{
     d48:	df 93       	push	r29
     d4a:	cf 93       	push	r28
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <SSD_Disable+0x6>
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <SSD_Disable+0x8>
     d50:	0f 92       	push	r0
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	9a 83       	std	Y+2, r25	; 0x02
     d58:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD -> COM_type)
     d5a:	e9 81       	ldd	r30, Y+1	; 0x01
     d5c:	fa 81       	ldd	r31, Y+2	; 0x02
     d5e:	80 81       	ld	r24, Z
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	3c 83       	std	Y+4, r19	; 0x04
     d66:	2b 83       	std	Y+3, r18	; 0x03
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	31 f0       	breq	.+12     	; 0xd7c <SSD_Disable+0x34>
     d70:	2b 81       	ldd	r18, Y+3	; 0x03
     d72:	3c 81       	ldd	r19, Y+4	; 0x04
     d74:	21 30       	cpi	r18, 0x01	; 1
     d76:	31 05       	cpc	r19, r1
     d78:	61 f0       	breq	.+24     	; 0xd92 <SSD_Disable+0x4a>
     d7a:	15 c0       	rjmp	.+42     	; 0xda6 <SSD_Disable+0x5e>
	{
	case ANODE : DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,0);break;
     d7c:	e9 81       	ldd	r30, Y+1	; 0x01
     d7e:	fa 81       	ldd	r31, Y+2	; 0x02
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	e9 81       	ldd	r30, Y+1	; 0x01
     d84:	fa 81       	ldd	r31, Y+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	69 2f       	mov	r22, r25
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
     d90:	0a c0       	rjmp	.+20     	; 0xda6 <SSD_Disable+0x5e>
	case CATHODE :DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,1);break;
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	e9 81       	ldd	r30, Y+1	; 0x01
     d9a:	fa 81       	ldd	r31, Y+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	69 2f       	mov	r22, r25
     da0:	41 e0       	ldi	r20, 0x01	; 1
     da2:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	default:break;
	}
}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <LED_TurnOn>:
/*********************************************************************************/
/*********************************************************************************/
#include "LED_interface.h"

u8 LED_TurnOn(LED_t* LED)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	00 d0       	rcall	.+0      	; 0xdbc <LED_TurnOn+0x6>
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDirection(LED ->PORT,LED->PIN,OUTPUT);
     dc6:	e9 81       	ldd	r30, Y+1	; 0x01
     dc8:	fa 81       	ldd	r31, Y+2	; 0x02
     dca:	80 81       	ld	r24, Z
     dcc:	e9 81       	ldd	r30, Y+1	; 0x01
     dce:	fa 81       	ldd	r31, Y+2	; 0x02
     dd0:	91 81       	ldd	r25, Z+1	; 0x01
     dd2:	69 2f       	mov	r22, r25
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(LED ->PORT,LED->PIN,HIGH);
     dda:	e9 81       	ldd	r30, Y+1	; 0x01
     ddc:	fa 81       	ldd	r31, Y+2	; 0x02
     dde:	80 81       	ld	r24, Z
     de0:	e9 81       	ldd	r30, Y+1	; 0x01
     de2:	fa 81       	ldd	r31, Y+2	; 0x02
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	69 2f       	mov	r22, r25
     de8:	41 e0       	ldi	r20, 0x01	; 1
     dea:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
}
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <LED_TurnOff>:

u8 LED_TurnOff(LED_t* LED)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <LED_TurnOff+0x6>
     e00:	0f 92       	push	r0
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	9a 83       	std	Y+2, r25	; 0x02
     e08:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDirection(LED ->PORT,LED->PIN,OUTPUT);
     e0a:	e9 81       	ldd	r30, Y+1	; 0x01
     e0c:	fa 81       	ldd	r31, Y+2	; 0x02
     e0e:	80 81       	ld	r24, Z
     e10:	e9 81       	ldd	r30, Y+1	; 0x01
     e12:	fa 81       	ldd	r31, Y+2	; 0x02
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	69 2f       	mov	r22, r25
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(LED ->PORT,LED->PIN,LOW);
     e1e:	e9 81       	ldd	r30, Y+1	; 0x01
     e20:	fa 81       	ldd	r31, Y+2	; 0x02
     e22:	80 81       	ld	r24, Z
     e24:	e9 81       	ldd	r30, Y+1	; 0x01
     e26:	fa 81       	ldd	r31, Y+2	; 0x02
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	69 2f       	mov	r22, r25
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>

}
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <LCD_voidSendCommand>:

#include "LCD_interface.h"
#include <util/delay.h>

void LCD_voidSendCommand(u8 Copy_u8Command)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2f 97       	sbiw	r28, 0x0f	; 15
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE ==EIGHT_BIT
	/*set RS pin low for Command*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOW);
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	/*Set RW pin LOW for Write*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	/*Send Command in data PORT*/
	DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Command);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e6c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_u8SetPortValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	62 e0       	ldi	r22, 0x02	; 2
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e4       	ldi	r27, 0x40	; 64
     e82:	8b 87       	std	Y+11, r24	; 0x0b
     e84:	9c 87       	std	Y+12, r25	; 0x0c
     e86:	ad 87       	std	Y+13, r26	; 0x0d
     e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e90:	9e 85       	ldd	r25, Y+14	; 0x0e
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	4a ef       	ldi	r20, 0xFA	; 250
     e98:	54 e4       	ldi	r21, 0x44	; 68
     e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	8f 83       	std	Y+7, r24	; 0x07
     ea4:	98 87       	std	Y+8, r25	; 0x08
     ea6:	a9 87       	std	Y+9, r26	; 0x09
     ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	89 85       	ldd	r24, Y+9	; 0x09
     eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e8       	ldi	r20, 0x80	; 128
     eb8:	5f e3       	ldi	r21, 0x3F	; 63
     eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ebe:	88 23       	and	r24, r24
     ec0:	2c f4       	brge	.+10     	; 0xecc <LCD_voidSendCommand+0x8e>
		__ticks = 1;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9e 83       	std	Y+6, r25	; 0x06
     ec8:	8d 83       	std	Y+5, r24	; 0x05
     eca:	3f c0       	rjmp	.+126    	; 0xf4a <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     ecc:	6f 81       	ldd	r22, Y+7	; 0x07
     ece:	78 85       	ldd	r23, Y+8	; 0x08
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	3f ef       	ldi	r19, 0xFF	; 255
     ed8:	4f e7       	ldi	r20, 0x7F	; 127
     eda:	57 e4       	ldi	r21, 0x47	; 71
     edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee0:	18 16       	cp	r1, r24
     ee2:	4c f5       	brge	.+82     	; 0xf36 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eea:	9e 85       	ldd	r25, Y+14	; 0x0e
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	40 e2       	ldi	r20, 0x20	; 32
     ef2:	51 e4       	ldi	r21, 0x41	; 65
     ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	bc 01       	movw	r22, r24
     efe:	cd 01       	movw	r24, r26
     f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
     f0c:	0f c0       	rjmp	.+30     	; 0xf2c <LCD_voidSendCommand+0xee>
     f0e:	88 ec       	ldi	r24, 0xC8	; 200
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <LCD_voidSendCommand+0xdc>
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	9e 83       	std	Y+6, r25	; 0x06
     f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	69 f7       	brne	.-38     	; 0xf0e <LCD_voidSendCommand+0xd0>
     f34:	14 c0       	rjmp	.+40     	; 0xf5e <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f36:	6f 81       	ldd	r22, Y+7	; 0x07
     f38:	78 85       	ldd	r23, Y+8	; 0x08
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9e 83       	std	Y+6, r25	; 0x06
     f48:	8d 83       	std	Y+5, r24	; 0x05
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	9a 83       	std	Y+2, r25	; 0x02
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <LCD_voidSendCommand+0x118>
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	62 e0       	ldi	r22, 0x02	; 2
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
	_delay_ms(5);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
	_delay_ms(50);
#endif
}
     f68:	2f 96       	adiw	r28, 0x0f	; 15
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	2f 97       	sbiw	r28, 0x0f	; 15
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == EIGHT_BIT
	/*set RS pin HIGH for DATA*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,HIGH );
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	/*Set RW pin LOW for Write*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	/*Send Command in data PORT*/
	DIO_u8SetPortValue(LCD_DATA_PORT,Copy_u8Data);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	6f 85       	ldd	r22, Y+15	; 0x0f
     fa8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_u8SetPortValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	62 e0       	ldi	r22, 0x02	; 2
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e4       	ldi	r27, 0x40	; 64
     fbe:	8b 87       	std	Y+11, r24	; 0x0b
     fc0:	9c 87       	std	Y+12, r25	; 0x0c
     fc2:	ad 87       	std	Y+13, r26	; 0x0d
     fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fca:	8d 85       	ldd	r24, Y+13	; 0x0d
     fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a ef       	ldi	r20, 0xFA	; 250
     fd4:	54 e4       	ldi	r21, 0x44	; 68
     fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8f 83       	std	Y+7, r24	; 0x07
     fe0:	98 87       	std	Y+8, r25	; 0x08
     fe2:	a9 87       	std	Y+9, r26	; 0x09
     fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe6:	6f 81       	ldd	r22, Y+7	; 0x07
     fe8:	78 85       	ldd	r23, Y+8	; 0x08
     fea:	89 85       	ldd	r24, Y+9	; 0x09
     fec:	9a 85       	ldd	r25, Y+10	; 0x0a
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	2c f4       	brge	.+10     	; 0x1008 <LCD_voidSendData+0x8e>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1008:	6f 81       	ldd	r22, Y+7	; 0x07
    100a:	78 85       	ldd	r23, Y+8	; 0x08
    100c:	89 85       	ldd	r24, Y+9	; 0x09
    100e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	4c f5       	brge	.+82     	; 0x1072 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	6b 85       	ldd	r22, Y+11	; 0x0b
    1022:	7c 85       	ldd	r23, Y+12	; 0x0c
    1024:	8d 85       	ldd	r24, Y+13	; 0x0d
    1026:	9e 85       	ldd	r25, Y+14	; 0x0e
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <LCD_voidSendData+0xee>
    104a:	88 ec       	ldi	r24, 0xC8	; 200
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9c 83       	std	Y+4, r25	; 0x04
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	9c 81       	ldd	r25, Y+4	; 0x04
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <LCD_voidSendData+0xdc>
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <LCD_voidSendData+0xd0>
    1070:	14 c0       	rjmp	.+40     	; 0x109a <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	6f 81       	ldd	r22, Y+7	; 0x07
    1074:	78 85       	ldd	r23, Y+8	; 0x08
    1076:	89 85       	ldd	r24, Y+9	; 0x09
    1078:	9a 85       	ldd	r25, Y+10	; 0x0a
    107a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9e 83       	std	Y+6, r25	; 0x06
    1084:	8d 83       	std	Y+5, r24	; 0x05
    1086:	8d 81       	ldd	r24, Y+5	; 0x05
    1088:	9e 81       	ldd	r25, Y+6	; 0x06
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <LCD_voidSendData+0x118>
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	62 e0       	ldi	r22, 0x02	; 2
    109e:	40 e0       	ldi	r20, 0x00	; 0
    10a0:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
#endif
}
    10a4:	2f 96       	adiw	r28, 0x0f	; 15
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <LCD_voidInit>:

void LCD_voidInit(void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	2e 97       	sbiw	r28, 0x0e	; 14
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a0 ef       	ldi	r26, 0xF0	; 240
    10d0:	b1 e4       	ldi	r27, 0x41	; 65
    10d2:	8b 87       	std	Y+11, r24	; 0x0b
    10d4:	9c 87       	std	Y+12, r25	; 0x0c
    10d6:	ad 87       	std	Y+13, r26	; 0x0d
    10d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10da:	6b 85       	ldd	r22, Y+11	; 0x0b
    10dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10de:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	4a ef       	ldi	r20, 0xFA	; 250
    10e8:	54 e4       	ldi	r21, 0x44	; 68
    10ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	8f 83       	std	Y+7, r24	; 0x07
    10f4:	98 87       	std	Y+8, r25	; 0x08
    10f6:	a9 87       	std	Y+9, r26	; 0x09
    10f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e8       	ldi	r20, 0x80	; 128
    1108:	5f e3       	ldi	r21, 0x3F	; 63
    110a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110e:	88 23       	and	r24, r24
    1110:	2c f4       	brge	.+10     	; 0x111c <LCD_voidInit+0x66>
		__ticks = 1;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	3f c0       	rjmp	.+126    	; 0x119a <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    111c:	6f 81       	ldd	r22, Y+7	; 0x07
    111e:	78 85       	ldd	r23, Y+8	; 0x08
    1120:	89 85       	ldd	r24, Y+9	; 0x09
    1122:	9a 85       	ldd	r25, Y+10	; 0x0a
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	3f ef       	ldi	r19, 0xFF	; 255
    1128:	4f e7       	ldi	r20, 0x7F	; 127
    112a:	57 e4       	ldi	r21, 0x47	; 71
    112c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1130:	18 16       	cp	r1, r24
    1132:	4c f5       	brge	.+82     	; 0x1186 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1134:	6b 85       	ldd	r22, Y+11	; 0x0b
    1136:	7c 85       	ldd	r23, Y+12	; 0x0c
    1138:	8d 85       	ldd	r24, Y+13	; 0x0d
    113a:	9e 85       	ldd	r25, Y+14	; 0x0e
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e2       	ldi	r20, 0x20	; 32
    1142:	51 e4       	ldi	r21, 0x41	; 65
    1144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
    115c:	0f c0       	rjmp	.+30     	; 0x117c <LCD_voidInit+0xc6>
    115e:	88 ec       	ldi	r24, 0xC8	; 200
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <LCD_voidInit+0xb4>
    116e:	9c 83       	std	Y+4, r25	; 0x04
    1170:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117c:	8d 81       	ldd	r24, Y+5	; 0x05
    117e:	9e 81       	ldd	r25, Y+6	; 0x06
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	69 f7       	brne	.-38     	; 0x115e <LCD_voidInit+0xa8>
    1184:	14 c0       	rjmp	.+40     	; 0x11ae <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1186:	6f 81       	ldd	r22, Y+7	; 0x07
    1188:	78 85       	ldd	r23, Y+8	; 0x08
    118a:	89 85       	ldd	r24, Y+9	; 0x09
    118c:	9a 85       	ldd	r25, Y+10	; 0x0a
    118e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <LCD_voidInit+0xf0>
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01

	/*Put function set command 0011NFXX XX dont care
	 * N for number of line 0-->one line 1-->2 lines
	 * F for font size 0-->5x8 1-->5x11 */

	LCD_voidSendCommand(0b00111000);
    11ae:	88 e3       	ldi	r24, 0x38	; 56
    11b0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_voidSendCommand>
	/*Display ON/OFF control 00001DCB
	 * D For display control 0--> Disable 1-->Enable
	 * C For cursor Enable 0-->Disable 1-->Enable
	 * B For Blink cursor enable 0-->Disable 1-->Enable*/

	LCD_voidSendCommand(0b00001100);
    11b4:	8c e0       	ldi	r24, 0x0C	; 12
    11b6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_voidSendCommand>

	/*Display clear*/

	LCD_voidSendCommand(1);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0c);
	LCD_voidSendCommand(0x06);

#endif

}
    11c0:	2e 96       	adiw	r28, 0x0e	; 14
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <LCD_voidSendString>:

void LCD_voidSendString(const char* String )
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <LCD_voidSendString+0x6>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	9b 83       	std	Y+3, r25	; 0x03
    11e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter =  0 ;
    11e2:	19 82       	std	Y+1, r1	; 0x01
    11e4:	0e c0       	rjmp	.+28     	; 0x1202 <LCD_voidSendString+0x30>
	while(String[Counter])
	{
		LCD_voidSendData(String[Counter]);
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	fc 01       	movw	r30, r24
    11f2:	e2 0f       	add	r30, r18
    11f4:	f3 1f       	adc	r31, r19
    11f6:	80 81       	ld	r24, Z
    11f8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_voidSendData>
		Counter++;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* String )
{
	u8 Counter =  0 ;
	while(String[Counter])
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	9b 81       	ldd	r25, Y+3	; 0x03
    120c:	fc 01       	movw	r30, r24
    120e:	e2 0f       	add	r30, r18
    1210:	f3 1f       	adc	r31, r19
    1212:	80 81       	ld	r24, Z
    1214:	88 23       	and	r24, r24
    1216:	39 f7       	brne	.-50     	; 0x11e6 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[Counter]);
		Counter++;
	}
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 X_position,u8 Y_Position)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <LCD_voidGoToXY+0x6>
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	8a 83       	std	Y+2, r24	; 0x02
    1232:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	/*X position is the Row and Y is Col.
	 * Address of first row is from 0 to 0xf
	 * Second row is from 0x40 to 0x4f*/
	if(X_position==0)
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	88 23       	and	r24, r24
    1238:	19 f4       	brne	.+6      	; 0x1240 <LCD_voidGoToXY+0x1c>
	{
		Address =Y_Position;
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	06 c0       	rjmp	.+12     	; 0x124c <LCD_voidGoToXY+0x28>
	}
	else if(X_position==1)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	19 f4       	brne	.+6      	; 0x124c <LCD_voidGoToXY+0x28>
	{
		Address =0x40 + Y_Position ;
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	80 5c       	subi	r24, 0xC0	; 192
    124a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*The command to set address that you want is 0b10000000
	 * So we add 128 to the address*/
	LCD_voidSendCommand((Address|0b10000000));
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	80 68       	ori	r24, 0x80	; 128
    1250:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_voidSendCommand>
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <LCD_voidSpecialChar>:

void LCD_voidSpecialChar(u8* Pattern,u8 Block_no,u8 Xposition,u8 Yposition)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	27 97       	sbiw	r28, 0x07	; 7
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	9c 83       	std	Y+4, r25	; 0x04
    1276:	8b 83       	std	Y+3, r24	; 0x03
    1278:	6d 83       	std	Y+5, r22	; 0x05
    127a:	4e 83       	std	Y+6, r20	; 0x06
    127c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Address = Block_no*8;
    127e:	8d 81       	ldd	r24, Y+5	; 0x05
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(Address+64);
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 5c       	subi	r24, 0xC0	; 192
    1296:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_voidSendCommand>
	for(u8 i=0 ;i<8;i++)
    129a:	19 82       	std	Y+1, r1	; 0x01
    129c:	0e c0       	rjmp	.+28     	; 0x12ba <LCD_voidSpecialChar+0x5a>
	{
		LCD_voidSendData(Pattern[i]);
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	fc 01       	movw	r30, r24
    12aa:	e2 0f       	add	r30, r18
    12ac:	f3 1f       	adc	r31, r19
    12ae:	80 81       	ld	r24, Z
    12b0:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_voidSendData>

void LCD_voidSpecialChar(u8* Pattern,u8 Block_no,u8 Xposition,u8 Yposition)
{
	u8 Address = Block_no*8;
	LCD_voidSendCommand(Address+64);
	for(u8 i=0 ;i<8;i++)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	78 f3       	brcs	.-34     	; 0x129e <LCD_voidSpecialChar+0x3e>
	{
		LCD_voidSendData(Pattern[i]);
	}
	LCD_voidGoToXY(Xposition,Yposition);
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	0e 94 12 09 	call	0x1224	; 0x1224 <LCD_voidGoToXY>
	LCD_voidSendData(Block_no);
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_voidSendData>
}
    12ce:	27 96       	adiw	r28, 0x07	; 7
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(u32 Number)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	63 97       	sbiw	r28, 0x13	; 19
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	68 8b       	std	Y+16, r22	; 0x10
    12f6:	79 8b       	std	Y+17, r23	; 0x11
    12f8:	8a 8b       	std	Y+18, r24	; 0x12
    12fa:	9b 8b       	std	Y+19, r25	; 0x13
	u8 str[8];
	u8 i;
	u32 num;
	u8 rem;
	u8 len =0;
    12fc:	19 82       	std	Y+1, r1	; 0x01
	num=Number;
    12fe:	88 89       	ldd	r24, Y+16	; 0x10
    1300:	99 89       	ldd	r25, Y+17	; 0x11
    1302:	aa 89       	ldd	r26, Y+18	; 0x12
    1304:	bb 89       	ldd	r27, Y+19	; 0x13
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	ad 83       	std	Y+5, r26	; 0x05
    130c:	be 83       	std	Y+6, r27	; 0x06
    130e:	15 c0       	rjmp	.+42     	; 0x133a <LCD_voidWriteNumber+0x5a>
	while(num != 0)
	{
		len++;
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	89 83       	std	Y+1, r24	; 0x01
		num=num/10;
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	ad 81       	ldd	r26, Y+5	; 0x05
    131c:	be 81       	ldd	r27, Y+6	; 0x06
    131e:	2a e0       	ldi	r18, 0x0A	; 10
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	50 e0       	ldi	r21, 0x00	; 0
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodsi4>
    132e:	da 01       	movw	r26, r20
    1330:	c9 01       	movw	r24, r18
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	9c 83       	std	Y+4, r25	; 0x04
    1336:	ad 83       	std	Y+5, r26	; 0x05
    1338:	be 83       	std	Y+6, r27	; 0x06
	u8 i;
	u32 num;
	u8 rem;
	u8 len =0;
	num=Number;
	while(num != 0)
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	ad 81       	ldd	r26, Y+5	; 0x05
    1340:	be 81       	ldd	r27, Y+6	; 0x06
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	a1 05       	cpc	r26, r1
    1346:	b1 05       	cpc	r27, r1
    1348:	19 f7       	brne	.-58     	; 0x1310 <LCD_voidWriteNumber+0x30>
	{
		len++;
		num=num/10;
	}
	if(len==0)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	88 23       	and	r24, r24
    134e:	19 f4       	brne	.+6      	; 0x1356 <LCD_voidWriteNumber+0x76>
	{
		LCD_voidSendData('0');
    1350:	80 e3       	ldi	r24, 0x30	; 48
    1352:	0e 94 bd 07 	call	0xf7a	; 0xf7a <LCD_voidSendData>

	}
	for(i=0;i<len;i++)
    1356:	1f 82       	std	Y+7, r1	; 0x07
    1358:	37 c0       	rjmp	.+110    	; 0x13c8 <LCD_voidWriteNumber+0xe8>
	{
		rem=Number%10;
    135a:	88 89       	ldd	r24, Y+16	; 0x10
    135c:	99 89       	ldd	r25, Y+17	; 0x11
    135e:	aa 89       	ldd	r26, Y+18	; 0x12
    1360:	bb 89       	ldd	r27, Y+19	; 0x13
    1362:	2a e0       	ldi	r18, 0x0A	; 10
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e0       	ldi	r21, 0x00	; 0
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodsi4>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	8a 83       	std	Y+2, r24	; 0x02
		Number=Number/10;
    1378:	88 89       	ldd	r24, Y+16	; 0x10
    137a:	99 89       	ldd	r25, Y+17	; 0x11
    137c:	aa 89       	ldd	r26, Y+18	; 0x12
    137e:	bb 89       	ldd	r27, Y+19	; 0x13
    1380:	2a e0       	ldi	r18, 0x0A	; 10
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodsi4>
    1390:	da 01       	movw	r26, r20
    1392:	c9 01       	movw	r24, r18
    1394:	88 8b       	std	Y+16, r24	; 0x10
    1396:	99 8b       	std	Y+17, r25	; 0x11
    1398:	aa 8b       	std	Y+18, r26	; 0x12
    139a:	bb 8b       	std	Y+19, r27	; 0x13
		str[len-(i+1)]=rem+'0';
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8f 81       	ldd	r24, Y+7	; 0x07
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	80 95       	com	r24
    13aa:	90 95       	com	r25
    13ac:	28 0f       	add	r18, r24
    13ae:	39 1f       	adc	r19, r25
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	48 2f       	mov	r20, r24
    13b4:	40 5d       	subi	r20, 0xD0	; 208
    13b6:	ce 01       	movw	r24, r28
    13b8:	08 96       	adiw	r24, 0x08	; 8
    13ba:	fc 01       	movw	r30, r24
    13bc:	e2 0f       	add	r30, r18
    13be:	f3 1f       	adc	r31, r19
    13c0:	40 83       	st	Z, r20
	if(len==0)
	{
		LCD_voidSendData('0');

	}
	for(i=0;i<len;i++)
    13c2:	8f 81       	ldd	r24, Y+7	; 0x07
    13c4:	8f 5f       	subi	r24, 0xFF	; 255
    13c6:	8f 83       	std	Y+7, r24	; 0x07
    13c8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	98 17       	cp	r25, r24
    13ce:	28 f2       	brcs	.-118    	; 0x135a <LCD_voidWriteNumber+0x7a>
	{
		rem=Number%10;
		Number=Number/10;
		str[len-(i+1)]=rem+'0';
	}
	str[len]='\0';
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	ce 01       	movw	r24, r28
    13d8:	08 96       	adiw	r24, 0x08	; 8
    13da:	fc 01       	movw	r30, r24
    13dc:	e2 0f       	add	r30, r18
    13de:	f3 1f       	adc	r31, r19
    13e0:	10 82       	st	Z, r1
	LCD_voidSendString(str);
    13e2:	ce 01       	movw	r24, r28
    13e4:	08 96       	adiw	r24, 0x08	; 8
    13e6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_voidSendString>
}
    13ea:	63 96       	adiw	r28, 0x13	; 19
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <KP_u8GetPressedKey>:
/*********************************************************************************/
/*********************************************************************************/
#include "KP_interface.h"

u8 KP_u8GetPressedKey(void)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <KP_u8GetPressedKey+0x6>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <KP_u8GetPressedKey+0x8>
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(KP_PORT, 0b00001111);
    140a:	84 e0       	ldi	r24, 0x04	; 4
    140c:	6f e0       	ldi	r22, 0x0F	; 15
    140e:	0e 94 05 0c 	call	0x180a	; 0x180a <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(KP_PORT, 0xff);
    1412:	84 e0       	ldi	r24, 0x04	; 4
    1414:	6f ef       	ldi	r22, 0xFF	; 255
    1416:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <DIO_u8SetPortValue>
	 u8 PressedKey = NoPressedKey;
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	8b 83       	std	Y+3, r24	; 0x03
	 u8 Column,Row;
	static u8 KP_arr[4][4]= KPD_arr_val;
	static u8 KP_ColArr[4] ={KP_Col1,KP_Col2,KP_Col3,KP_Col4};
	static u8 KP_RowArr[4] ={KP_Row1,KP_Row2,KP_Row3,KP_Row4};

	for(Column=0;Column<4;Column++)
    141e:	1a 82       	std	Y+2, r1	; 0x02
    1420:	6a c0       	rjmp	.+212    	; 0x14f6 <KP_u8GetPressedKey+0xfa>
	{
		/*activate current Column*/
		DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],LOW);
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	fc 01       	movw	r30, r24
    142a:	e1 55       	subi	r30, 0x51	; 81
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	90 81       	ld	r25, Z
    1430:	84 e0       	ldi	r24, 0x04	; 4
    1432:	69 2f       	mov	r22, r25
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>

		for(Row=0;Row<4;Row++)
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	49 c0       	rjmp	.+146    	; 0x14d0 <KP_u8GetPressedKey+0xd4>
		{
			/*Check Row Pins*/
			DIO_u8GetPinValue(KP_PORT, KP_RowArr[Row],&PinState);
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	fc 01       	movw	r30, r24
    1446:	e5 55       	subi	r30, 0x55	; 85
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	90 81       	ld	r25, Z
    144c:	9e 01       	movw	r18, r28
    144e:	2c 5f       	subi	r18, 0xFC	; 252
    1450:	3f 4f       	sbci	r19, 0xFF	; 255
    1452:	84 e0       	ldi	r24, 0x04	; 4
    1454:	69 2f       	mov	r22, r25
    1456:	a9 01       	movw	r20, r18
    1458:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
			/*Check pin state*/
			if(PinState==0)
    145c:	8c 81       	ldd	r24, Y+4	; 0x04
    145e:	88 23       	and	r24, r24
    1460:	a1 f5       	brne	.+104    	; 0x14ca <KP_u8GetPressedKey+0xce>
			{
				PressedKey=KP_arr[Row][Column];
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	48 2f       	mov	r20, r24
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	ca 01       	movw	r24, r20
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	fc 01       	movw	r30, r24
    147e:	ed 54       	subi	r30, 0x4D	; 77
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	80 81       	ld	r24, Z
    1484:	8b 83       	std	Y+3, r24	; 0x03
    1486:	0f c0       	rjmp	.+30     	; 0x14a6 <KP_u8GetPressedKey+0xaa>
				while(PinState==0)
				{
					DIO_u8GetPinValue(KP_PORT, KP_RowArr[Row],&PinState);
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	fc 01       	movw	r30, r24
    1490:	e5 55       	subi	r30, 0x55	; 85
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	90 81       	ld	r25, Z
    1496:	9e 01       	movw	r18, r28
    1498:	2c 5f       	subi	r18, 0xFC	; 252
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	69 2f       	mov	r22, r25
    14a0:	a9 01       	movw	r20, r18
    14a2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KP_PORT, KP_RowArr[Row],&PinState);
			/*Check pin state*/
			if(PinState==0)
			{
				PressedKey=KP_arr[Row][Column];
				while(PinState==0)
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	88 23       	and	r24, r24
    14aa:	71 f3       	breq	.-36     	; 0x1488 <KP_u8GetPressedKey+0x8c>
				{
					DIO_u8GetPinValue(KP_PORT, KP_RowArr[Row],&PinState);
				}
				DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],HIGH);
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	fc 01       	movw	r30, r24
    14b4:	e1 55       	subi	r30, 0x51	; 81
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	90 81       	ld	r25, Z
    14ba:	84 e0       	ldi	r24, 0x04	; 4
    14bc:	69 2f       	mov	r22, r25
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
				return PressedKey;
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	1c c0       	rjmp	.+56     	; 0x1502 <KP_u8GetPressedKey+0x106>
	for(Column=0;Column<4;Column++)
	{
		/*activate current Column*/
		DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],LOW);

		for(Row=0;Row<4;Row++)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	84 30       	cpi	r24, 0x04	; 4
    14d4:	08 f4       	brcc	.+2      	; 0x14d8 <KP_u8GetPressedKey+0xdc>
    14d6:	b3 cf       	rjmp	.-154    	; 0x143e <KP_u8GetPressedKey+0x42>
				DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],HIGH);
				return PressedKey;
			}
		}
		/*Deactivate Column*/
		DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],HIGH);
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	fc 01       	movw	r30, r24
    14e0:	e1 55       	subi	r30, 0x51	; 81
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	90 81       	ld	r25, Z
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	69 2f       	mov	r22, r25
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	 u8 Column,Row;
	static u8 KP_arr[4][4]= KPD_arr_val;
	static u8 KP_ColArr[4] ={KP_Col1,KP_Col2,KP_Col3,KP_Col4};
	static u8 KP_RowArr[4] ={KP_Row1,KP_Row2,KP_Row3,KP_Row4};

	for(Column=0;Column<4;Column++)
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	8f 5f       	subi	r24, 0xFF	; 255
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	84 30       	cpi	r24, 0x04	; 4
    14fa:	08 f4       	brcc	.+2      	; 0x14fe <KP_u8GetPressedKey+0x102>
    14fc:	92 cf       	rjmp	.-220    	; 0x1422 <KP_u8GetPressedKey+0x26>
		/*Deactivate Column*/
		DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],HIGH);
	}


	return PressedKey;
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <GIE_voidEnable>:
/*********************************************************************************/
/*********************************************************************************/
#include "GIE_interface.h"

void GIE_voidEnable(void)
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG,SREG_I);
    151c:	af e5       	ldi	r26, 0x5F	; 95
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	ef e5       	ldi	r30, 0x5F	; 95
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 68       	ori	r24, 0x80	; 128
    1528:	8c 93       	st	X, r24
}
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG,SREG_I);
    1538:	af e5       	ldi	r26, 0x5F	; 95
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	ef e5       	ldi	r30, 0x5F	; 95
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8f 77       	andi	r24, 0x7F	; 127
    1544:	8c 93       	st	X, r24
}
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <EXTI_voidINT0Init>:
/*********************************************************************************/

#include "EXTI_interface.h"

void EXTI_voidINT0Init(void)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	/*Set sense control for INT0*/
	/*for falling edge ISC00 =0 , ISC01=1
	 *for low level    ISC00 =0 , ISC01=0
	 *for any change   ISC00 =1 , ISC01=0
	 *for rising edge  ISC00 =1 , ISC01=1*/
	SET_BIT(MCUCR,MCUCR_ISC01);
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	82 60       	ori	r24, 0x02	; 2
    1560:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
    1562:	a5 e5       	ldi	r26, 0x55	; 85
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e5       	ldi	r30, 0x55	; 85
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	8e 7f       	andi	r24, 0xFE	; 254
    156e:	8c 93       	st	X, r24
	/*Peripheral interrupt enable for INT0*/
	SET_BIT(GICR,GICR_INT0);
    1570:	ab e5       	ldi	r26, 0x5B	; 91
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	eb e5       	ldi	r30, 0x5B	; 91
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	80 64       	ori	r24, 0x40	; 64
    157c:	8c 93       	st	X, r24
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <EXTI_voidINT1Init>:
void EXTI_voidINT1Init(void)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
	/*Set sense control for INT0*/
	/*for falling edge ISC10=0 , ISC11=1
	 *for low level    ISC10=0 , ISC11=0
	 *for any change   ISC10=1 , ISC11=0
	 *for rising edge  ISC10=1 , ISC11=1*/
	SET_BIT(MCUCR,MCUCR_ISC01);
    158c:	a5 e5       	ldi	r26, 0x55	; 85
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e5 e5       	ldi	r30, 0x55	; 85
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	82 60       	ori	r24, 0x02	; 2
    1598:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
    159a:	a5 e5       	ldi	r26, 0x55	; 85
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e5 e5       	ldi	r30, 0x55	; 85
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8e 7f       	andi	r24, 0xFE	; 254
    15a6:	8c 93       	st	X, r24
	/*Peripheral interrupt enable for INT1*/
	SET_BIT(GICR,GICR_INT1);
    15a8:	ab e5       	ldi	r26, 0x5B	; 91
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e5       	ldi	r30, 0x5B	; 91
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 68       	ori	r24, 0x80	; 128
    15b4:	8c 93       	st	X, r24

}
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <EXTI_voidINT2Init>:

void EXTI_voidINT2Init(void)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
	/*Set sense control for INT0*/
	/*for falling edge write 0 && for rising edge write 1*/
	CLR_BIT(MCUCSR,MCUCSR_INT2);
    15c4:	a4 e5       	ldi	r26, 0x54	; 84
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e4 e5       	ldi	r30, 0x54	; 84
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7b       	andi	r24, 0xBF	; 191
    15d0:	8c 93       	st	X, r24
	/*Peripheral interrupt enable for INT2*/
	SET_BIT(GICR,GICR_INT2);
    15d2:	ab e5       	ldi	r26, 0x5B	; 91
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	eb e5       	ldi	r30, 0x5B	; 91
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	80 62       	ori	r24, 0x20	; 32
    15de:	8c 93       	st	X, r24

}
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <DIO_u8SetPinDirection>:
/*********************************************************************************/

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Direction)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	28 97       	sbiw	r28, 0x08	; 8
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	8a 83       	std	Y+2, r24	; 0x02
    15fc:	6b 83       	std	Y+3, r22	; 0x03
    15fe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1600:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7)
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	10 f0       	brcs	.+4      	; 0x160c <DIO_u8SetPinDirection+0x26>
		Local_u8ErrorState = 1;
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == INPUT)
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	88 23       	and	r24, r24
    1610:	09 f0       	breq	.+2      	; 0x1614 <DIO_u8SetPinDirection+0x2e>
    1612:	78 c0       	rjmp	.+240    	; 0x1704 <DIO_u8SetPinDirection+0x11e>
	{
		switch (Copy_u8Port)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	38 87       	std	Y+8, r19	; 0x08
    161c:	2f 83       	std	Y+7, r18	; 0x07
    161e:	8f 81       	ldd	r24, Y+7	; 0x07
    1620:	98 85       	ldd	r25, Y+8	; 0x08
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	91 05       	cpc	r25, r1
    1626:	61 f1       	breq	.+88     	; 0x1680 <DIO_u8SetPinDirection+0x9a>
    1628:	2f 81       	ldd	r18, Y+7	; 0x07
    162a:	38 85       	ldd	r19, Y+8	; 0x08
    162c:	23 30       	cpi	r18, 0x03	; 3
    162e:	31 05       	cpc	r19, r1
    1630:	34 f4       	brge	.+12     	; 0x163e <DIO_u8SetPinDirection+0x58>
    1632:	8f 81       	ldd	r24, Y+7	; 0x07
    1634:	98 85       	ldd	r25, Y+8	; 0x08
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	91 05       	cpc	r25, r1
    163a:	69 f0       	breq	.+26     	; 0x1656 <DIO_u8SetPinDirection+0x70>
    163c:	60 c0       	rjmp	.+192    	; 0x16fe <DIO_u8SetPinDirection+0x118>
    163e:	2f 81       	ldd	r18, Y+7	; 0x07
    1640:	38 85       	ldd	r19, Y+8	; 0x08
    1642:	23 30       	cpi	r18, 0x03	; 3
    1644:	31 05       	cpc	r19, r1
    1646:	89 f1       	breq	.+98     	; 0x16aa <DIO_u8SetPinDirection+0xc4>
    1648:	8f 81       	ldd	r24, Y+7	; 0x07
    164a:	98 85       	ldd	r25, Y+8	; 0x08
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	91 05       	cpc	r25, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <DIO_u8SetPinDirection+0x6e>
    1652:	40 c0       	rjmp	.+128    	; 0x16d4 <DIO_u8SetPinDirection+0xee>
    1654:	54 c0       	rjmp	.+168    	; 0x16fe <DIO_u8SetPinDirection+0x118>
		{
		case PORT_A :
			CLR_BIT(DDRA,Copy_u8Pin);
    1656:	aa e3       	ldi	r26, 0x3A	; 58
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	ea e3       	ldi	r30, 0x3A	; 58
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_u8SetPinDirection+0x8e>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_u8SetPinDirection+0x8a>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	bb c0       	rjmp	.+374    	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_B :
			CLR_BIT(DDRB,Copy_u8Pin);
    1680:	a7 e3       	ldi	r26, 0x37	; 55
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e7 e3       	ldi	r30, 0x37	; 55
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_u8SetPinDirection+0xb8>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_u8SetPinDirection+0xb4>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	a6 c0       	rjmp	.+332    	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_C :
			CLR_BIT(DDRC,Copy_u8Pin);
    16aa:	a4 e3       	ldi	r26, 0x34	; 52
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e4 e3       	ldi	r30, 0x34	; 52
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_u8SetPinDirection+0xe2>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_u8SetPinDirection+0xde>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	91 c0       	rjmp	.+290    	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_D :
			CLR_BIT(DDRD,Copy_u8Pin);
    16d4:	a1 e3       	ldi	r26, 0x31	; 49
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e1 e3       	ldi	r30, 0x31	; 49
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_u8SetPinDirection+0x10c>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_u8SetPinDirection+0x108>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	7c c0       	rjmp	.+248    	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	79 c0       	rjmp	.+242    	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		}
	}
	else if(Copy_u8Direction == OUTPUT)
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	09 f0       	breq	.+2      	; 0x170c <DIO_u8SetPinDirection+0x126>
    170a:	73 c0       	rjmp	.+230    	; 0x17f2 <DIO_u8SetPinDirection+0x20c>
	{
		switch (Copy_u8Port)
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	3e 83       	std	Y+6, r19	; 0x06
    1714:	2d 83       	std	Y+5, r18	; 0x05
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	9e 81       	ldd	r25, Y+6	; 0x06
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	91 05       	cpc	r25, r1
    171e:	51 f1       	breq	.+84     	; 0x1774 <DIO_u8SetPinDirection+0x18e>
    1720:	2d 81       	ldd	r18, Y+5	; 0x05
    1722:	3e 81       	ldd	r19, Y+6	; 0x06
    1724:	23 30       	cpi	r18, 0x03	; 3
    1726:	31 05       	cpc	r19, r1
    1728:	34 f4       	brge	.+12     	; 0x1736 <DIO_u8SetPinDirection+0x150>
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 05       	cpc	r25, r1
    1732:	61 f0       	breq	.+24     	; 0x174c <DIO_u8SetPinDirection+0x166>
    1734:	5b c0       	rjmp	.+182    	; 0x17ec <DIO_u8SetPinDirection+0x206>
    1736:	2d 81       	ldd	r18, Y+5	; 0x05
    1738:	3e 81       	ldd	r19, Y+6	; 0x06
    173a:	23 30       	cpi	r18, 0x03	; 3
    173c:	31 05       	cpc	r19, r1
    173e:	71 f1       	breq	.+92     	; 0x179c <DIO_u8SetPinDirection+0x1b6>
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	91 05       	cpc	r25, r1
    1748:	e9 f1       	breq	.+122    	; 0x17c4 <DIO_u8SetPinDirection+0x1de>
    174a:	50 c0       	rjmp	.+160    	; 0x17ec <DIO_u8SetPinDirection+0x206>
		{
		case PORT_A :
			SET_BIT(DDRA,Copy_u8Pin);
    174c:	aa e3       	ldi	r26, 0x3A	; 58
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ea e3       	ldi	r30, 0x3A	; 58
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_u8SetPinDirection+0x184>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_u8SetPinDirection+0x180>
    176e:	84 2b       	or	r24, r20
    1770:	8c 93       	st	X, r24
    1772:	41 c0       	rjmp	.+130    	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_B :
			SET_BIT(DDRB,Copy_u8Pin);
    1774:	a7 e3       	ldi	r26, 0x37	; 55
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e7 e3       	ldi	r30, 0x37	; 55
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_u8SetPinDirection+0x1ac>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_u8SetPinDirection+0x1a8>
    1796:	84 2b       	or	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	2d c0       	rjmp	.+90     	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_C :
			SET_BIT(DDRC,Copy_u8Pin);
    179c:	a4 e3       	ldi	r26, 0x34	; 52
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e4 e3       	ldi	r30, 0x34	; 52
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_u8SetPinDirection+0x1d4>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_u8SetPinDirection+0x1d0>
    17be:	84 2b       	or	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	19 c0       	rjmp	.+50     	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_D :
			SET_BIT(DDRD,Copy_u8Pin);
    17c4:	a1 e3       	ldi	r26, 0x31	; 49
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e1 e3       	ldi	r30, 0x31	; 49
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_u8SetPinDirection+0x1fc>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_u8SetPinDirection+0x1f8>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_u8SetPinDirection+0x210>
			break;
		}
	}
	else
	{
		Local_u8ErrorState =1;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f8:	28 96       	adiw	r28, 0x08	; 8
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <DIO_u8SetPortDirection+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <DIO_u8SetPortDirection+0x8>
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	8a 83       	std	Y+2, r24	; 0x02
    181a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    181c:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3d 83       	std	Y+5, r19	; 0x05
    1826:	2c 83       	std	Y+4, r18	; 0x04
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	91 05       	cpc	r25, r1
    1830:	d9 f0       	breq	.+54     	; 0x1868 <DIO_u8SetPortDirection+0x5e>
    1832:	2c 81       	ldd	r18, Y+4	; 0x04
    1834:	3d 81       	ldd	r19, Y+5	; 0x05
    1836:	23 30       	cpi	r18, 0x03	; 3
    1838:	31 05       	cpc	r19, r1
    183a:	34 f4       	brge	.+12     	; 0x1848 <DIO_u8SetPortDirection+0x3e>
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	9d 81       	ldd	r25, Y+5	; 0x05
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	91 05       	cpc	r25, r1
    1844:	61 f0       	breq	.+24     	; 0x185e <DIO_u8SetPortDirection+0x54>
    1846:	1f c0       	rjmp	.+62     	; 0x1886 <DIO_u8SetPortDirection+0x7c>
    1848:	2c 81       	ldd	r18, Y+4	; 0x04
    184a:	3d 81       	ldd	r19, Y+5	; 0x05
    184c:	23 30       	cpi	r18, 0x03	; 3
    184e:	31 05       	cpc	r19, r1
    1850:	81 f0       	breq	.+32     	; 0x1872 <DIO_u8SetPortDirection+0x68>
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	84 30       	cpi	r24, 0x04	; 4
    1858:	91 05       	cpc	r25, r1
    185a:	81 f0       	breq	.+32     	; 0x187c <DIO_u8SetPortDirection+0x72>
    185c:	14 c0       	rjmp	.+40     	; 0x1886 <DIO_u8SetPortDirection+0x7c>
	{
	case PORT_A :
		DDRA = Copy_u8Direction;
    185e:	ea e3       	ldi	r30, 0x3A	; 58
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	80 83       	st	Z, r24
    1866:	11 c0       	rjmp	.+34     	; 0x188a <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_B :
		DDRB = Copy_u8Direction;
    1868:	e7 e3       	ldi	r30, 0x37	; 55
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	80 83       	st	Z, r24
    1870:	0c c0       	rjmp	.+24     	; 0x188a <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_C :
		DDRC = Copy_u8Direction;
    1872:	e4 e3       	ldi	r30, 0x34	; 52
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	80 83       	st	Z, r24
    187a:	07 c0       	rjmp	.+14     	; 0x188a <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_D :
		DDRD = Copy_u8Direction;
    187c:	e1 e3       	ldi	r30, 0x31	; 49
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	80 83       	st	Z, r24
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_u8SetPortDirection+0x80>
		break;
	default :
		Local_u8ErrorState =1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	28 97       	sbiw	r28, 0x08	; 8
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	8a 83       	std	Y+2, r24	; 0x02
    18b2:	6b 83       	std	Y+3, r22	; 0x03
    18b4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    18b6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin>7)
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 30       	cpi	r24, 0x08	; 8
    18bc:	10 f0       	brcs	.+4      	; 0x18c2 <DIO_u8SetPinValue+0x26>
		Local_u8ErrorState =1;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Value == LOW)
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	88 23       	and	r24, r24
    18c6:	09 f0       	breq	.+2      	; 0x18ca <DIO_u8SetPinValue+0x2e>
    18c8:	78 c0       	rjmp	.+240    	; 0x19ba <DIO_u8SetPinValue+0x11e>
	{
		switch (Copy_u8Port)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	38 87       	std	Y+8, r19	; 0x08
    18d2:	2f 83       	std	Y+7, r18	; 0x07
    18d4:	8f 81       	ldd	r24, Y+7	; 0x07
    18d6:	98 85       	ldd	r25, Y+8	; 0x08
    18d8:	82 30       	cpi	r24, 0x02	; 2
    18da:	91 05       	cpc	r25, r1
    18dc:	61 f1       	breq	.+88     	; 0x1936 <DIO_u8SetPinValue+0x9a>
    18de:	2f 81       	ldd	r18, Y+7	; 0x07
    18e0:	38 85       	ldd	r19, Y+8	; 0x08
    18e2:	23 30       	cpi	r18, 0x03	; 3
    18e4:	31 05       	cpc	r19, r1
    18e6:	34 f4       	brge	.+12     	; 0x18f4 <DIO_u8SetPinValue+0x58>
    18e8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ea:	98 85       	ldd	r25, Y+8	; 0x08
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	69 f0       	breq	.+26     	; 0x190c <DIO_u8SetPinValue+0x70>
    18f2:	60 c0       	rjmp	.+192    	; 0x19b4 <DIO_u8SetPinValue+0x118>
    18f4:	2f 81       	ldd	r18, Y+7	; 0x07
    18f6:	38 85       	ldd	r19, Y+8	; 0x08
    18f8:	23 30       	cpi	r18, 0x03	; 3
    18fa:	31 05       	cpc	r19, r1
    18fc:	89 f1       	breq	.+98     	; 0x1960 <DIO_u8SetPinValue+0xc4>
    18fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1900:	98 85       	ldd	r25, Y+8	; 0x08
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	91 05       	cpc	r25, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <DIO_u8SetPinValue+0x6e>
    1908:	40 c0       	rjmp	.+128    	; 0x198a <DIO_u8SetPinValue+0xee>
    190a:	54 c0       	rjmp	.+168    	; 0x19b4 <DIO_u8SetPinValue+0x118>
		{
		case PORT_A :
			CLR_BIT(PORTA,Copy_u8Pin);
    190c:	ab e3       	ldi	r26, 0x3B	; 59
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	eb e3       	ldi	r30, 0x3B	; 59
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <DIO_u8SetPinValue+0x8e>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <DIO_u8SetPinValue+0x8a>
    192e:	80 95       	com	r24
    1930:	84 23       	and	r24, r20
    1932:	8c 93       	st	X, r24
    1934:	bb c0       	rjmp	.+374    	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		case PORT_B :
			CLR_BIT(PORTB,Copy_u8Pin);
    1936:	a8 e3       	ldi	r26, 0x38	; 56
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e8 e3       	ldi	r30, 0x38	; 56
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	48 2f       	mov	r20, r24
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_u8SetPinValue+0xb8>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_u8SetPinValue+0xb4>
    1958:	80 95       	com	r24
    195a:	84 23       	and	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	a6 c0       	rjmp	.+332    	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		case PORT_C :
			CLR_BIT(PORTC,Copy_u8Pin);
    1960:	a5 e3       	ldi	r26, 0x35	; 53
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e5 e3       	ldi	r30, 0x35	; 53
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_u8SetPinValue+0xe2>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_u8SetPinValue+0xde>
    1982:	80 95       	com	r24
    1984:	84 23       	and	r24, r20
    1986:	8c 93       	st	X, r24
    1988:	91 c0       	rjmp	.+290    	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		case PORT_D :
			CLR_BIT(PORTD,Copy_u8Pin);
    198a:	a2 e3       	ldi	r26, 0x32	; 50
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_u8SetPinValue+0x10c>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <DIO_u8SetPinValue+0x108>
    19ac:	80 95       	com	r24
    19ae:	84 23       	and	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	7c c0       	rjmp	.+248    	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	79 c0       	rjmp	.+242    	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		}
	}
	else if(Copy_u8Value == HIGH)
    19ba:	8c 81       	ldd	r24, Y+4	; 0x04
    19bc:	81 30       	cpi	r24, 0x01	; 1
    19be:	09 f0       	breq	.+2      	; 0x19c2 <DIO_u8SetPinValue+0x126>
    19c0:	73 c0       	rjmp	.+230    	; 0x1aa8 <DIO_u8SetPinValue+0x20c>
	{
		switch (Copy_u8Port)
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	3e 83       	std	Y+6, r19	; 0x06
    19ca:	2d 83       	std	Y+5, r18	; 0x05
    19cc:	8d 81       	ldd	r24, Y+5	; 0x05
    19ce:	9e 81       	ldd	r25, Y+6	; 0x06
    19d0:	82 30       	cpi	r24, 0x02	; 2
    19d2:	91 05       	cpc	r25, r1
    19d4:	51 f1       	breq	.+84     	; 0x1a2a <DIO_u8SetPinValue+0x18e>
    19d6:	2d 81       	ldd	r18, Y+5	; 0x05
    19d8:	3e 81       	ldd	r19, Y+6	; 0x06
    19da:	23 30       	cpi	r18, 0x03	; 3
    19dc:	31 05       	cpc	r19, r1
    19de:	34 f4       	brge	.+12     	; 0x19ec <DIO_u8SetPinValue+0x150>
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	61 f0       	breq	.+24     	; 0x1a02 <DIO_u8SetPinValue+0x166>
    19ea:	5b c0       	rjmp	.+182    	; 0x1aa2 <DIO_u8SetPinValue+0x206>
    19ec:	2d 81       	ldd	r18, Y+5	; 0x05
    19ee:	3e 81       	ldd	r19, Y+6	; 0x06
    19f0:	23 30       	cpi	r18, 0x03	; 3
    19f2:	31 05       	cpc	r19, r1
    19f4:	71 f1       	breq	.+92     	; 0x1a52 <DIO_u8SetPinValue+0x1b6>
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	84 30       	cpi	r24, 0x04	; 4
    19fc:	91 05       	cpc	r25, r1
    19fe:	e9 f1       	breq	.+122    	; 0x1a7a <DIO_u8SetPinValue+0x1de>
    1a00:	50 c0       	rjmp	.+160    	; 0x1aa2 <DIO_u8SetPinValue+0x206>
		{
		case PORT_A :
			SET_BIT(PORTA,Copy_u8Pin);
    1a02:	ab e3       	ldi	r26, 0x3B	; 59
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	eb e3       	ldi	r30, 0x3B	; 59
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <DIO_u8SetPinValue+0x184>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <DIO_u8SetPinValue+0x180>
    1a24:	84 2b       	or	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	41 c0       	rjmp	.+130    	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		case PORT_B :
			SET_BIT(PORTB,Copy_u8Pin);
    1a2a:	a8 e3       	ldi	r26, 0x38	; 56
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e8 e3       	ldi	r30, 0x38	; 56
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <DIO_u8SetPinValue+0x1ac>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <DIO_u8SetPinValue+0x1a8>
    1a4c:	84 2b       	or	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	2d c0       	rjmp	.+90     	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		case PORT_C :
			SET_BIT(PORTC,Copy_u8Pin);
    1a52:	a5 e3       	ldi	r26, 0x35	; 53
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e5 e3       	ldi	r30, 0x35	; 53
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 2e       	mov	r0, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <DIO_u8SetPinValue+0x1d4>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <DIO_u8SetPinValue+0x1d0>
    1a74:	84 2b       	or	r24, r20
    1a76:	8c 93       	st	X, r24
    1a78:	19 c0       	rjmp	.+50     	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		case PORT_D :
			SET_BIT(PORTD,Copy_u8Pin);
    1a7a:	a2 e3       	ldi	r26, 0x32	; 50
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e2 e3       	ldi	r30, 0x32	; 50
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_u8SetPinValue+0x1fc>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <DIO_u8SetPinValue+0x1f8>
    1a9c:	84 2b       	or	r24, r20
    1a9e:	8c 93       	st	X, r24
    1aa0:	05 c0       	rjmp	.+10     	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_u8SetPinValue+0x210>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aae:	28 96       	adiw	r28, 0x08	; 8
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <DIO_u8SetPortValue+0x6>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <DIO_u8SetPortValue+0x8>
    1ac8:	0f 92       	push	r0
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	8a 83       	std	Y+2, r24	; 0x02
    1ad0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	3d 83       	std	Y+5, r19	; 0x05
    1adc:	2c 83       	std	Y+4, r18	; 0x04
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	d9 f0       	breq	.+54     	; 0x1b1e <DIO_u8SetPortValue+0x5e>
    1ae8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aea:	3d 81       	ldd	r19, Y+5	; 0x05
    1aec:	23 30       	cpi	r18, 0x03	; 3
    1aee:	31 05       	cpc	r19, r1
    1af0:	34 f4       	brge	.+12     	; 0x1afe <DIO_u8SetPortValue+0x3e>
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	91 05       	cpc	r25, r1
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <DIO_u8SetPortValue+0x54>
    1afc:	1f c0       	rjmp	.+62     	; 0x1b3c <DIO_u8SetPortValue+0x7c>
    1afe:	2c 81       	ldd	r18, Y+4	; 0x04
    1b00:	3d 81       	ldd	r19, Y+5	; 0x05
    1b02:	23 30       	cpi	r18, 0x03	; 3
    1b04:	31 05       	cpc	r19, r1
    1b06:	81 f0       	breq	.+32     	; 0x1b28 <DIO_u8SetPortValue+0x68>
    1b08:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0c:	84 30       	cpi	r24, 0x04	; 4
    1b0e:	91 05       	cpc	r25, r1
    1b10:	81 f0       	breq	.+32     	; 0x1b32 <DIO_u8SetPortValue+0x72>
    1b12:	14 c0       	rjmp	.+40     	; 0x1b3c <DIO_u8SetPortValue+0x7c>
	{
	case PORT_A :
		PORTA = Copy_u8Value;
    1b14:	eb e3       	ldi	r30, 0x3B	; 59
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	80 83       	st	Z, r24
    1b1c:	11 c0       	rjmp	.+34     	; 0x1b40 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_B :
		PORTB = Copy_u8Value ;
    1b1e:	e8 e3       	ldi	r30, 0x38	; 56
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	80 83       	st	Z, r24
    1b26:	0c c0       	rjmp	.+24     	; 0x1b40 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_C :
		PORTC = Copy_u8Value ;
    1b28:	e5 e3       	ldi	r30, 0x35	; 53
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	80 83       	st	Z, r24
    1b30:	07 c0       	rjmp	.+14     	; 0x1b40 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_D :
		PORTD = Copy_u8Value ;
    1b32:	e2 e3       	ldi	r30, 0x32	; 50
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	80 83       	st	Z, r24
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <DIO_u8SetPortValue+0x80>
		break;

	default :

		Local_u8ErrorState =1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	27 97       	sbiw	r28, 0x07	; 7
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	de bf       	out	0x3e, r29	; 62
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	cd bf       	out	0x3d, r28	; 61
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	6b 83       	std	Y+3, r22	; 0x03
    1b6a:	5d 83       	std	Y+5, r21	; 0x05
    1b6c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Value == NULL) || (Copy_u8Pin > 7))
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	9d 81       	ldd	r25, Y+5	; 0x05
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	19 f0       	breq	.+6      	; 0x1b7e <DIO_u8GetPinValue+0x2c>
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	88 30       	cpi	r24, 0x08	; 8
    1b7c:	10 f0       	brcs	.+4      	; 0x1b82 <DIO_u8GetPinValue+0x30>
		Local_u8ErrorState =1;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Port)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3f 83       	std	Y+7, r19	; 0x07
    1b8a:	2e 83       	std	Y+6, r18	; 0x06
    1b8c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b8e:	5f 81       	ldd	r21, Y+7	; 0x07
    1b90:	42 30       	cpi	r20, 0x02	; 2
    1b92:	51 05       	cpc	r21, r1
    1b94:	59 f1       	breq	.+86     	; 0x1bec <DIO_u8GetPinValue+0x9a>
    1b96:	8e 81       	ldd	r24, Y+6	; 0x06
    1b98:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9a:	83 30       	cpi	r24, 0x03	; 3
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	34 f4       	brge	.+12     	; 0x1bac <DIO_u8GetPinValue+0x5a>
    1ba0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ba2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba4:	21 30       	cpi	r18, 0x01	; 1
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	69 f0       	breq	.+26     	; 0x1bc4 <DIO_u8GetPinValue+0x72>
    1baa:	5c c0       	rjmp	.+184    	; 0x1c64 <DIO_u8GetPinValue+0x112>
    1bac:	4e 81       	ldd	r20, Y+6	; 0x06
    1bae:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb0:	43 30       	cpi	r20, 0x03	; 3
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	79 f1       	breq	.+94     	; 0x1c14 <DIO_u8GetPinValue+0xc2>
    1bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bba:	84 30       	cpi	r24, 0x04	; 4
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <DIO_u8GetPinValue+0x70>
    1bc0:	3d c0       	rjmp	.+122    	; 0x1c3c <DIO_u8GetPinValue+0xea>
    1bc2:	50 c0       	rjmp	.+160    	; 0x1c64 <DIO_u8GetPinValue+0x112>
	{
	case PORT_A :
		*Copy_u8Value = GET_BIT(PINA,Copy_u8Pin);
    1bc4:	e9 e3       	ldi	r30, 0x39	; 57
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	88 2f       	mov	r24, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a9 01       	movw	r20, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <DIO_u8GetPinValue+0x8a>
    1bd8:	55 95       	asr	r21
    1bda:	47 95       	ror	r20
    1bdc:	8a 95       	dec	r24
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <DIO_u8GetPinValue+0x86>
    1be0:	ca 01       	movw	r24, r20
    1be2:	81 70       	andi	r24, 0x01	; 1
    1be4:	ec 81       	ldd	r30, Y+4	; 0x04
    1be6:	fd 81       	ldd	r31, Y+5	; 0x05
    1be8:	80 83       	st	Z, r24
    1bea:	3e c0       	rjmp	.+124    	; 0x1c68 <DIO_u8GetPinValue+0x116>
		break;
	case PORT_B :
		*Copy_u8Value = GET_BIT(PINB,Copy_u8Pin);
    1bec:	e6 e3       	ldi	r30, 0x36	; 54
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a9 01       	movw	r20, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_u8GetPinValue+0xb2>
    1c00:	55 95       	asr	r21
    1c02:	47 95       	ror	r20
    1c04:	8a 95       	dec	r24
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_u8GetPinValue+0xae>
    1c08:	ca 01       	movw	r24, r20
    1c0a:	81 70       	andi	r24, 0x01	; 1
    1c0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c10:	80 83       	st	Z, r24
    1c12:	2a c0       	rjmp	.+84     	; 0x1c68 <DIO_u8GetPinValue+0x116>
		break;
	case PORT_C :
		*Copy_u8Value = GET_BIT(PINC,Copy_u8Pin);
    1c14:	e3 e3       	ldi	r30, 0x33	; 51
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_u8GetPinValue+0xda>
    1c28:	55 95       	asr	r21
    1c2a:	47 95       	ror	r20
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_u8GetPinValue+0xd6>
    1c30:	ca 01       	movw	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	ec 81       	ldd	r30, Y+4	; 0x04
    1c36:	fd 81       	ldd	r31, Y+5	; 0x05
    1c38:	80 83       	st	Z, r24
    1c3a:	16 c0       	rjmp	.+44     	; 0x1c68 <DIO_u8GetPinValue+0x116>
		break;
	case PORT_D :
		*Copy_u8Value = GET_BIT(PIND,Copy_u8Pin);
    1c3c:	e0 e3       	ldi	r30, 0x30	; 48
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	88 2f       	mov	r24, r24
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	a9 01       	movw	r20, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <DIO_u8GetPinValue+0x102>
    1c50:	55 95       	asr	r21
    1c52:	47 95       	ror	r20
    1c54:	8a 95       	dec	r24
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <DIO_u8GetPinValue+0xfe>
    1c58:	ca 01       	movw	r24, r20
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c5e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c60:	80 83       	st	Z, r24
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <DIO_u8GetPinValue+0x116>
		break;
	default:
		Local_u8ErrorState =1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6a:	27 96       	adiw	r28, 0x07	; 7
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8* Copy_u8Value)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <DIO_u8GetPortValue+0x6>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <DIO_u8GetPortValue+0x8>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <DIO_u8GetPortValue+0xa>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
    1c8c:	7c 83       	std	Y+4, r23	; 0x04
    1c8e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    1c90:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3e 83       	std	Y+6, r19	; 0x06
    1c9a:	2d 83       	std	Y+5, r18	; 0x05
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca0:	82 30       	cpi	r24, 0x02	; 2
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	e9 f0       	breq	.+58     	; 0x1ce0 <DIO_u8GetPortValue+0x64>
    1ca6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ca8:	3e 81       	ldd	r19, Y+6	; 0x06
    1caa:	23 30       	cpi	r18, 0x03	; 3
    1cac:	31 05       	cpc	r19, r1
    1cae:	34 f4       	brge	.+12     	; 0x1cbc <DIO_u8GetPortValue+0x40>
    1cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	61 f0       	breq	.+24     	; 0x1cd2 <DIO_u8GetPortValue+0x56>
    1cba:	27 c0       	rjmp	.+78     	; 0x1d0a <DIO_u8GetPortValue+0x8e>
    1cbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1cc0:	23 30       	cpi	r18, 0x03	; 3
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	a1 f0       	breq	.+40     	; 0x1cee <DIO_u8GetPortValue+0x72>
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	84 30       	cpi	r24, 0x04	; 4
    1ccc:	91 05       	cpc	r25, r1
    1cce:	b1 f0       	breq	.+44     	; 0x1cfc <DIO_u8GetPortValue+0x80>
    1cd0:	1c c0       	rjmp	.+56     	; 0x1d0a <DIO_u8GetPortValue+0x8e>
	{
	case PORT_A :
		*Copy_u8Value = PINA ;
    1cd2:	e9 e3       	ldi	r30, 0x39	; 57
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cda:	fc 81       	ldd	r31, Y+4	; 0x04
    1cdc:	80 83       	st	Z, r24
    1cde:	17 c0       	rjmp	.+46     	; 0x1d0e <DIO_u8GetPortValue+0x92>
		break;
	case PORT_B :
		*Copy_u8Value = PINB ;
    1ce0:	e6 e3       	ldi	r30, 0x36	; 54
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce8:	fc 81       	ldd	r31, Y+4	; 0x04
    1cea:	80 83       	st	Z, r24
    1cec:	10 c0       	rjmp	.+32     	; 0x1d0e <DIO_u8GetPortValue+0x92>
		break;
	case PORT_C :
		*Copy_u8Value = PINC ;
    1cee:	e3 e3       	ldi	r30, 0x33	; 51
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cf6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf8:	80 83       	st	Z, r24
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <DIO_u8GetPortValue+0x92>
		break;
	case PORT_D :
		*Copy_u8Value = PIND ;
    1cfc:	e0 e3       	ldi	r30, 0x30	; 48
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	eb 81       	ldd	r30, Y+3	; 0x03
    1d04:	fc 81       	ldd	r31, Y+4	; 0x04
    1d06:	80 83       	st	Z, r24
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_u8GetPortValue+0x92>
		break;
	default :
		Local_u8ErrorState =1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState ;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d10:	26 96       	adiw	r28, 0x06	; 6
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <main>:
#include "COTS/1-MCAL/2-EXTI/EXTI_interface.h"
#include "COTS/1-MCAL/3-GIE/GIE_interface.h"
u8 counter =0;
u8 x,y,z;
void main (void)
{
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	c3 5b       	subi	r28, 0xB3	; 179
    1d30:	d0 40       	sbci	r29, 0x00	; 0
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDirection(PORT_D, PIN2, INPUT);
    1d3c:	84 e0       	ldi	r24, 0x04	; 4
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_D, PIN3, INPUT);
    1d46:	84 e0       	ldi	r24, 0x04	; 4
    1d48:	63 e0       	ldi	r22, 0x03	; 3
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_D, PIN4, INPUT);
    1d50:	84 e0       	ldi	r24, 0x04	; 4
    1d52:	64 e0       	ldi	r22, 0x04	; 4
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(PORT_D, PIN2, HIGH);
    1d5a:	84 e0       	ldi	r24, 0x04	; 4
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_D, PIN3, HIGH);
    1d64:	84 e0       	ldi	r24, 0x04	; 4
    1d66:	63 e0       	ldi	r22, 0x03	; 3
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_D, PIN4, HIGH);
    1d6e:	84 e0       	ldi	r24, 0x04	; 4
    1d70:	64 e0       	ldi	r22, 0x04	; 4
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	DIO_u8SetPortDirection(PORT_A, 0xff);
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	6f ef       	ldi	r22, 0xFF	; 255
    1d7c:	0e 94 05 0c 	call	0x180a	; 0x180a <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(PORT_B, PIN0, OUTPUT);
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_B, PIN1, OUTPUT);
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_B, PIN2, OUTPUT);
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	62 e0       	ldi	r22, 0x02	; 2
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_B, PIN3, OUTPUT);
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	63 e0       	ldi	r22, 0x03	; 3
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_B, PIN4, OUTPUT);
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	64 e0       	ldi	r22, 0x04	; 4
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	LCD_voidInit();
    1db2:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <LCD_voidInit>

	u8 Hamoksha[8]={0b01110,0b00100,0b11111,0b10101,0b10101,0b00100,0b01010,0b10001};
    1db6:	ce 01       	movw	r24, r28
    1db8:	83 57       	subi	r24, 0x73	; 115
    1dba:	9f 4f       	sbci	r25, 0xFF	; 255
    1dbc:	cb 55       	subi	r28, 0x5B	; 91
    1dbe:	df 4f       	sbci	r29, 0xFF	; 255
    1dc0:	99 83       	std	Y+1, r25	; 0x01
    1dc2:	88 83       	st	Y, r24
    1dc4:	c5 5a       	subi	r28, 0xA5	; 165
    1dc6:	d0 40       	sbci	r29, 0x00	; 0
    1dc8:	83 ed       	ldi	r24, 0xD3	; 211
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	c9 55       	subi	r28, 0x59	; 89
    1dce:	df 4f       	sbci	r29, 0xFF	; 255
    1dd0:	99 83       	std	Y+1, r25	; 0x01
    1dd2:	88 83       	st	Y, r24
    1dd4:	c7 5a       	subi	r28, 0xA7	; 167
    1dd6:	d0 40       	sbci	r29, 0x00	; 0
    1dd8:	98 e0       	ldi	r25, 0x08	; 8
    1dda:	c7 55       	subi	r28, 0x57	; 87
    1ddc:	df 4f       	sbci	r29, 0xFF	; 255
    1dde:	98 83       	st	Y, r25
    1de0:	c9 5a       	subi	r28, 0xA9	; 169
    1de2:	d0 40       	sbci	r29, 0x00	; 0
    1de4:	c9 55       	subi	r28, 0x59	; 89
    1de6:	df 4f       	sbci	r29, 0xFF	; 255
    1de8:	e8 81       	ld	r30, Y
    1dea:	f9 81       	ldd	r31, Y+1	; 0x01
    1dec:	c7 5a       	subi	r28, 0xA7	; 167
    1dee:	d0 40       	sbci	r29, 0x00	; 0
    1df0:	00 80       	ld	r0, Z
    1df2:	c9 55       	subi	r28, 0x59	; 89
    1df4:	df 4f       	sbci	r29, 0xFF	; 255
    1df6:	88 81       	ld	r24, Y
    1df8:	99 81       	ldd	r25, Y+1	; 0x01
    1dfa:	c7 5a       	subi	r28, 0xA7	; 167
    1dfc:	d0 40       	sbci	r29, 0x00	; 0
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	c9 55       	subi	r28, 0x59	; 89
    1e02:	df 4f       	sbci	r29, 0xFF	; 255
    1e04:	99 83       	std	Y+1, r25	; 0x01
    1e06:	88 83       	st	Y, r24
    1e08:	c7 5a       	subi	r28, 0xA7	; 167
    1e0a:	d0 40       	sbci	r29, 0x00	; 0
    1e0c:	cb 55       	subi	r28, 0x5B	; 91
    1e0e:	df 4f       	sbci	r29, 0xFF	; 255
    1e10:	e8 81       	ld	r30, Y
    1e12:	f9 81       	ldd	r31, Y+1	; 0x01
    1e14:	c5 5a       	subi	r28, 0xA5	; 165
    1e16:	d0 40       	sbci	r29, 0x00	; 0
    1e18:	00 82       	st	Z, r0
    1e1a:	cb 55       	subi	r28, 0x5B	; 91
    1e1c:	df 4f       	sbci	r29, 0xFF	; 255
    1e1e:	88 81       	ld	r24, Y
    1e20:	99 81       	ldd	r25, Y+1	; 0x01
    1e22:	c5 5a       	subi	r28, 0xA5	; 165
    1e24:	d0 40       	sbci	r29, 0x00	; 0
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	cb 55       	subi	r28, 0x5B	; 91
    1e2a:	df 4f       	sbci	r29, 0xFF	; 255
    1e2c:	99 83       	std	Y+1, r25	; 0x01
    1e2e:	88 83       	st	Y, r24
    1e30:	c5 5a       	subi	r28, 0xA5	; 165
    1e32:	d0 40       	sbci	r29, 0x00	; 0
    1e34:	c7 55       	subi	r28, 0x57	; 87
    1e36:	df 4f       	sbci	r29, 0xFF	; 255
    1e38:	98 81       	ld	r25, Y
    1e3a:	c9 5a       	subi	r28, 0xA9	; 169
    1e3c:	d0 40       	sbci	r29, 0x00	; 0
    1e3e:	91 50       	subi	r25, 0x01	; 1
    1e40:	c7 55       	subi	r28, 0x57	; 87
    1e42:	df 4f       	sbci	r29, 0xFF	; 255
    1e44:	98 83       	st	Y, r25
    1e46:	c9 5a       	subi	r28, 0xA9	; 169
    1e48:	d0 40       	sbci	r29, 0x00	; 0
    1e4a:	c7 55       	subi	r28, 0x57	; 87
    1e4c:	df 4f       	sbci	r29, 0xFF	; 255
    1e4e:	e8 81       	ld	r30, Y
    1e50:	c9 5a       	subi	r28, 0xA9	; 169
    1e52:	d0 40       	sbci	r29, 0x00	; 0
    1e54:	ee 23       	and	r30, r30
    1e56:	31 f6       	brne	.-116    	; 0x1de4 <main+0xc2>
	u8 Side1[8]={0b01110,0b01110,0b00100,0b00100,0b00100,0b00100,0b00100,0b00100};
    1e58:	ce 01       	movw	r24, r28
    1e5a:	8b 56       	subi	r24, 0x6B	; 107
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	c6 55       	subi	r28, 0x56	; 86
    1e60:	df 4f       	sbci	r29, 0xFF	; 255
    1e62:	99 83       	std	Y+1, r25	; 0x01
    1e64:	88 83       	st	Y, r24
    1e66:	ca 5a       	subi	r28, 0xAA	; 170
    1e68:	d0 40       	sbci	r29, 0x00	; 0
    1e6a:	8b ec       	ldi	r24, 0xCB	; 203
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	c4 55       	subi	r28, 0x54	; 84
    1e70:	df 4f       	sbci	r29, 0xFF	; 255
    1e72:	99 83       	std	Y+1, r25	; 0x01
    1e74:	88 83       	st	Y, r24
    1e76:	cc 5a       	subi	r28, 0xAC	; 172
    1e78:	d0 40       	sbci	r29, 0x00	; 0
    1e7a:	98 e0       	ldi	r25, 0x08	; 8
    1e7c:	c2 55       	subi	r28, 0x52	; 82
    1e7e:	df 4f       	sbci	r29, 0xFF	; 255
    1e80:	98 83       	st	Y, r25
    1e82:	ce 5a       	subi	r28, 0xAE	; 174
    1e84:	d0 40       	sbci	r29, 0x00	; 0
    1e86:	c4 55       	subi	r28, 0x54	; 84
    1e88:	df 4f       	sbci	r29, 0xFF	; 255
    1e8a:	e8 81       	ld	r30, Y
    1e8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e8e:	cc 5a       	subi	r28, 0xAC	; 172
    1e90:	d0 40       	sbci	r29, 0x00	; 0
    1e92:	00 80       	ld	r0, Z
    1e94:	c4 55       	subi	r28, 0x54	; 84
    1e96:	df 4f       	sbci	r29, 0xFF	; 255
    1e98:	88 81       	ld	r24, Y
    1e9a:	99 81       	ldd	r25, Y+1	; 0x01
    1e9c:	cc 5a       	subi	r28, 0xAC	; 172
    1e9e:	d0 40       	sbci	r29, 0x00	; 0
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	c4 55       	subi	r28, 0x54	; 84
    1ea4:	df 4f       	sbci	r29, 0xFF	; 255
    1ea6:	99 83       	std	Y+1, r25	; 0x01
    1ea8:	88 83       	st	Y, r24
    1eaa:	cc 5a       	subi	r28, 0xAC	; 172
    1eac:	d0 40       	sbci	r29, 0x00	; 0
    1eae:	c6 55       	subi	r28, 0x56	; 86
    1eb0:	df 4f       	sbci	r29, 0xFF	; 255
    1eb2:	e8 81       	ld	r30, Y
    1eb4:	f9 81       	ldd	r31, Y+1	; 0x01
    1eb6:	ca 5a       	subi	r28, 0xAA	; 170
    1eb8:	d0 40       	sbci	r29, 0x00	; 0
    1eba:	00 82       	st	Z, r0
    1ebc:	c6 55       	subi	r28, 0x56	; 86
    1ebe:	df 4f       	sbci	r29, 0xFF	; 255
    1ec0:	88 81       	ld	r24, Y
    1ec2:	99 81       	ldd	r25, Y+1	; 0x01
    1ec4:	ca 5a       	subi	r28, 0xAA	; 170
    1ec6:	d0 40       	sbci	r29, 0x00	; 0
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	c6 55       	subi	r28, 0x56	; 86
    1ecc:	df 4f       	sbci	r29, 0xFF	; 255
    1ece:	99 83       	std	Y+1, r25	; 0x01
    1ed0:	88 83       	st	Y, r24
    1ed2:	ca 5a       	subi	r28, 0xAA	; 170
    1ed4:	d0 40       	sbci	r29, 0x00	; 0
    1ed6:	c2 55       	subi	r28, 0x52	; 82
    1ed8:	df 4f       	sbci	r29, 0xFF	; 255
    1eda:	98 81       	ld	r25, Y
    1edc:	ce 5a       	subi	r28, 0xAE	; 174
    1ede:	d0 40       	sbci	r29, 0x00	; 0
    1ee0:	91 50       	subi	r25, 0x01	; 1
    1ee2:	c2 55       	subi	r28, 0x52	; 82
    1ee4:	df 4f       	sbci	r29, 0xFF	; 255
    1ee6:	98 83       	st	Y, r25
    1ee8:	ce 5a       	subi	r28, 0xAE	; 174
    1eea:	d0 40       	sbci	r29, 0x00	; 0
    1eec:	c2 55       	subi	r28, 0x52	; 82
    1eee:	df 4f       	sbci	r29, 0xFF	; 255
    1ef0:	e8 81       	ld	r30, Y
    1ef2:	ce 5a       	subi	r28, 0xAE	; 174
    1ef4:	d0 40       	sbci	r29, 0x00	; 0
    1ef6:	ee 23       	and	r30, r30
    1ef8:	31 f6       	brne	.-116    	; 0x1e86 <main+0x164>
	u8 Side2[8]={0b01110,0b01110,0b00100,0b01100,0b10110,0b00100,0b01010,0b10001};
    1efa:	ce 01       	movw	r24, r28
    1efc:	83 56       	subi	r24, 0x63	; 99
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	c1 55       	subi	r28, 0x51	; 81
    1f02:	df 4f       	sbci	r29, 0xFF	; 255
    1f04:	99 83       	std	Y+1, r25	; 0x01
    1f06:	88 83       	st	Y, r24
    1f08:	cf 5a       	subi	r28, 0xAF	; 175
    1f0a:	d0 40       	sbci	r29, 0x00	; 0
    1f0c:	83 ec       	ldi	r24, 0xC3	; 195
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	cf 54       	subi	r28, 0x4F	; 79
    1f12:	df 4f       	sbci	r29, 0xFF	; 255
    1f14:	99 83       	std	Y+1, r25	; 0x01
    1f16:	88 83       	st	Y, r24
    1f18:	c1 5b       	subi	r28, 0xB1	; 177
    1f1a:	d0 40       	sbci	r29, 0x00	; 0
    1f1c:	98 e0       	ldi	r25, 0x08	; 8
    1f1e:	cd 54       	subi	r28, 0x4D	; 77
    1f20:	df 4f       	sbci	r29, 0xFF	; 255
    1f22:	98 83       	st	Y, r25
    1f24:	c3 5b       	subi	r28, 0xB3	; 179
    1f26:	d0 40       	sbci	r29, 0x00	; 0
    1f28:	cf 54       	subi	r28, 0x4F	; 79
    1f2a:	df 4f       	sbci	r29, 0xFF	; 255
    1f2c:	e8 81       	ld	r30, Y
    1f2e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f30:	c1 5b       	subi	r28, 0xB1	; 177
    1f32:	d0 40       	sbci	r29, 0x00	; 0
    1f34:	00 80       	ld	r0, Z
    1f36:	cf 54       	subi	r28, 0x4F	; 79
    1f38:	df 4f       	sbci	r29, 0xFF	; 255
    1f3a:	88 81       	ld	r24, Y
    1f3c:	99 81       	ldd	r25, Y+1	; 0x01
    1f3e:	c1 5b       	subi	r28, 0xB1	; 177
    1f40:	d0 40       	sbci	r29, 0x00	; 0
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	cf 54       	subi	r28, 0x4F	; 79
    1f46:	df 4f       	sbci	r29, 0xFF	; 255
    1f48:	99 83       	std	Y+1, r25	; 0x01
    1f4a:	88 83       	st	Y, r24
    1f4c:	c1 5b       	subi	r28, 0xB1	; 177
    1f4e:	d0 40       	sbci	r29, 0x00	; 0
    1f50:	c1 55       	subi	r28, 0x51	; 81
    1f52:	df 4f       	sbci	r29, 0xFF	; 255
    1f54:	e8 81       	ld	r30, Y
    1f56:	f9 81       	ldd	r31, Y+1	; 0x01
    1f58:	cf 5a       	subi	r28, 0xAF	; 175
    1f5a:	d0 40       	sbci	r29, 0x00	; 0
    1f5c:	00 82       	st	Z, r0
    1f5e:	c1 55       	subi	r28, 0x51	; 81
    1f60:	df 4f       	sbci	r29, 0xFF	; 255
    1f62:	88 81       	ld	r24, Y
    1f64:	99 81       	ldd	r25, Y+1	; 0x01
    1f66:	cf 5a       	subi	r28, 0xAF	; 175
    1f68:	d0 40       	sbci	r29, 0x00	; 0
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	c1 55       	subi	r28, 0x51	; 81
    1f6e:	df 4f       	sbci	r29, 0xFF	; 255
    1f70:	99 83       	std	Y+1, r25	; 0x01
    1f72:	88 83       	st	Y, r24
    1f74:	cf 5a       	subi	r28, 0xAF	; 175
    1f76:	d0 40       	sbci	r29, 0x00	; 0
    1f78:	cd 54       	subi	r28, 0x4D	; 77
    1f7a:	df 4f       	sbci	r29, 0xFF	; 255
    1f7c:	98 81       	ld	r25, Y
    1f7e:	c3 5b       	subi	r28, 0xB3	; 179
    1f80:	d0 40       	sbci	r29, 0x00	; 0
    1f82:	91 50       	subi	r25, 0x01	; 1
    1f84:	cd 54       	subi	r28, 0x4D	; 77
    1f86:	df 4f       	sbci	r29, 0xFF	; 255
    1f88:	98 83       	st	Y, r25
    1f8a:	c3 5b       	subi	r28, 0xB3	; 179
    1f8c:	d0 40       	sbci	r29, 0x00	; 0
    1f8e:	cd 54       	subi	r28, 0x4D	; 77
    1f90:	df 4f       	sbci	r29, 0xFF	; 255
    1f92:	e8 81       	ld	r30, Y
    1f94:	c3 5b       	subi	r28, 0xB3	; 179
    1f96:	d0 40       	sbci	r29, 0x00	; 0
    1f98:	ee 23       	and	r30, r30
    1f9a:	31 f6       	brne	.-116    	; 0x1f28 <main+0x206>

	DIO_u8SetPinDirection(PORT_C, PIN0, OUTPUT);
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_C, PIN1, OUTPUT);
    1fa6:	83 e0       	ldi	r24, 0x03	; 3
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_C, PIN2, OUTPUT);
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	62 e0       	ldi	r22, 0x02	; 2
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORT_C, PIN3, OUTPUT);
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	63 e0       	ldi	r22, 0x03	; 3
    1fbe:	41 e0       	ldi	r20, 0x01	; 1
    1fc0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(PORT_C, PIN0, HIGH);
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_C, PIN1, HIGH);
    1fce:	83 e0       	ldi	r24, 0x03	; 3
    1fd0:	61 e0       	ldi	r22, 0x01	; 1
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_C, PIN2, HIGH);
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	62 e0       	ldi	r22, 0x02	; 2
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PORT_C, PIN3, HIGH);
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	63 e0       	ldi	r22, 0x03	; 3
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
	LCD_voidSendString("LCD Project");
	_delay_ms(1000);
	LCD_voidSendCommand(0b00000001);*/
	while(1)
	{
		LCD_voidGoToXY(0,0);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	0e 94 12 09 	call	0x1224	; 0x1224 <LCD_voidGoToXY>
		LCD_voidSendString("Press : 1 for DC");
    1ff4:	80 e6       	ldi	r24, 0x60	; 96
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_voidSendString>
		LCD_voidGoToXY(1,0);
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	0e 94 12 09 	call	0x1224	; 0x1224 <LCD_voidGoToXY>
		LCD_voidSendString("   2 for Stepper");
    2004:	81 e7       	ldi	r24, 0x71	; 113
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_voidSendString>
		DIO_u8GetPinValue(PORT_D, PIN2, &x);
    200c:	2d ed       	ldi	r18, 0xDD	; 221
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	84 e0       	ldi	r24, 0x04	; 4
    2012:	62 e0       	ldi	r22, 0x02	; 2
    2014:	a9 01       	movw	r20, r18
    2016:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
		DIO_u8GetPinValue(PORT_D, PIN3, &y);
    201a:	2f ed       	ldi	r18, 0xDF	; 223
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	84 e0       	ldi	r24, 0x04	; 4
    2020:	63 e0       	ldi	r22, 0x03	; 3
    2022:	a9 01       	movw	r20, r18
    2024:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
		if(x == 0)
    2028:	80 91 dd 00 	lds	r24, 0x00DD
    202c:	88 23       	and	r24, r24
    202e:	09 f0       	breq	.+2      	; 0x2032 <main+0x310>
    2030:	06 c1       	rjmp	.+524    	; 0x223e <main+0x51c>
		{
			LCD_voidSendCommand(0b00000001);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_voidSendCommand>
			LCD_voidGoToXY(0,0);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	0e 94 12 09 	call	0x1224	; 0x1224 <LCD_voidGoToXY>
			LCD_voidSendString("1:C.W / 2:C.C.W");
    2040:	82 e8       	ldi	r24, 0x82	; 130
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_voidSendString>
			LCD_voidGoToXY(1,0);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	0e 94 12 09 	call	0x1224	; 0x1224 <LCD_voidGoToXY>
			LCD_voidSendString("3:BACK");
    2050:	82 e9       	ldi	r24, 0x92	; 146
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_voidSendString>
    2058:	fe 01       	movw	r30, r28
    205a:	e7 57       	subi	r30, 0x77	; 119
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	aa ef       	ldi	r26, 0xFA	; 250
    2064:	b3 e4       	ldi	r27, 0x43	; 67
    2066:	80 83       	st	Z, r24
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	a2 83       	std	Z+2, r26	; 0x02
    206c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    206e:	8e 01       	movw	r16, r28
    2070:	0b 57       	subi	r16, 0x7B	; 123
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	fe 01       	movw	r30, r28
    2076:	e7 57       	subi	r30, 0x77	; 119
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	f8 01       	movw	r30, r16
    2094:	80 83       	st	Z, r24
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	a2 83       	std	Z+2, r26	; 0x02
    209a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    209c:	fe 01       	movw	r30, r28
    209e:	eb 57       	subi	r30, 0x7B	; 123
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	60 81       	ld	r22, Z
    20a4:	71 81       	ldd	r23, Z+1	; 0x01
    20a6:	82 81       	ldd	r24, Z+2	; 0x02
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	44 f4       	brge	.+16     	; 0x20ca <main+0x3a8>
		__ticks = 1;
    20ba:	fe 01       	movw	r30, r28
    20bc:	ed 57       	subi	r30, 0x7D	; 125
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
    20c8:	64 c0       	rjmp	.+200    	; 0x2192 <main+0x470>
	else if (__tmp > 65535)
    20ca:	fe 01       	movw	r30, r28
    20cc:	eb 57       	subi	r30, 0x7B	; 123
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	3f ef       	ldi	r19, 0xFF	; 255
    20dc:	4f e7       	ldi	r20, 0x7F	; 127
    20de:	57 e4       	ldi	r21, 0x47	; 71
    20e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e4:	18 16       	cp	r1, r24
    20e6:	0c f0       	brlt	.+2      	; 0x20ea <main+0x3c8>
    20e8:	43 c0       	rjmp	.+134    	; 0x2170 <main+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	fe 01       	movw	r30, r28
    20ec:	e7 57       	subi	r30, 0x77	; 119
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8e 01       	movw	r16, r28
    210a:	0d 57       	subi	r16, 0x7D	; 125
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	bc 01       	movw	r22, r24
    2110:	cd 01       	movw	r24, r26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	f8 01       	movw	r30, r16
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
    2120:	1f c0       	rjmp	.+62     	; 0x2160 <main+0x43e>
    2122:	fe 01       	movw	r30, r28
    2124:	ef 57       	subi	r30, 0x7F	; 127
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	88 ec       	ldi	r24, 0xC8	; 200
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	91 83       	std	Z+1, r25	; 0x01
    212e:	80 83       	st	Z, r24
    2130:	fe 01       	movw	r30, r28
    2132:	ef 57       	subi	r30, 0x7F	; 127
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <main+0x418>
    213e:	fe 01       	movw	r30, r28
    2140:	ef 57       	subi	r30, 0x7F	; 127
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2148:	de 01       	movw	r26, r28
    214a:	ad 57       	subi	r26, 0x7D	; 125
    214c:	bf 4f       	sbci	r27, 0xFF	; 255
    214e:	fe 01       	movw	r30, r28
    2150:	ed 57       	subi	r30, 0x7D	; 125
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	91 81       	ldd	r25, Z+1	; 0x01
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	11 96       	adiw	r26, 0x01	; 1
    215c:	9c 93       	st	X, r25
    215e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	fe 01       	movw	r30, r28
    2162:	ed 57       	subi	r30, 0x7D	; 125
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	d1 f6       	brne	.-76     	; 0x2122 <main+0x400>
    216e:	27 c0       	rjmp	.+78     	; 0x21be <main+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	8e 01       	movw	r16, r28
    2172:	0d 57       	subi	r16, 0x7D	; 125
    2174:	1f 4f       	sbci	r17, 0xFF	; 255
    2176:	fe 01       	movw	r30, r28
    2178:	eb 57       	subi	r30, 0x7B	; 123
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	f8 01       	movw	r30, r16
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	de 01       	movw	r26, r28
    2194:	a1 58       	subi	r26, 0x81	; 129
    2196:	bf 4f       	sbci	r27, 0xFF	; 255
    2198:	fe 01       	movw	r30, r28
    219a:	ed 57       	subi	r30, 0x7D	; 125
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	8d 93       	st	X+, r24
    21a4:	9c 93       	st	X, r25
    21a6:	fe 01       	movw	r30, r28
    21a8:	e1 58       	subi	r30, 0x81	; 129
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <main+0x48e>
    21b4:	fe 01       	movw	r30, r28
    21b6:	e1 58       	subi	r30, 0x81	; 129
    21b8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
			_delay_ms(500);
			while(1)
			{
				DIO_u8GetPinValue(PORT_D, PIN2, &x);
    21be:	2d ed       	ldi	r18, 0xDD	; 221
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	84 e0       	ldi	r24, 0x04	; 4
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	a9 01       	movw	r20, r18
    21c8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(PORT_D, PIN3, &y);
    21cc:	2f ed       	ldi	r18, 0xDF	; 223
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	84 e0       	ldi	r24, 0x04	; 4
    21d2:	63 e0       	ldi	r22, 0x03	; 3
    21d4:	a9 01       	movw	r20, r18
    21d6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(PORT_D, PIN4, &z);
    21da:	2e ed       	ldi	r18, 0xDE	; 222
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	84 e0       	ldi	r24, 0x04	; 4
    21e0:	64 e0       	ldi	r22, 0x04	; 4
    21e2:	a9 01       	movw	r20, r18
    21e4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
				if(x == 0)
    21e8:	80 91 dd 00 	lds	r24, 0x00DD
    21ec:	88 23       	and	r24, r24
    21ee:	51 f4       	brne	.+20     	; 0x2204 <main+0x4e2>
				{
					DIO_u8SetPinValue(PORT_B, PIN3, HIGH);
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	63 e0       	ldi	r22, 0x03	; 3
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PORT_B, PIN4, LOW);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	64 e0       	ldi	r22, 0x04	; 4
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
				}
				if(y == 0)
    2204:	80 91 df 00 	lds	r24, 0x00DF
    2208:	88 23       	and	r24, r24
    220a:	51 f4       	brne	.+20     	; 0x2220 <main+0x4fe>
				{
					DIO_u8SetPinValue(PORT_B, PIN3, LOW);
    220c:	82 e0       	ldi	r24, 0x02	; 2
    220e:	63 e0       	ldi	r22, 0x03	; 3
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PORT_B, PIN4, HIGH);
    2216:	82 e0       	ldi	r24, 0x02	; 2
    2218:	64 e0       	ldi	r22, 0x04	; 4
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
				}
				if(z == 0)
    2220:	80 91 de 00 	lds	r24, 0x00DE
    2224:	88 23       	and	r24, r24
    2226:	59 f6       	brne	.-106    	; 0x21be <main+0x49c>
				{
					DIO_u8SetPinValue(PORT_B, PIN3, LOW);
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	63 e0       	ldi	r22, 0x03	; 3
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PORT_B, PIN4, LOW);
    2232:	82 e0       	ldi	r24, 0x02	; 2
    2234:	64 e0       	ldi	r22, 0x04	; 4
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    223c:	d7 ce       	rjmp	.-594    	; 0x1fec <main+0x2ca>
					break;
				}
			}
		}
		else if(y==0)
    223e:	80 91 df 00 	lds	r24, 0x00DF
    2242:	88 23       	and	r24, r24
    2244:	09 f0       	breq	.+2      	; 0x2248 <main+0x526>
    2246:	d2 ce       	rjmp	.-604    	; 0x1fec <main+0x2ca>
    2248:	fe 01       	movw	r30, r28
    224a:	e5 58       	subi	r30, 0x85	; 133
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	aa ef       	ldi	r26, 0xFA	; 250
    2254:	b3 e4       	ldi	r27, 0x43	; 67
    2256:	80 83       	st	Z, r24
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	a2 83       	std	Z+2, r26	; 0x02
    225c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225e:	8e 01       	movw	r16, r28
    2260:	09 58       	subi	r16, 0x89	; 137
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	e5 58       	subi	r30, 0x85	; 133
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	4a ef       	ldi	r20, 0xFA	; 250
    2278:	54 e4       	ldi	r21, 0x44	; 68
    227a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	f8 01       	movw	r30, r16
    2284:	80 83       	st	Z, r24
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	a2 83       	std	Z+2, r26	; 0x02
    228a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    228c:	fe 01       	movw	r30, r28
    228e:	e9 58       	subi	r30, 0x89	; 137
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e8       	ldi	r20, 0x80	; 128
    22a0:	5f e3       	ldi	r21, 0x3F	; 63
    22a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a6:	88 23       	and	r24, r24
    22a8:	44 f4       	brge	.+16     	; 0x22ba <main+0x598>
		__ticks = 1;
    22aa:	fe 01       	movw	r30, r28
    22ac:	eb 58       	subi	r30, 0x8B	; 139
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	91 83       	std	Z+1, r25	; 0x01
    22b6:	80 83       	st	Z, r24
    22b8:	64 c0       	rjmp	.+200    	; 0x2382 <main+0x660>
	else if (__tmp > 65535)
    22ba:	fe 01       	movw	r30, r28
    22bc:	e9 58       	subi	r30, 0x89	; 137
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	3f ef       	ldi	r19, 0xFF	; 255
    22cc:	4f e7       	ldi	r20, 0x7F	; 127
    22ce:	57 e4       	ldi	r21, 0x47	; 71
    22d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d4:	18 16       	cp	r1, r24
    22d6:	0c f0       	brlt	.+2      	; 0x22da <main+0x5b8>
    22d8:	43 c0       	rjmp	.+134    	; 0x2360 <main+0x63e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	fe 01       	movw	r30, r28
    22dc:	e5 58       	subi	r30, 0x85	; 133
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e2       	ldi	r20, 0x20	; 32
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	8e 01       	movw	r16, r28
    22fa:	0b 58       	subi	r16, 0x8B	; 139
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	f8 01       	movw	r30, r16
    230c:	91 83       	std	Z+1, r25	; 0x01
    230e:	80 83       	st	Z, r24
    2310:	1f c0       	rjmp	.+62     	; 0x2350 <main+0x62e>
    2312:	fe 01       	movw	r30, r28
    2314:	ed 58       	subi	r30, 0x8D	; 141
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	88 ec       	ldi	r24, 0xC8	; 200
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	fe 01       	movw	r30, r28
    2322:	ed 58       	subi	r30, 0x8D	; 141
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <main+0x608>
    232e:	fe 01       	movw	r30, r28
    2330:	ed 58       	subi	r30, 0x8D	; 141
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	de 01       	movw	r26, r28
    233a:	ab 58       	subi	r26, 0x8B	; 139
    233c:	bf 4f       	sbci	r27, 0xFF	; 255
    233e:	fe 01       	movw	r30, r28
    2340:	eb 58       	subi	r30, 0x8B	; 139
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	11 96       	adiw	r26, 0x01	; 1
    234c:	9c 93       	st	X, r25
    234e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2350:	fe 01       	movw	r30, r28
    2352:	eb 58       	subi	r30, 0x8B	; 139
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	80 81       	ld	r24, Z
    2358:	91 81       	ldd	r25, Z+1	; 0x01
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	d1 f6       	brne	.-76     	; 0x2312 <main+0x5f0>
    235e:	27 c0       	rjmp	.+78     	; 0x23ae <main+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	8e 01       	movw	r16, r28
    2362:	0b 58       	subi	r16, 0x8B	; 139
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e9 58       	subi	r30, 0x89	; 137
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	f8 01       	movw	r30, r16
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
    2382:	de 01       	movw	r26, r28
    2384:	af 58       	subi	r26, 0x8F	; 143
    2386:	bf 4f       	sbci	r27, 0xFF	; 255
    2388:	fe 01       	movw	r30, r28
    238a:	eb 58       	subi	r30, 0x8B	; 139
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	8d 93       	st	X+, r24
    2394:	9c 93       	st	X, r25
    2396:	fe 01       	movw	r30, r28
    2398:	ef 58       	subi	r30, 0x8F	; 143
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <main+0x67e>
    23a4:	fe 01       	movw	r30, r28
    23a6:	ef 58       	subi	r30, 0x8F	; 143
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
		{
			_delay_ms(500);
			LCD_voidSendCommand(1);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	0e 94 1f 07 	call	0xe3e	; 0xe3e <LCD_voidSendCommand>
			while(1)
			{
				LCD_voidGoToXY(0,0);
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	60 e0       	ldi	r22, 0x00	; 0
    23b8:	0e 94 12 09 	call	0x1224	; 0x1224 <LCD_voidGoToXY>
				LCD_voidSendString("1:C.W / 2:C.C.W");
    23bc:	82 e8       	ldi	r24, 0x82	; 130
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_voidSendString>
				LCD_voidGoToXY(1,0);
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	0e 94 12 09 	call	0x1224	; 0x1224 <LCD_voidGoToXY>
				LCD_voidSendString("3:BACK");
    23cc:	82 e9       	ldi	r24, 0x92	; 146
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <LCD_voidSendString>
				DIO_u8GetPinValue(PORT_D, PIN2, &x);
    23d4:	2d ed       	ldi	r18, 0xDD	; 221
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	84 e0       	ldi	r24, 0x04	; 4
    23da:	62 e0       	ldi	r22, 0x02	; 2
    23dc:	a9 01       	movw	r20, r18
    23de:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(PORT_D, PIN3, &y);
    23e2:	2f ed       	ldi	r18, 0xDF	; 223
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	84 e0       	ldi	r24, 0x04	; 4
    23e8:	63 e0       	ldi	r22, 0x03	; 3
    23ea:	a9 01       	movw	r20, r18
    23ec:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
				DIO_u8GetPinValue(PORT_D, PIN4, &z);
    23f0:	2e ed       	ldi	r18, 0xDE	; 222
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	84 e0       	ldi	r24, 0x04	; 4
    23f6:	64 e0       	ldi	r22, 0x04	; 4
    23f8:	a9 01       	movw	r20, r18
    23fa:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
				if (x == 0)
    23fe:	80 91 dd 00 	lds	r24, 0x00DD
    2402:	88 23       	and	r24, r24
    2404:	09 f0       	breq	.+2      	; 0x2408 <main+0x6e6>
    2406:	fb c2       	rjmp	.+1526   	; 0x29fe <main+0xcdc>
				{
					while(1)
					{
						DIO_u8SetPinValue(PORT_C ,PIN0, LOW);
    2408:	83 e0       	ldi	r24, 0x03	; 3
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C ,PIN1, HIGH);
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN2, HIGH);
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	62 e0       	ldi	r22, 0x02	; 2
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C ,PIN3, HIGH);
    2426:	83 e0       	ldi	r24, 0x03	; 3
    2428:	63 e0       	ldi	r22, 0x03	; 3
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    2430:	fe 01       	movw	r30, r28
    2432:	e3 59       	subi	r30, 0x93	; 147
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e0       	ldi	r26, 0x00	; 0
    243c:	b0 e4       	ldi	r27, 0x40	; 64
    243e:	80 83       	st	Z, r24
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	a2 83       	std	Z+2, r26	; 0x02
    2444:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	8e 01       	movw	r16, r28
    2448:	07 59       	subi	r16, 0x97	; 151
    244a:	1f 4f       	sbci	r17, 0xFF	; 255
    244c:	fe 01       	movw	r30, r28
    244e:	e3 59       	subi	r30, 0x93	; 147
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a ef       	ldi	r20, 0xFA	; 250
    2460:	54 e4       	ldi	r21, 0x44	; 68
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	f8 01       	movw	r30, r16
    246c:	80 83       	st	Z, r24
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	a2 83       	std	Z+2, r26	; 0x02
    2472:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2474:	fe 01       	movw	r30, r28
    2476:	e7 59       	subi	r30, 0x97	; 151
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	60 81       	ld	r22, Z
    247c:	71 81       	ldd	r23, Z+1	; 0x01
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	44 f4       	brge	.+16     	; 0x24a2 <main+0x780>
		__ticks = 1;
    2492:	fe 01       	movw	r30, r28
    2494:	e9 59       	subi	r30, 0x99	; 153
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	80 83       	st	Z, r24
    24a0:	64 c0       	rjmp	.+200    	; 0x256a <main+0x848>
	else if (__tmp > 65535)
    24a2:	fe 01       	movw	r30, r28
    24a4:	e7 59       	subi	r30, 0x97	; 151
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	3f ef       	ldi	r19, 0xFF	; 255
    24b4:	4f e7       	ldi	r20, 0x7F	; 127
    24b6:	57 e4       	ldi	r21, 0x47	; 71
    24b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24bc:	18 16       	cp	r1, r24
    24be:	0c f0       	brlt	.+2      	; 0x24c2 <main+0x7a0>
    24c0:	43 c0       	rjmp	.+134    	; 0x2548 <main+0x826>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c2:	fe 01       	movw	r30, r28
    24c4:	e3 59       	subi	r30, 0x93	; 147
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8e 01       	movw	r16, r28
    24e2:	09 59       	subi	r16, 0x99	; 153
    24e4:	1f 4f       	sbci	r17, 0xFF	; 255
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	f8 01       	movw	r30, r16
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
    24f8:	1f c0       	rjmp	.+62     	; 0x2538 <main+0x816>
    24fa:	fe 01       	movw	r30, r28
    24fc:	eb 59       	subi	r30, 0x9B	; 155
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	88 ec       	ldi	r24, 0xC8	; 200
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	80 83       	st	Z, r24
    2508:	fe 01       	movw	r30, r28
    250a:	eb 59       	subi	r30, 0x9B	; 155
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	80 81       	ld	r24, Z
    2510:	91 81       	ldd	r25, Z+1	; 0x01
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <main+0x7f0>
    2516:	fe 01       	movw	r30, r28
    2518:	eb 59       	subi	r30, 0x9B	; 155
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	de 01       	movw	r26, r28
    2522:	a9 59       	subi	r26, 0x99	; 153
    2524:	bf 4f       	sbci	r27, 0xFF	; 255
    2526:	fe 01       	movw	r30, r28
    2528:	e9 59       	subi	r30, 0x99	; 153
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	11 96       	adiw	r26, 0x01	; 1
    2534:	9c 93       	st	X, r25
    2536:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2538:	fe 01       	movw	r30, r28
    253a:	e9 59       	subi	r30, 0x99	; 153
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	d1 f6       	brne	.-76     	; 0x24fa <main+0x7d8>
    2546:	27 c0       	rjmp	.+78     	; 0x2596 <main+0x874>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2548:	8e 01       	movw	r16, r28
    254a:	09 59       	subi	r16, 0x99	; 153
    254c:	1f 4f       	sbci	r17, 0xFF	; 255
    254e:	fe 01       	movw	r30, r28
    2550:	e7 59       	subi	r30, 0x97	; 151
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	60 81       	ld	r22, Z
    2556:	71 81       	ldd	r23, Z+1	; 0x01
    2558:	82 81       	ldd	r24, Z+2	; 0x02
    255a:	93 81       	ldd	r25, Z+3	; 0x03
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	f8 01       	movw	r30, r16
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
    256a:	de 01       	movw	r26, r28
    256c:	ad 59       	subi	r26, 0x9D	; 157
    256e:	bf 4f       	sbci	r27, 0xFF	; 255
    2570:	fe 01       	movw	r30, r28
    2572:	e9 59       	subi	r30, 0x99	; 153
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	8d 93       	st	X+, r24
    257c:	9c 93       	st	X, r25
    257e:	fe 01       	movw	r30, r28
    2580:	ed 59       	subi	r30, 0x9D	; 157
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <main+0x866>
    258c:	fe 01       	movw	r30, r28
    258e:	ed 59       	subi	r30, 0x9D	; 157
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
						_delay_ms(2);
						DIO_u8SetPinValue(PORT_C, PIN0, HIGH);
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	41 e0       	ldi	r20, 0x01	; 1
    259c:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN1, LOW);
    25a0:	83 e0       	ldi	r24, 0x03	; 3
    25a2:	61 e0       	ldi	r22, 0x01	; 1
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN2, HIGH);
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	62 e0       	ldi	r22, 0x02	; 2
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN3, HIGH);
    25b4:	83 e0       	ldi	r24, 0x03	; 3
    25b6:	63 e0       	ldi	r22, 0x03	; 3
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    25be:	fe 01       	movw	r30, r28
    25c0:	e1 5a       	subi	r30, 0xA1	; 161
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e0       	ldi	r26, 0x00	; 0
    25ca:	b0 e4       	ldi	r27, 0x40	; 64
    25cc:	80 83       	st	Z, r24
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	a2 83       	std	Z+2, r26	; 0x02
    25d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	8e 01       	movw	r16, r28
    25d6:	05 5a       	subi	r16, 0xA5	; 165
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	fe 01       	movw	r30, r28
    25dc:	e1 5a       	subi	r30, 0xA1	; 161
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	82 81       	ldd	r24, Z+2	; 0x02
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a ef       	ldi	r20, 0xFA	; 250
    25ee:	54 e4       	ldi	r21, 0x44	; 68
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	f8 01       	movw	r30, r16
    25fa:	80 83       	st	Z, r24
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	a2 83       	std	Z+2, r26	; 0x02
    2600:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2602:	fe 01       	movw	r30, r28
    2604:	e5 5a       	subi	r30, 0xA5	; 165
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	44 f4       	brge	.+16     	; 0x2630 <main+0x90e>
		__ticks = 1;
    2620:	fe 01       	movw	r30, r28
    2622:	e7 5a       	subi	r30, 0xA7	; 167
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
    262e:	64 c0       	rjmp	.+200    	; 0x26f8 <main+0x9d6>
	else if (__tmp > 65535)
    2630:	fe 01       	movw	r30, r28
    2632:	e5 5a       	subi	r30, 0xA5	; 165
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	4f e7       	ldi	r20, 0x7F	; 127
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264a:	18 16       	cp	r1, r24
    264c:	0c f0       	brlt	.+2      	; 0x2650 <main+0x92e>
    264e:	43 c0       	rjmp	.+134    	; 0x26d6 <main+0x9b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	fe 01       	movw	r30, r28
    2652:	e1 5a       	subi	r30, 0xA1	; 161
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8e 01       	movw	r16, r28
    2670:	07 5a       	subi	r16, 0xA7	; 167
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	f8 01       	movw	r30, r16
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
    2686:	1f c0       	rjmp	.+62     	; 0x26c6 <main+0x9a4>
    2688:	fe 01       	movw	r30, r28
    268a:	e9 5a       	subi	r30, 0xA9	; 169
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	88 ec       	ldi	r24, 0xC8	; 200
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	fe 01       	movw	r30, r28
    2698:	e9 5a       	subi	r30, 0xA9	; 169
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <main+0x97e>
    26a4:	fe 01       	movw	r30, r28
    26a6:	e9 5a       	subi	r30, 0xA9	; 169
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	de 01       	movw	r26, r28
    26b0:	a7 5a       	subi	r26, 0xA7	; 167
    26b2:	bf 4f       	sbci	r27, 0xFF	; 255
    26b4:	fe 01       	movw	r30, r28
    26b6:	e7 5a       	subi	r30, 0xA7	; 167
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	11 96       	adiw	r26, 0x01	; 1
    26c2:	9c 93       	st	X, r25
    26c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	fe 01       	movw	r30, r28
    26c8:	e7 5a       	subi	r30, 0xA7	; 167
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	d1 f6       	brne	.-76     	; 0x2688 <main+0x966>
    26d4:	27 c0       	rjmp	.+78     	; 0x2724 <main+0xa02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	8e 01       	movw	r16, r28
    26d8:	07 5a       	subi	r16, 0xA7	; 167
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	fe 01       	movw	r30, r28
    26de:	e5 5a       	subi	r30, 0xA5	; 165
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	f8 01       	movw	r30, r16
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	de 01       	movw	r26, r28
    26fa:	ab 5a       	subi	r26, 0xAB	; 171
    26fc:	bf 4f       	sbci	r27, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e7 5a       	subi	r30, 0xA7	; 167
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	8d 93       	st	X+, r24
    270a:	9c 93       	st	X, r25
    270c:	fe 01       	movw	r30, r28
    270e:	eb 5a       	subi	r30, 0xAB	; 171
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <main+0x9f4>
    271a:	fe 01       	movw	r30, r28
    271c:	eb 5a       	subi	r30, 0xAB	; 171
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
						_delay_ms(2);
						DIO_u8SetPinValue(PORT_C, PIN0, HIGH);
    2724:	83 e0       	ldi	r24, 0x03	; 3
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	41 e0       	ldi	r20, 0x01	; 1
    272a:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN1, HIGH);
    272e:	83 e0       	ldi	r24, 0x03	; 3
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	41 e0       	ldi	r20, 0x01	; 1
    2734:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN2, LOW);
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	62 e0       	ldi	r22, 0x02	; 2
    273c:	40 e0       	ldi	r20, 0x00	; 0
    273e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN3, HIGH);
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	63 e0       	ldi	r22, 0x03	; 3
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    274c:	fe 01       	movw	r30, r28
    274e:	ef 5a       	subi	r30, 0xAF	; 175
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a0 e0       	ldi	r26, 0x00	; 0
    2758:	b0 e4       	ldi	r27, 0x40	; 64
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2762:	8e 01       	movw	r16, r28
    2764:	03 5b       	subi	r16, 0xB3	; 179
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	fe 01       	movw	r30, r28
    276a:	ef 5a       	subi	r30, 0xAF	; 175
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	60 81       	ld	r22, Z
    2770:	71 81       	ldd	r23, Z+1	; 0x01
    2772:	82 81       	ldd	r24, Z+2	; 0x02
    2774:	93 81       	ldd	r25, Z+3	; 0x03
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	4a ef       	ldi	r20, 0xFA	; 250
    277c:	54 e4       	ldi	r21, 0x44	; 68
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	f8 01       	movw	r30, r16
    2788:	80 83       	st	Z, r24
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2790:	fe 01       	movw	r30, r28
    2792:	e3 5b       	subi	r30, 0xB3	; 179
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e8       	ldi	r20, 0x80	; 128
    27a4:	5f e3       	ldi	r21, 0x3F	; 63
    27a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27aa:	88 23       	and	r24, r24
    27ac:	44 f4       	brge	.+16     	; 0x27be <main+0xa9c>
		__ticks = 1;
    27ae:	fe 01       	movw	r30, r28
    27b0:	e5 5b       	subi	r30, 0xB5	; 181
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	80 83       	st	Z, r24
    27bc:	64 c0       	rjmp	.+200    	; 0x2886 <main+0xb64>
	else if (__tmp > 65535)
    27be:	fe 01       	movw	r30, r28
    27c0:	e3 5b       	subi	r30, 0xB3	; 179
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	3f ef       	ldi	r19, 0xFF	; 255
    27d0:	4f e7       	ldi	r20, 0x7F	; 127
    27d2:	57 e4       	ldi	r21, 0x47	; 71
    27d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d8:	18 16       	cp	r1, r24
    27da:	0c f0       	brlt	.+2      	; 0x27de <main+0xabc>
    27dc:	43 c0       	rjmp	.+134    	; 0x2864 <main+0xb42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27de:	fe 01       	movw	r30, r28
    27e0:	ef 5a       	subi	r30, 0xAF	; 175
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	8e 01       	movw	r16, r28
    27fe:	05 5b       	subi	r16, 0xB5	; 181
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	f8 01       	movw	r30, r16
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	1f c0       	rjmp	.+62     	; 0x2854 <main+0xb32>
    2816:	fe 01       	movw	r30, r28
    2818:	e7 5b       	subi	r30, 0xB7	; 183
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	fe 01       	movw	r30, r28
    2826:	e7 5b       	subi	r30, 0xB7	; 183
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <main+0xb0c>
    2832:	fe 01       	movw	r30, r28
    2834:	e7 5b       	subi	r30, 0xB7	; 183
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283c:	de 01       	movw	r26, r28
    283e:	a5 5b       	subi	r26, 0xB5	; 181
    2840:	bf 4f       	sbci	r27, 0xFF	; 255
    2842:	fe 01       	movw	r30, r28
    2844:	e5 5b       	subi	r30, 0xB5	; 181
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	11 96       	adiw	r26, 0x01	; 1
    2850:	9c 93       	st	X, r25
    2852:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2854:	fe 01       	movw	r30, r28
    2856:	e5 5b       	subi	r30, 0xB5	; 181
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	80 81       	ld	r24, Z
    285c:	91 81       	ldd	r25, Z+1	; 0x01
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	d1 f6       	brne	.-76     	; 0x2816 <main+0xaf4>
    2862:	27 c0       	rjmp	.+78     	; 0x28b2 <main+0xb90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2864:	8e 01       	movw	r16, r28
    2866:	05 5b       	subi	r16, 0xB5	; 181
    2868:	1f 4f       	sbci	r17, 0xFF	; 255
    286a:	fe 01       	movw	r30, r28
    286c:	e3 5b       	subi	r30, 0xB3	; 179
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	f8 01       	movw	r30, r16
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	de 01       	movw	r26, r28
    2888:	a9 5b       	subi	r26, 0xB9	; 185
    288a:	bf 4f       	sbci	r27, 0xFF	; 255
    288c:	fe 01       	movw	r30, r28
    288e:	e5 5b       	subi	r30, 0xB5	; 181
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	8d 93       	st	X+, r24
    2898:	9c 93       	st	X, r25
    289a:	fe 01       	movw	r30, r28
    289c:	e9 5b       	subi	r30, 0xB9	; 185
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <main+0xb82>
    28a8:	fe 01       	movw	r30, r28
    28aa:	e9 5b       	subi	r30, 0xB9	; 185
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
						_delay_ms(2);
						DIO_u8SetPinValue(PORT_C, PIN0, HIGH);
    28b2:	83 e0       	ldi	r24, 0x03	; 3
    28b4:	60 e0       	ldi	r22, 0x00	; 0
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN1, HIGH);
    28bc:	83 e0       	ldi	r24, 0x03	; 3
    28be:	61 e0       	ldi	r22, 0x01	; 1
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN2, HIGH);
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	62 e0       	ldi	r22, 0x02	; 2
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN3, LOW);
    28d0:	83 e0       	ldi	r24, 0x03	; 3
    28d2:	63 e0       	ldi	r22, 0x03	; 3
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    28da:	fe 01       	movw	r30, r28
    28dc:	ed 5b       	subi	r30, 0xBD	; 189
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e0       	ldi	r26, 0x00	; 0
    28e6:	b0 e4       	ldi	r27, 0x40	; 64
    28e8:	80 83       	st	Z, r24
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	a2 83       	std	Z+2, r26	; 0x02
    28ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	8e 01       	movw	r16, r28
    28f2:	01 5c       	subi	r16, 0xC1	; 193
    28f4:	1f 4f       	sbci	r17, 0xFF	; 255
    28f6:	fe 01       	movw	r30, r28
    28f8:	ed 5b       	subi	r30, 0xBD	; 189
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	60 81       	ld	r22, Z
    28fe:	71 81       	ldd	r23, Z+1	; 0x01
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	93 81       	ldd	r25, Z+3	; 0x03
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	4a ef       	ldi	r20, 0xFA	; 250
    290a:	54 e4       	ldi	r21, 0x44	; 68
    290c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	f8 01       	movw	r30, r16
    2916:	80 83       	st	Z, r24
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	a2 83       	std	Z+2, r26	; 0x02
    291c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291e:	fe 01       	movw	r30, r28
    2920:	ff 96       	adiw	r30, 0x3f	; 63
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	2c f4       	brge	.+10     	; 0x2944 <main+0xc22>
		__ticks = 1;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	9e af       	std	Y+62, r25	; 0x3e
    2940:	8d af       	std	Y+61, r24	; 0x3d
    2942:	46 c0       	rjmp	.+140    	; 0x29d0 <main+0xcae>
	else if (__tmp > 65535)
    2944:	fe 01       	movw	r30, r28
    2946:	ff 96       	adiw	r30, 0x3f	; 63
    2948:	60 81       	ld	r22, Z
    294a:	71 81       	ldd	r23, Z+1	; 0x01
    294c:	82 81       	ldd	r24, Z+2	; 0x02
    294e:	93 81       	ldd	r25, Z+3	; 0x03
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f ef       	ldi	r19, 0xFF	; 255
    2954:	4f e7       	ldi	r20, 0x7F	; 127
    2956:	57 e4       	ldi	r21, 0x47	; 71
    2958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295c:	18 16       	cp	r1, r24
    295e:	64 f5       	brge	.+88     	; 0x29b8 <main+0xc96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	fe 01       	movw	r30, r28
    2962:	ed 5b       	subi	r30, 0xBD	; 189
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	82 81       	ldd	r24, Z+2	; 0x02
    296c:	93 81       	ldd	r25, Z+3	; 0x03
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e af       	std	Y+62, r25	; 0x3e
    298c:	8d af       	std	Y+61, r24	; 0x3d
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <main+0xc8c>
    2990:	88 ec       	ldi	r24, 0xC8	; 200
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9c af       	std	Y+60, r25	; 0x3c
    2996:	8b af       	std	Y+59, r24	; 0x3b
    2998:	8b ad       	ldd	r24, Y+59	; 0x3b
    299a:	9c ad       	ldd	r25, Y+60	; 0x3c
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <main+0xc7a>
    29a0:	9c af       	std	Y+60, r25	; 0x3c
    29a2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    29a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	9e af       	std	Y+62, r25	; 0x3e
    29ac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    29b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <main+0xc6e>
    29b6:	16 c0       	rjmp	.+44     	; 0x29e4 <main+0xcc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	fe 01       	movw	r30, r28
    29ba:	ff 96       	adiw	r30, 0x3f	; 63
    29bc:	60 81       	ld	r22, Z
    29be:	71 81       	ldd	r23, Z+1	; 0x01
    29c0:	82 81       	ldd	r24, Z+2	; 0x02
    29c2:	93 81       	ldd	r25, Z+3	; 0x03
    29c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9e af       	std	Y+62, r25	; 0x3e
    29ce:	8d af       	std	Y+61, r24	; 0x3d
    29d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29d4:	9a af       	std	Y+58, r25	; 0x3a
    29d6:	89 af       	std	Y+57, r24	; 0x39
    29d8:	89 ad       	ldd	r24, Y+57	; 0x39
    29da:	9a ad       	ldd	r25, Y+58	; 0x3a
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <main+0xcba>
    29e0:	9a af       	std	Y+58, r25	; 0x3a
    29e2:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(2);
						DIO_u8GetPinValue(PORT_D, PIN4, &z);
    29e4:	2e ed       	ldi	r18, 0xDE	; 222
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	84 e0       	ldi	r24, 0x04	; 4
    29ea:	64 e0       	ldi	r22, 0x04	; 4
    29ec:	a9 01       	movw	r20, r18
    29ee:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
						if(z==0)
    29f2:	80 91 de 00 	lds	r24, 0x00DE
    29f6:	88 23       	and	r24, r24
    29f8:	09 f4       	brne	.+2      	; 0x29fc <main+0xcda>
    29fa:	2c c2       	rjmp	.+1112   	; 0x2e54 <main+0x1132>
    29fc:	05 cd       	rjmp	.-1526   	; 0x2408 <main+0x6e6>
						break;
					}
				}
				else if(y==0)
    29fe:	80 91 df 00 	lds	r24, 0x00DF
    2a02:	88 23       	and	r24, r24
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <main+0xce6>
    2a06:	26 c2       	rjmp	.+1100   	; 0x2e54 <main+0x1132>
				{
					while(1)
					{
						GIE_voidDisable();
    2a08:	0e 94 98 0a 	call	0x1530	; 0x1530 <GIE_voidDisable>
						DIO_u8SetPinValue(PORT_C, PIN0, HIGH);
    2a0c:	83 e0       	ldi	r24, 0x03	; 3
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN1, HIGH);
    2a16:	83 e0       	ldi	r24, 0x03	; 3
    2a18:	61 e0       	ldi	r22, 0x01	; 1
    2a1a:	41 e0       	ldi	r20, 0x01	; 1
    2a1c:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN2, HIGH);
    2a20:	83 e0       	ldi	r24, 0x03	; 3
    2a22:	62 e0       	ldi	r22, 0x02	; 2
    2a24:	41 e0       	ldi	r20, 0x01	; 1
    2a26:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN3, LOW);
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	63 e0       	ldi	r22, 0x03	; 3
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e0       	ldi	r26, 0x00	; 0
    2a3a:	b0 e4       	ldi	r27, 0x40	; 64
    2a3c:	8d ab       	std	Y+53, r24	; 0x35
    2a3e:	9e ab       	std	Y+54, r25	; 0x36
    2a40:	af ab       	std	Y+55, r26	; 0x37
    2a42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a44:	6d a9       	ldd	r22, Y+53	; 0x35
    2a46:	7e a9       	ldd	r23, Y+54	; 0x36
    2a48:	8f a9       	ldd	r24, Y+55	; 0x37
    2a4a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	4a ef       	ldi	r20, 0xFA	; 250
    2a52:	54 e4       	ldi	r21, 0x44	; 68
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	89 ab       	std	Y+49, r24	; 0x31
    2a5e:	9a ab       	std	Y+50, r25	; 0x32
    2a60:	ab ab       	std	Y+51, r26	; 0x33
    2a62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a64:	69 a9       	ldd	r22, Y+49	; 0x31
    2a66:	7a a9       	ldd	r23, Y+50	; 0x32
    2a68:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	2c f4       	brge	.+10     	; 0x2a86 <main+0xd64>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	98 ab       	std	Y+48, r25	; 0x30
    2a82:	8f a7       	std	Y+47, r24	; 0x2f
    2a84:	3f c0       	rjmp	.+126    	; 0x2b04 <main+0xde2>
	else if (__tmp > 65535)
    2a86:	69 a9       	ldd	r22, Y+49	; 0x31
    2a88:	7a a9       	ldd	r23, Y+50	; 0x32
    2a8a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a8c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	3f ef       	ldi	r19, 0xFF	; 255
    2a92:	4f e7       	ldi	r20, 0x7F	; 127
    2a94:	57 e4       	ldi	r21, 0x47	; 71
    2a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a9a:	18 16       	cp	r1, r24
    2a9c:	4c f5       	brge	.+82     	; 0x2af0 <main+0xdce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9e:	6d a9       	ldd	r22, Y+53	; 0x35
    2aa0:	7e a9       	ldd	r23, Y+54	; 0x36
    2aa2:	8f a9       	ldd	r24, Y+55	; 0x37
    2aa4:	98 ad       	ldd	r25, Y+56	; 0x38
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	40 e2       	ldi	r20, 0x20	; 32
    2aac:	51 e4       	ldi	r21, 0x41	; 65
    2aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	98 ab       	std	Y+48, r25	; 0x30
    2ac4:	8f a7       	std	Y+47, r24	; 0x2f
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <main+0xdc4>
    2ac8:	88 ec       	ldi	r24, 0xC8	; 200
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	9e a7       	std	Y+46, r25	; 0x2e
    2ace:	8d a7       	std	Y+45, r24	; 0x2d
    2ad0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ad2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	f1 f7       	brne	.-4      	; 0x2ad4 <main+0xdb2>
    2ad8:	9e a7       	std	Y+46, r25	; 0x2e
    2ada:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2adc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ade:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	98 ab       	std	Y+48, r25	; 0x30
    2ae4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	69 f7       	brne	.-38     	; 0x2ac8 <main+0xda6>
    2aee:	14 c0       	rjmp	.+40     	; 0x2b18 <main+0xdf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af0:	69 a9       	ldd	r22, Y+49	; 0x31
    2af2:	7a a9       	ldd	r23, Y+50	; 0x32
    2af4:	8b a9       	ldd	r24, Y+51	; 0x33
    2af6:	9c a9       	ldd	r25, Y+52	; 0x34
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	98 ab       	std	Y+48, r25	; 0x30
    2b02:	8f a7       	std	Y+47, r24	; 0x2f
    2b04:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b06:	98 a9       	ldd	r25, Y+48	; 0x30
    2b08:	9c a7       	std	Y+44, r25	; 0x2c
    2b0a:	8b a7       	std	Y+43, r24	; 0x2b
    2b0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b10:	01 97       	sbiw	r24, 0x01	; 1
    2b12:	f1 f7       	brne	.-4      	; 0x2b10 <main+0xdee>
    2b14:	9c a7       	std	Y+44, r25	; 0x2c
    2b16:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2);
						DIO_u8SetPinValue(PORT_C, PIN0, HIGH);
    2b18:	83 e0       	ldi	r24, 0x03	; 3
    2b1a:	60 e0       	ldi	r22, 0x00	; 0
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN1, HIGH);
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN2, LOW);
    2b2c:	83 e0       	ldi	r24, 0x03	; 3
    2b2e:	62 e0       	ldi	r22, 0x02	; 2
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN3, HIGH);
    2b36:	83 e0       	ldi	r24, 0x03	; 3
    2b38:	63 e0       	ldi	r22, 0x03	; 3
    2b3a:	41 e0       	ldi	r20, 0x01	; 1
    2b3c:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 e0       	ldi	r26, 0x00	; 0
    2b46:	b0 e4       	ldi	r27, 0x40	; 64
    2b48:	8f a3       	std	Y+39, r24	; 0x27
    2b4a:	98 a7       	std	Y+40, r25	; 0x28
    2b4c:	a9 a7       	std	Y+41, r26	; 0x29
    2b4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b50:	6f a1       	ldd	r22, Y+39	; 0x27
    2b52:	78 a5       	ldd	r23, Y+40	; 0x28
    2b54:	89 a5       	ldd	r24, Y+41	; 0x29
    2b56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4a ef       	ldi	r20, 0xFA	; 250
    2b5e:	54 e4       	ldi	r21, 0x44	; 68
    2b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	8b a3       	std	Y+35, r24	; 0x23
    2b6a:	9c a3       	std	Y+36, r25	; 0x24
    2b6c:	ad a3       	std	Y+37, r26	; 0x25
    2b6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b70:	6b a1       	ldd	r22, Y+35	; 0x23
    2b72:	7c a1       	ldd	r23, Y+36	; 0x24
    2b74:	8d a1       	ldd	r24, Y+37	; 0x25
    2b76:	9e a1       	ldd	r25, Y+38	; 0x26
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <main+0xe70>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9a a3       	std	Y+34, r25	; 0x22
    2b8e:	89 a3       	std	Y+33, r24	; 0x21
    2b90:	3f c0       	rjmp	.+126    	; 0x2c10 <main+0xeee>
	else if (__tmp > 65535)
    2b92:	6b a1       	ldd	r22, Y+35	; 0x23
    2b94:	7c a1       	ldd	r23, Y+36	; 0x24
    2b96:	8d a1       	ldd	r24, Y+37	; 0x25
    2b98:	9e a1       	ldd	r25, Y+38	; 0x26
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	3f ef       	ldi	r19, 0xFF	; 255
    2b9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ba0:	57 e4       	ldi	r21, 0x47	; 71
    2ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	4c f5       	brge	.+82     	; 0x2bfc <main+0xeda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	6f a1       	ldd	r22, Y+39	; 0x27
    2bac:	78 a5       	ldd	r23, Y+40	; 0x28
    2bae:	89 a5       	ldd	r24, Y+41	; 0x29
    2bb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	51 e4       	ldi	r21, 0x41	; 65
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9a a3       	std	Y+34, r25	; 0x22
    2bd0:	89 a3       	std	Y+33, r24	; 0x21
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <main+0xed0>
    2bd4:	88 ec       	ldi	r24, 0xC8	; 200
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	98 a3       	std	Y+32, r25	; 0x20
    2bda:	8f 8f       	std	Y+31, r24	; 0x1f
    2bdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bde:	98 a1       	ldd	r25, Y+32	; 0x20
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <main+0xebe>
    2be4:	98 a3       	std	Y+32, r25	; 0x20
    2be6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bea:	9a a1       	ldd	r25, Y+34	; 0x22
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	9a a3       	std	Y+34, r25	; 0x22
    2bf0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	69 f7       	brne	.-38     	; 0x2bd4 <main+0xeb2>
    2bfa:	14 c0       	rjmp	.+40     	; 0x2c24 <main+0xf02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bfe:	7c a1       	ldd	r23, Y+36	; 0x24
    2c00:	8d a1       	ldd	r24, Y+37	; 0x25
    2c02:	9e a1       	ldd	r25, Y+38	; 0x26
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9a a3       	std	Y+34, r25	; 0x22
    2c0e:	89 a3       	std	Y+33, r24	; 0x21
    2c10:	89 a1       	ldd	r24, Y+33	; 0x21
    2c12:	9a a1       	ldd	r25, Y+34	; 0x22
    2c14:	9e 8f       	std	Y+30, r25	; 0x1e
    2c16:	8d 8f       	std	Y+29, r24	; 0x1d
    2c18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <main+0xefa>
    2c20:	9e 8f       	std	Y+30, r25	; 0x1e
    2c22:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(2);
						DIO_u8SetPinValue(PORT_C, PIN0, HIGH);
    2c24:	83 e0       	ldi	r24, 0x03	; 3
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN1, LOW);
    2c2e:	83 e0       	ldi	r24, 0x03	; 3
    2c30:	61 e0       	ldi	r22, 0x01	; 1
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN2, HIGH);
    2c38:	83 e0       	ldi	r24, 0x03	; 3
    2c3a:	62 e0       	ldi	r22, 0x02	; 2
    2c3c:	41 e0       	ldi	r20, 0x01	; 1
    2c3e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN3, HIGH);
    2c42:	83 e0       	ldi	r24, 0x03	; 3
    2c44:	63 e0       	ldi	r22, 0x03	; 3
    2c46:	41 e0       	ldi	r20, 0x01	; 1
    2c48:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 e0       	ldi	r26, 0x00	; 0
    2c52:	b0 e4       	ldi	r27, 0x40	; 64
    2c54:	89 8f       	std	Y+25, r24	; 0x19
    2c56:	9a 8f       	std	Y+26, r25	; 0x1a
    2c58:	ab 8f       	std	Y+27, r26	; 0x1b
    2c5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a ef       	ldi	r20, 0xFA	; 250
    2c6a:	54 e4       	ldi	r21, 0x44	; 68
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8d 8b       	std	Y+21, r24	; 0x15
    2c76:	9e 8b       	std	Y+22, r25	; 0x16
    2c78:	af 8b       	std	Y+23, r26	; 0x17
    2c7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c80:	8f 89       	ldd	r24, Y+23	; 0x17
    2c82:	98 8d       	ldd	r25, Y+24	; 0x18
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <main+0xf7c>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9c 8b       	std	Y+20, r25	; 0x14
    2c9a:	8b 8b       	std	Y+19, r24	; 0x13
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <main+0xffa>
	else if (__tmp > 65535)
    2c9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <main+0xfe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9c 8b       	std	Y+20, r25	; 0x14
    2cdc:	8b 8b       	std	Y+19, r24	; 0x13
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <main+0xfdc>
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9a 8b       	std	Y+18, r25	; 0x12
    2ce6:	89 8b       	std	Y+17, r24	; 0x11
    2ce8:	89 89       	ldd	r24, Y+17	; 0x11
    2cea:	9a 89       	ldd	r25, Y+18	; 0x12
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <main+0xfca>
    2cf0:	9a 8b       	std	Y+18, r25	; 0x12
    2cf2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9c 8b       	std	Y+20, r25	; 0x14
    2cfc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2d00:	9c 89       	ldd	r25, Y+20	; 0x14
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <main+0xfbe>
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <main+0x100e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	6d 89       	ldd	r22, Y+21	; 0x15
    2d0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9c 8b       	std	Y+20, r25	; 0x14
    2d1a:	8b 8b       	std	Y+19, r24	; 0x13
    2d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d20:	98 8b       	std	Y+16, r25	; 0x10
    2d22:	8f 87       	std	Y+15, r24	; 0x0f
    2d24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d26:	98 89       	ldd	r25, Y+16	; 0x10
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <main+0x1006>
    2d2c:	98 8b       	std	Y+16, r25	; 0x10
    2d2e:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(2);
						DIO_u8SetPinValue(PORT_C ,PIN0, LOW);
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C ,PIN1, HIGH);
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	61 e0       	ldi	r22, 0x01	; 1
    2d3e:	41 e0       	ldi	r20, 0x01	; 1
    2d40:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C, PIN2, HIGH);
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	62 e0       	ldi	r22, 0x02	; 2
    2d48:	41 e0       	ldi	r20, 0x01	; 1
    2d4a:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
						DIO_u8SetPinValue(PORT_C ,PIN3, HIGH);
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	63 e0       	ldi	r22, 0x03	; 3
    2d52:	41 e0       	ldi	r20, 0x01	; 1
    2d54:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	a0 e0       	ldi	r26, 0x00	; 0
    2d5e:	b0 e4       	ldi	r27, 0x40	; 64
    2d60:	8b 87       	std	Y+11, r24	; 0x0b
    2d62:	9c 87       	std	Y+12, r25	; 0x0c
    2d64:	ad 87       	std	Y+13, r26	; 0x0d
    2d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	4a ef       	ldi	r20, 0xFA	; 250
    2d76:	54 e4       	ldi	r21, 0x44	; 68
    2d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	8f 83       	std	Y+7, r24	; 0x07
    2d82:	98 87       	std	Y+8, r25	; 0x08
    2d84:	a9 87       	std	Y+9, r26	; 0x09
    2d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d88:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8a:	78 85       	ldd	r23, Y+8	; 0x08
    2d8c:	89 85       	ldd	r24, Y+9	; 0x09
    2d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e8       	ldi	r20, 0x80	; 128
    2d96:	5f e3       	ldi	r21, 0x3F	; 63
    2d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d9c:	88 23       	and	r24, r24
    2d9e:	2c f4       	brge	.+10     	; 0x2daa <main+0x1088>
		__ticks = 1;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
    2da8:	3f c0       	rjmp	.+126    	; 0x2e28 <main+0x1106>
	else if (__tmp > 65535)
    2daa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dac:	78 85       	ldd	r23, Y+8	; 0x08
    2dae:	89 85       	ldd	r24, Y+9	; 0x09
    2db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	3f ef       	ldi	r19, 0xFF	; 255
    2db6:	4f e7       	ldi	r20, 0x7F	; 127
    2db8:	57 e4       	ldi	r21, 0x47	; 71
    2dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dbe:	18 16       	cp	r1, r24
    2dc0:	4c f5       	brge	.+82     	; 0x2e14 <main+0x10f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	9e 83       	std	Y+6, r25	; 0x06
    2de8:	8d 83       	std	Y+5, r24	; 0x05
    2dea:	0f c0       	rjmp	.+30     	; 0x2e0a <main+0x10e8>
    2dec:	88 ec       	ldi	r24, 0xC8	; 200
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9c 83       	std	Y+4, r25	; 0x04
    2df2:	8b 83       	std	Y+3, r24	; 0x03
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	9c 81       	ldd	r25, Y+4	; 0x04
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <main+0x10d6>
    2dfc:	9c 83       	std	Y+4, r25	; 0x04
    2dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	9e 83       	std	Y+6, r25	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	69 f7       	brne	.-38     	; 0x2dec <main+0x10ca>
    2e12:	14 c0       	rjmp	.+40     	; 0x2e3c <main+0x111a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e14:	6f 81       	ldd	r22, Y+7	; 0x07
    2e16:	78 85       	ldd	r23, Y+8	; 0x08
    2e18:	89 85       	ldd	r24, Y+9	; 0x09
    2e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2c:	9a 83       	std	Y+2, r25	; 0x02
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <main+0x1112>
    2e38:	9a 83       	std	Y+2, r25	; 0x02
    2e3a:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(2);
						DIO_u8GetPinValue(PORT_D, PIN4, &z);
    2e3c:	2e ed       	ldi	r18, 0xDE	; 222
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	84 e0       	ldi	r24, 0x04	; 4
    2e42:	64 e0       	ldi	r22, 0x04	; 4
    2e44:	a9 01       	movw	r20, r18
    2e46:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <DIO_u8GetPinValue>
						if(z==0)
    2e4a:	80 91 de 00 	lds	r24, 0x00DE
    2e4e:	88 23       	and	r24, r24
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <main+0x1132>
    2e52:	da cd       	rjmp	.-1100   	; 0x2a08 <main+0xce6>
						break;
					}
				}
				if(z==0)
    2e54:	80 91 de 00 	lds	r24, 0x00DE
    2e58:	88 23       	and	r24, r24
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <main+0x113c>
    2e5c:	ab ca       	rjmp	.-2730   	; 0x23b4 <main+0x692>
				{
					DIO_u8SetPinValue(PORT_C ,PIN0, HIGH);
    2e5e:	83 e0       	ldi	r24, 0x03	; 3
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	41 e0       	ldi	r20, 0x01	; 1
    2e64:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PORT_C ,PIN1, HIGH);
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	61 e0       	ldi	r22, 0x01	; 1
    2e6c:	41 e0       	ldi	r20, 0x01	; 1
    2e6e:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PORT_C, PIN2, HIGH);
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	62 e0       	ldi	r22, 0x02	; 2
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PORT_C ,PIN3, HIGH);
    2e7c:	83 e0       	ldi	r24, 0x03	; 3
    2e7e:	63 e0       	ldi	r22, 0x03	; 3
    2e80:	41 e0       	ldi	r20, 0x01	; 1
    2e82:	0e 94 4e 0c 	call	0x189c	; 0x189c <DIO_u8SetPinValue>
    2e86:	b2 c8       	rjmp	.-3740   	; 0x1fec <main+0x2ca>

00002e88 <__udivmodsi4>:
    2e88:	a1 e2       	ldi	r26, 0x21	; 33
    2e8a:	1a 2e       	mov	r1, r26
    2e8c:	aa 1b       	sub	r26, r26
    2e8e:	bb 1b       	sub	r27, r27
    2e90:	fd 01       	movw	r30, r26
    2e92:	0d c0       	rjmp	.+26     	; 0x2eae <__udivmodsi4_ep>

00002e94 <__udivmodsi4_loop>:
    2e94:	aa 1f       	adc	r26, r26
    2e96:	bb 1f       	adc	r27, r27
    2e98:	ee 1f       	adc	r30, r30
    2e9a:	ff 1f       	adc	r31, r31
    2e9c:	a2 17       	cp	r26, r18
    2e9e:	b3 07       	cpc	r27, r19
    2ea0:	e4 07       	cpc	r30, r20
    2ea2:	f5 07       	cpc	r31, r21
    2ea4:	20 f0       	brcs	.+8      	; 0x2eae <__udivmodsi4_ep>
    2ea6:	a2 1b       	sub	r26, r18
    2ea8:	b3 0b       	sbc	r27, r19
    2eaa:	e4 0b       	sbc	r30, r20
    2eac:	f5 0b       	sbc	r31, r21

00002eae <__udivmodsi4_ep>:
    2eae:	66 1f       	adc	r22, r22
    2eb0:	77 1f       	adc	r23, r23
    2eb2:	88 1f       	adc	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	1a 94       	dec	r1
    2eb8:	69 f7       	brne	.-38     	; 0x2e94 <__udivmodsi4_loop>
    2eba:	60 95       	com	r22
    2ebc:	70 95       	com	r23
    2ebe:	80 95       	com	r24
    2ec0:	90 95       	com	r25
    2ec2:	9b 01       	movw	r18, r22
    2ec4:	ac 01       	movw	r20, r24
    2ec6:	bd 01       	movw	r22, r26
    2ec8:	cf 01       	movw	r24, r30
    2eca:	08 95       	ret

00002ecc <__prologue_saves__>:
    2ecc:	2f 92       	push	r2
    2ece:	3f 92       	push	r3
    2ed0:	4f 92       	push	r4
    2ed2:	5f 92       	push	r5
    2ed4:	6f 92       	push	r6
    2ed6:	7f 92       	push	r7
    2ed8:	8f 92       	push	r8
    2eda:	9f 92       	push	r9
    2edc:	af 92       	push	r10
    2ede:	bf 92       	push	r11
    2ee0:	cf 92       	push	r12
    2ee2:	df 92       	push	r13
    2ee4:	ef 92       	push	r14
    2ee6:	ff 92       	push	r15
    2ee8:	0f 93       	push	r16
    2eea:	1f 93       	push	r17
    2eec:	cf 93       	push	r28
    2eee:	df 93       	push	r29
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	ca 1b       	sub	r28, r26
    2ef6:	db 0b       	sbc	r29, r27
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	09 94       	ijmp

00002f04 <__epilogue_restores__>:
    2f04:	2a 88       	ldd	r2, Y+18	; 0x12
    2f06:	39 88       	ldd	r3, Y+17	; 0x11
    2f08:	48 88       	ldd	r4, Y+16	; 0x10
    2f0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f10:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f12:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f14:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f16:	b9 84       	ldd	r11, Y+9	; 0x09
    2f18:	c8 84       	ldd	r12, Y+8	; 0x08
    2f1a:	df 80       	ldd	r13, Y+7	; 0x07
    2f1c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f1e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f20:	0c 81       	ldd	r16, Y+4	; 0x04
    2f22:	1b 81       	ldd	r17, Y+3	; 0x03
    2f24:	aa 81       	ldd	r26, Y+2	; 0x02
    2f26:	b9 81       	ldd	r27, Y+1	; 0x01
    2f28:	ce 0f       	add	r28, r30
    2f2a:	d1 1d       	adc	r29, r1
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	ed 01       	movw	r28, r26
    2f38:	08 95       	ret

00002f3a <_exit>:
    2f3a:	f8 94       	cli

00002f3c <__stop_program>:
    2f3c:	ff cf       	rjmp	.-2      	; 0x2f3c <__stop_program>
