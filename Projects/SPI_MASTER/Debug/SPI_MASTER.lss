
SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003d1e  00003db2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080018c  0080018c  00003ede  2**0
                  ALLOC
  3 .stab         00004734  00000000  00000000  00003ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002060  00000000  00000000  00008614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000a674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000a9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000c9d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000db36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000eb3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000ecdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000ef9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__vector_1>
       8:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <__vector_2>
       c:	0c 94 1a 19 	jmp	0x3234	; 0x3234 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__vector_10>
      2c:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 1d 	call	0x3aec	; 0x3aec <main>
      8a:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 56 1e 	jmp	0x3cac	; 0x3cac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 56 1e 	jmp	0x3cac	; 0x3cac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <SW_Def>:
/*********************************************************************************/
/*********************************************************************************/
#include "SW_interface.h"

void SW_Def(SW_t *SW)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <SW_Def+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <SW_Def+0x8>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
	switch(SW ->PUL_t)
     cb0:	e9 81       	ldd	r30, Y+1	; 0x01
     cb2:	fa 81       	ldd	r31, Y+2	; 0x02
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	3c 83       	std	Y+4, r19	; 0x04
     cbc:	2b 83       	std	Y+3, r18	; 0x03
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	d1 f0       	breq	.+52     	; 0xcfa <SW_Def+0x5a>
     cc6:	2b 81       	ldd	r18, Y+3	; 0x03
     cc8:	3c 81       	ldd	r19, Y+4	; 0x04
     cca:	21 30       	cpi	r18, 0x01	; 1
     ccc:	31 05       	cpc	r19, r1
     cce:	f9 f4       	brne	.+62     	; 0xd0e <SW_Def+0x6e>
	{
	case PULL_UP :
		DIO_u8SetPinDirection(SW->PORT,SW->PIN,INPUT);
     cd0:	e9 81       	ldd	r30, Y+1	; 0x01
     cd2:	fa 81       	ldd	r31, Y+2	; 0x02
     cd4:	80 81       	ld	r24, Z
     cd6:	e9 81       	ldd	r30, Y+1	; 0x01
     cd8:	fa 81       	ldd	r31, Y+2	; 0x02
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	69 2f       	mov	r22, r25
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	0e 94 4d 19 	call	0x329a	; 0x329a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(SW->PORT,SW->PIN,HIGH);
     ce4:	e9 81       	ldd	r30, Y+1	; 0x01
     ce6:	fa 81       	ldd	r31, Y+2	; 0x02
     ce8:	80 81       	ld	r24, Z
     cea:	e9 81       	ldd	r30, Y+1	; 0x01
     cec:	fa 81       	ldd	r31, Y+2	; 0x02
     cee:	91 81       	ldd	r25, Z+1	; 0x01
     cf0:	69 2f       	mov	r22, r25
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
     cf8:	0a c0       	rjmp	.+20     	; 0xd0e <SW_Def+0x6e>
		break;
	case PULL_DOWN :
		DIO_u8SetPinDirection(SW->PORT,SW->PIN,INPUT);
     cfa:	e9 81       	ldd	r30, Y+1	; 0x01
     cfc:	fa 81       	ldd	r31, Y+2	; 0x02
     cfe:	80 81       	ld	r24, Z
     d00:	e9 81       	ldd	r30, Y+1	; 0x01
     d02:	fa 81       	ldd	r31, Y+2	; 0x02
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	69 2f       	mov	r22, r25
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	0e 94 4d 19 	call	0x329a	; 0x329a <DIO_u8SetPinDirection>
		break;
	default:
		break;
	}
}
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <SW_GetState>:
u8 SW_GetState(SW_t* SW)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	27 97       	sbiw	r28, 0x07	; 7
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	9b 83       	std	Y+3, r25	; 0x03
     d32:	8a 83       	std	Y+2, r24	; 0x02
	u8 value;
	switch (SW ->PUL_t)
     d34:	ea 81       	ldd	r30, Y+2	; 0x02
     d36:	fb 81       	ldd	r31, Y+3	; 0x03
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	3e 83       	std	Y+6, r19	; 0x06
     d40:	2d 83       	std	Y+5, r18	; 0x05
     d42:	8d 81       	ldd	r24, Y+5	; 0x05
     d44:	9e 81       	ldd	r25, Y+6	; 0x06
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	a9 f0       	breq	.+42     	; 0xd74 <SW_GetState+0x58>
     d4a:	2d 81       	ldd	r18, Y+5	; 0x05
     d4c:	3e 81       	ldd	r19, Y+6	; 0x06
     d4e:	21 30       	cpi	r18, 0x01	; 1
     d50:	31 05       	cpc	r19, r1
     d52:	01 f5       	brne	.+64     	; 0xd94 <SW_GetState+0x78>
	{
	case PULL_UP :
		DIO_u8GetPinValue(SW->PORT,SW->PIN,&value);
     d54:	ea 81       	ldd	r30, Y+2	; 0x02
     d56:	fb 81       	ldd	r31, Y+3	; 0x03
     d58:	80 81       	ld	r24, Z
     d5a:	ea 81       	ldd	r30, Y+2	; 0x02
     d5c:	fb 81       	ldd	r31, Y+3	; 0x03
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	69 2f       	mov	r22, r25
     d62:	9e 01       	movw	r18, r28
     d64:	2f 5f       	subi	r18, 0xFF	; 255
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	a9 01       	movw	r20, r18
     d6a:	0e 94 03 1c 	call	0x3806	; 0x3806 <DIO_u8GetPinValue>
        return(value);
     d6e:	39 81       	ldd	r19, Y+1	; 0x01
     d70:	3c 83       	std	Y+4, r19	; 0x04
     d72:	11 c0       	rjmp	.+34     	; 0xd96 <SW_GetState+0x7a>
		break;

	case PULL_DOWN :
		DIO_u8GetPinValue(SW->PORT,SW->PIN,&value);
     d74:	ea 81       	ldd	r30, Y+2	; 0x02
     d76:	fb 81       	ldd	r31, Y+3	; 0x03
     d78:	80 81       	ld	r24, Z
     d7a:	ea 81       	ldd	r30, Y+2	; 0x02
     d7c:	fb 81       	ldd	r31, Y+3	; 0x03
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	69 2f       	mov	r22, r25
     d82:	9e 01       	movw	r18, r28
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	a9 01       	movw	r20, r18
     d8a:	0e 94 03 1c 	call	0x3806	; 0x3806 <DIO_u8GetPinValue>
		return(value);
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	8c 83       	std	Y+4, r24	; 0x04
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <SW_GetState+0x7a>
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <SW_GetState+0x7e>
		break;
	default :
		break;
	}
}
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	9f 83       	std	Y+7, r25	; 0x07
     d9a:	8f 81       	ldd	r24, Y+7	; 0x07
     d9c:	27 96       	adiw	r28, 0x07	; 7
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <SSD_setNumber>:
#include "SS_interface.h"
u8 SSD_setNumber(u8 Number , SSD_t* SSD)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <SSD_setNumber+0x6>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <SSD_setNumber+0x8>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <SSD_setNumber+0xa>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	7b 83       	std	Y+3, r23	; 0x03
     dc0:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8SetPortDirection(SSD->PORT,0xff);
     dc2:	ea 81       	ldd	r30, Y+2	; 0x02
     dc4:	fb 81       	ldd	r31, Y+3	; 0x03
     dc6:	81 81       	ldd	r24, Z+1	; 0x01
     dc8:	6f ef       	ldi	r22, 0xFF	; 255
     dca:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(SSD->PORT,SSD->COM_type ? segmentA[Number] : ~segmentA[Number]);
     dce:	ea 81       	ldd	r30, Y+2	; 0x02
     dd0:	fb 81       	ldd	r31, Y+3	; 0x03
     dd2:	81 81       	ldd	r24, Z+1	; 0x01
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	ea 81       	ldd	r30, Y+2	; 0x02
     dd8:	fb 81       	ldd	r31, Y+3	; 0x03
     dda:	80 81       	ld	r24, Z
     ddc:	88 23       	and	r24, r24
     dde:	49 f0       	breq	.+18     	; 0xdf2 <SSD_setNumber+0x44>
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	e8 59       	subi	r30, 0x98	; 152
     dea:	fe 4f       	sbci	r31, 0xFE	; 254
     dec:	90 81       	ld	r25, Z
     dee:	9c 83       	std	Y+4, r25	; 0x04
     df0:	0a c0       	rjmp	.+20     	; 0xe06 <SSD_setNumber+0x58>
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	fc 01       	movw	r30, r24
     dfa:	e8 59       	subi	r30, 0x98	; 152
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	80 81       	ld	r24, Z
     e00:	98 2f       	mov	r25, r24
     e02:	90 95       	com	r25
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	6c 81       	ldd	r22, Y+4	; 0x04
     e0a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <DIO_u8SetPortValue>
	DIO_u8SetPinDirection(SSD->EnablePort,SSD->EnablePin,OUTPUT);
     e0e:	ea 81       	ldd	r30, Y+2	; 0x02
     e10:	fb 81       	ldd	r31, Y+3	; 0x03
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	ea 81       	ldd	r30, Y+2	; 0x02
     e16:	fb 81       	ldd	r31, Y+3	; 0x03
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	69 2f       	mov	r22, r25
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 4d 19 	call	0x329a	; 0x329a <DIO_u8SetPinDirection>
}
     e22:	26 96       	adiw	r28, 0x06	; 6
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <SSD_Enable>:

u8 SSD_Enable(SSD_t*SSD)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <SSD_Enable+0x6>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <SSD_Enable+0x8>
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD -> COM_type)
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	80 81       	ld	r24, Z
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3c 83       	std	Y+4, r19	; 0x04
     e52:	2b 83       	std	Y+3, r18	; 0x03
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	31 f0       	breq	.+12     	; 0xe68 <SSD_Enable+0x34>
     e5c:	2b 81       	ldd	r18, Y+3	; 0x03
     e5e:	3c 81       	ldd	r19, Y+4	; 0x04
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	61 f0       	breq	.+24     	; 0xe7e <SSD_Enable+0x4a>
     e66:	15 c0       	rjmp	.+42     	; 0xe92 <SSD_Enable+0x5e>
	{
	case ANODE : DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,1) ;break;
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	e9 81       	ldd	r30, Y+1	; 0x01
     e70:	fa 81       	ldd	r31, Y+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	69 2f       	mov	r22, r25
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
     e7c:	0a c0       	rjmp	.+20     	; 0xe92 <SSD_Enable+0x5e>
	case CATHODE :DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,0); break;
     e7e:	e9 81       	ldd	r30, Y+1	; 0x01
     e80:	fa 81       	ldd	r31, Y+2	; 0x02
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	e9 81       	ldd	r30, Y+1	; 0x01
     e86:	fa 81       	ldd	r31, Y+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	69 2f       	mov	r22, r25
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
	default:break;
	}
}
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <SSD_Disable>:
u8 SSD_Disable(SSD_t*SSD)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <SSD_Disable+0x6>
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <SSD_Disable+0x8>
     eaa:	0f 92       	push	r0
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
	switch(SSD -> COM_type)
     eb4:	e9 81       	ldd	r30, Y+1	; 0x01
     eb6:	fa 81       	ldd	r31, Y+2	; 0x02
     eb8:	80 81       	ld	r24, Z
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3c 83       	std	Y+4, r19	; 0x04
     ec0:	2b 83       	std	Y+3, r18	; 0x03
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	31 f0       	breq	.+12     	; 0xed6 <SSD_Disable+0x34>
     eca:	2b 81       	ldd	r18, Y+3	; 0x03
     ecc:	3c 81       	ldd	r19, Y+4	; 0x04
     ece:	21 30       	cpi	r18, 0x01	; 1
     ed0:	31 05       	cpc	r19, r1
     ed2:	61 f0       	breq	.+24     	; 0xeec <SSD_Disable+0x4a>
     ed4:	15 c0       	rjmp	.+42     	; 0xf00 <SSD_Disable+0x5e>
	{
	case ANODE : DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,0);break;
     ed6:	e9 81       	ldd	r30, Y+1	; 0x01
     ed8:	fa 81       	ldd	r31, Y+2	; 0x02
     eda:	82 81       	ldd	r24, Z+2	; 0x02
     edc:	e9 81       	ldd	r30, Y+1	; 0x01
     ede:	fa 81       	ldd	r31, Y+2	; 0x02
     ee0:	93 81       	ldd	r25, Z+3	; 0x03
     ee2:	69 2f       	mov	r22, r25
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <SSD_Disable+0x5e>
	case CATHODE :DIO_u8SetPinValue(SSD->EnablePort,SSD->EnablePin,1);break;
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	e9 81       	ldd	r30, Y+1	; 0x01
     ef4:	fa 81       	ldd	r31, Y+2	; 0x02
     ef6:	93 81       	ldd	r25, Z+3	; 0x03
     ef8:	69 2f       	mov	r22, r25
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
	default:break;
	}
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <LED_TurnOn>:
/*********************************************************************************/
/*********************************************************************************/
#include "LED_interface.h"

u8 LED_TurnOn(LED_t* LED)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <LED_TurnOn+0x6>
     f16:	0f 92       	push	r0
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDirection(LED ->PORT,LED->PIN,OUTPUT);
     f20:	e9 81       	ldd	r30, Y+1	; 0x01
     f22:	fa 81       	ldd	r31, Y+2	; 0x02
     f24:	80 81       	ld	r24, Z
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	69 2f       	mov	r22, r25
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	0e 94 4d 19 	call	0x329a	; 0x329a <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(LED ->PORT,LED->PIN,HIGH);
     f34:	e9 81       	ldd	r30, Y+1	; 0x01
     f36:	fa 81       	ldd	r31, Y+2	; 0x02
     f38:	80 81       	ld	r24, Z
     f3a:	e9 81       	ldd	r30, Y+1	; 0x01
     f3c:	fa 81       	ldd	r31, Y+2	; 0x02
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	69 2f       	mov	r22, r25
     f42:	41 e0       	ldi	r20, 0x01	; 1
     f44:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <LED_TurnOff>:

u8 LED_TurnOff(LED_t* LED)
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	00 d0       	rcall	.+0      	; 0xf5a <LED_TurnOff+0x6>
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDirection(LED ->PORT,LED->PIN,OUTPUT);
     f64:	e9 81       	ldd	r30, Y+1	; 0x01
     f66:	fa 81       	ldd	r31, Y+2	; 0x02
     f68:	80 81       	ld	r24, Z
     f6a:	e9 81       	ldd	r30, Y+1	; 0x01
     f6c:	fa 81       	ldd	r31, Y+2	; 0x02
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	69 2f       	mov	r22, r25
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	0e 94 4d 19 	call	0x329a	; 0x329a <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(LED ->PORT,LED->PIN,LOW);
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	80 81       	ld	r24, Z
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	69 2f       	mov	r22, r25
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>

}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <LCD_voidSendCommand>:

#include "LCD_interface.h"
#include <util/delay.h>

void LCD_voidSendCommand(u8 Copy_u8Command)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	e9 97       	sbiw	r28, 0x39	; 57
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);


#elif LCD_MODE == FOUR_BIT
	/*set RS pin low for Command*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOW);
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
	/*Set RW pin LOW for Write*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
	/*Send Command in data PORT*/
	DIO_u8SetPortValue(LCD_DATA_PORT,(Copy_u8Command & 0xf0));
     fc2:	89 ad       	ldd	r24, Y+57	; 0x39
     fc4:	98 2f       	mov	r25, r24
     fc6:	90 7f       	andi	r25, 0xF0	; 240
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	69 2f       	mov	r22, r25
     fcc:	0e 94 ba 1b 	call	0x3774	; 0x3774 <DIO_u8SetPortValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	62 e0       	ldi	r22, 0x02	; 2
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 ea       	ldi	r26, 0xA0	; 160
     fe0:	b0 e4       	ldi	r27, 0x40	; 64
     fe2:	8d ab       	std	Y+53, r24	; 0x35
     fe4:	9e ab       	std	Y+54, r25	; 0x36
     fe6:	af ab       	std	Y+55, r26	; 0x37
     fe8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fea:	6d a9       	ldd	r22, Y+53	; 0x35
     fec:	7e a9       	ldd	r23, Y+54	; 0x36
     fee:	8f a9       	ldd	r24, Y+55	; 0x37
     ff0:	98 ad       	ldd	r25, Y+56	; 0x38
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a ef       	ldi	r20, 0xFA	; 250
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	89 ab       	std	Y+49, r24	; 0x31
    1004:	9a ab       	std	Y+50, r25	; 0x32
    1006:	ab ab       	std	Y+51, r26	; 0x33
    1008:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    100a:	69 a9       	ldd	r22, Y+49	; 0x31
    100c:	7a a9       	ldd	r23, Y+50	; 0x32
    100e:	8b a9       	ldd	r24, Y+51	; 0x33
    1010:	9c a9       	ldd	r25, Y+52	; 0x34
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	40 e8       	ldi	r20, 0x80	; 128
    1018:	5f e3       	ldi	r21, 0x3F	; 63
    101a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101e:	88 23       	and	r24, r24
    1020:	2c f4       	brge	.+10     	; 0x102c <LCD_voidSendCommand+0x94>
		__ticks = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	98 ab       	std	Y+48, r25	; 0x30
    1028:	8f a7       	std	Y+47, r24	; 0x2f
    102a:	3f c0       	rjmp	.+126    	; 0x10aa <LCD_voidSendCommand+0x112>
	else if (__tmp > 65535)
    102c:	69 a9       	ldd	r22, Y+49	; 0x31
    102e:	7a a9       	ldd	r23, Y+50	; 0x32
    1030:	8b a9       	ldd	r24, Y+51	; 0x33
    1032:	9c a9       	ldd	r25, Y+52	; 0x34
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	3f ef       	ldi	r19, 0xFF	; 255
    1038:	4f e7       	ldi	r20, 0x7F	; 127
    103a:	57 e4       	ldi	r21, 0x47	; 71
    103c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1040:	18 16       	cp	r1, r24
    1042:	4c f5       	brge	.+82     	; 0x1096 <LCD_voidSendCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1044:	6d a9       	ldd	r22, Y+53	; 0x35
    1046:	7e a9       	ldd	r23, Y+54	; 0x36
    1048:	8f a9       	ldd	r24, Y+55	; 0x37
    104a:	98 ad       	ldd	r25, Y+56	; 0x38
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e2       	ldi	r20, 0x20	; 32
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	98 ab       	std	Y+48, r25	; 0x30
    106a:	8f a7       	std	Y+47, r24	; 0x2f
    106c:	0f c0       	rjmp	.+30     	; 0x108c <LCD_voidSendCommand+0xf4>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9e a7       	std	Y+46, r25	; 0x2e
    1074:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1076:	8d a5       	ldd	r24, Y+45	; 0x2d
    1078:	9e a5       	ldd	r25, Y+46	; 0x2e
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_voidSendCommand+0xe2>
    107e:	9e a7       	std	Y+46, r25	; 0x2e
    1080:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1082:	8f a5       	ldd	r24, Y+47	; 0x2f
    1084:	98 a9       	ldd	r25, Y+48	; 0x30
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	98 ab       	std	Y+48, r25	; 0x30
    108a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108c:	8f a5       	ldd	r24, Y+47	; 0x2f
    108e:	98 a9       	ldd	r25, Y+48	; 0x30
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	69 f7       	brne	.-38     	; 0x106e <LCD_voidSendCommand+0xd6>
    1094:	14 c0       	rjmp	.+40     	; 0x10be <LCD_voidSendCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1096:	69 a9       	ldd	r22, Y+49	; 0x31
    1098:	7a a9       	ldd	r23, Y+50	; 0x32
    109a:	8b a9       	ldd	r24, Y+51	; 0x33
    109c:	9c a9       	ldd	r25, Y+52	; 0x34
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	98 ab       	std	Y+48, r25	; 0x30
    10a8:	8f a7       	std	Y+47, r24	; 0x2f
    10aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ac:	98 a9       	ldd	r25, Y+48	; 0x30
    10ae:	9c a7       	std	Y+44, r25	; 0x2c
    10b0:	8b a7       	std	Y+43, r24	; 0x2b
    10b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <LCD_voidSendCommand+0x11e>
    10ba:	9c a7       	std	Y+44, r25	; 0x2c
    10bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a8 e4       	ldi	r26, 0x48	; 72
    10ce:	b2 e4       	ldi	r27, 0x42	; 66
    10d0:	8f a3       	std	Y+39, r24	; 0x27
    10d2:	98 a7       	std	Y+40, r25	; 0x28
    10d4:	a9 a7       	std	Y+41, r26	; 0x29
    10d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	6f a1       	ldd	r22, Y+39	; 0x27
    10da:	78 a5       	ldd	r23, Y+40	; 0x28
    10dc:	89 a5       	ldd	r24, Y+41	; 0x29
    10de:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	4a ef       	ldi	r20, 0xFA	; 250
    10e6:	54 e4       	ldi	r21, 0x44	; 68
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	8b a3       	std	Y+35, r24	; 0x23
    10f2:	9c a3       	std	Y+36, r25	; 0x24
    10f4:	ad a3       	std	Y+37, r26	; 0x25
    10f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10f8:	6b a1       	ldd	r22, Y+35	; 0x23
    10fa:	7c a1       	ldd	r23, Y+36	; 0x24
    10fc:	8d a1       	ldd	r24, Y+37	; 0x25
    10fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110c:	88 23       	and	r24, r24
    110e:	2c f4       	brge	.+10     	; 0x111a <LCD_voidSendCommand+0x182>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9a a3       	std	Y+34, r25	; 0x22
    1116:	89 a3       	std	Y+33, r24	; 0x21
    1118:	3f c0       	rjmp	.+126    	; 0x1198 <LCD_voidSendCommand+0x200>
	else if (__tmp > 65535)
    111a:	6b a1       	ldd	r22, Y+35	; 0x23
    111c:	7c a1       	ldd	r23, Y+36	; 0x24
    111e:	8d a1       	ldd	r24, Y+37	; 0x25
    1120:	9e a1       	ldd	r25, Y+38	; 0x26
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	3f ef       	ldi	r19, 0xFF	; 255
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	57 e4       	ldi	r21, 0x47	; 71
    112a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112e:	18 16       	cp	r1, r24
    1130:	4c f5       	brge	.+82     	; 0x1184 <LCD_voidSendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1132:	6f a1       	ldd	r22, Y+39	; 0x27
    1134:	78 a5       	ldd	r23, Y+40	; 0x28
    1136:	89 a5       	ldd	r24, Y+41	; 0x29
    1138:	9a a5       	ldd	r25, Y+42	; 0x2a
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e2       	ldi	r20, 0x20	; 32
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9a a3       	std	Y+34, r25	; 0x22
    1158:	89 a3       	std	Y+33, r24	; 0x21
    115a:	0f c0       	rjmp	.+30     	; 0x117a <LCD_voidSendCommand+0x1e2>
    115c:	88 ec       	ldi	r24, 0xC8	; 200
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	98 a3       	std	Y+32, r25	; 0x20
    1162:	8f 8f       	std	Y+31, r24	; 0x1f
    1164:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1166:	98 a1       	ldd	r25, Y+32	; 0x20
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <LCD_voidSendCommand+0x1d0>
    116c:	98 a3       	std	Y+32, r25	; 0x20
    116e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	89 a1       	ldd	r24, Y+33	; 0x21
    1172:	9a a1       	ldd	r25, Y+34	; 0x22
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	9a a3       	std	Y+34, r25	; 0x22
    1178:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117a:	89 a1       	ldd	r24, Y+33	; 0x21
    117c:	9a a1       	ldd	r25, Y+34	; 0x22
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f7       	brne	.-38     	; 0x115c <LCD_voidSendCommand+0x1c4>
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <LCD_voidSendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1184:	6b a1       	ldd	r22, Y+35	; 0x23
    1186:	7c a1       	ldd	r23, Y+36	; 0x24
    1188:	8d a1       	ldd	r24, Y+37	; 0x25
    118a:	9e a1       	ldd	r25, Y+38	; 0x26
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9a a3       	std	Y+34, r25	; 0x22
    1196:	89 a3       	std	Y+33, r24	; 0x21
    1198:	89 a1       	ldd	r24, Y+33	; 0x21
    119a:	9a a1       	ldd	r25, Y+34	; 0x22
    119c:	9e 8f       	std	Y+30, r25	; 0x1e
    119e:	8d 8f       	std	Y+29, r24	; 0x1d
    11a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <LCD_voidSendCommand+0x20c>
    11a8:	9e 8f       	std	Y+30, r25	; 0x1e
    11aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
	/*Send Lower nipple*/
	DIO_u8SetPortValue(LCD_DATA_PORT,(Copy_u8Command << 4));
    11ac:	89 ad       	ldd	r24, Y+57	; 0x39
    11ae:	98 2f       	mov	r25, r24
    11b0:	92 95       	swap	r25
    11b2:	90 7f       	andi	r25, 0xF0	; 240
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	69 2f       	mov	r22, r25
    11b8:	0e 94 ba 1b 	call	0x3774	; 0x3774 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	62 e0       	ldi	r22, 0x02	; 2
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	a0 ea       	ldi	r26, 0xA0	; 160
    11cc:	b0 e4       	ldi	r27, 0x40	; 64
    11ce:	89 8f       	std	Y+25, r24	; 0x19
    11d0:	9a 8f       	std	Y+26, r25	; 0x1a
    11d2:	ab 8f       	std	Y+27, r26	; 0x1b
    11d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d6:	69 8d       	ldd	r22, Y+25	; 0x19
    11d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	4a ef       	ldi	r20, 0xFA	; 250
    11e4:	54 e4       	ldi	r21, 0x44	; 68
    11e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	8d 8b       	std	Y+21, r24	; 0x15
    11f0:	9e 8b       	std	Y+22, r25	; 0x16
    11f2:	af 8b       	std	Y+23, r26	; 0x17
    11f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f6:	6d 89       	ldd	r22, Y+21	; 0x15
    11f8:	7e 89       	ldd	r23, Y+22	; 0x16
    11fa:	8f 89       	ldd	r24, Y+23	; 0x17
    11fc:	98 8d       	ldd	r25, Y+24	; 0x18
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e8       	ldi	r20, 0x80	; 128
    1204:	5f e3       	ldi	r21, 0x3F	; 63
    1206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120a:	88 23       	and	r24, r24
    120c:	2c f4       	brge	.+10     	; 0x1218 <LCD_voidSendCommand+0x280>
		__ticks = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	3f c0       	rjmp	.+126    	; 0x1296 <LCD_voidSendCommand+0x2fe>
	else if (__tmp > 65535)
    1218:	6d 89       	ldd	r22, Y+21	; 0x15
    121a:	7e 89       	ldd	r23, Y+22	; 0x16
    121c:	8f 89       	ldd	r24, Y+23	; 0x17
    121e:	98 8d       	ldd	r25, Y+24	; 0x18
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	3f ef       	ldi	r19, 0xFF	; 255
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	57 e4       	ldi	r21, 0x47	; 71
    1228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	4c f5       	brge	.+82     	; 0x1282 <LCD_voidSendCommand+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e2       	ldi	r20, 0x20	; 32
    123e:	51 e4       	ldi	r21, 0x41	; 65
    1240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	bc 01       	movw	r22, r24
    124a:	cd 01       	movw	r24, r26
    124c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9c 8b       	std	Y+20, r25	; 0x14
    1256:	8b 8b       	std	Y+19, r24	; 0x13
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <LCD_voidSendCommand+0x2e0>
    125a:	88 ec       	ldi	r24, 0xC8	; 200
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9a 8b       	std	Y+18, r25	; 0x12
    1260:	89 8b       	std	Y+17, r24	; 0x11
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	9a 89       	ldd	r25, Y+18	; 0x12
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <LCD_voidSendCommand+0x2ce>
    126a:	9a 8b       	std	Y+18, r25	; 0x12
    126c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126e:	8b 89       	ldd	r24, Y+19	; 0x13
    1270:	9c 89       	ldd	r25, Y+20	; 0x14
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	9c 8b       	std	Y+20, r25	; 0x14
    1276:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1278:	8b 89       	ldd	r24, Y+19	; 0x13
    127a:	9c 89       	ldd	r25, Y+20	; 0x14
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	69 f7       	brne	.-38     	; 0x125a <LCD_voidSendCommand+0x2c2>
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <LCD_voidSendCommand+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1282:	6d 89       	ldd	r22, Y+21	; 0x15
    1284:	7e 89       	ldd	r23, Y+22	; 0x16
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	9c 8b       	std	Y+20, r25	; 0x14
    1294:	8b 8b       	std	Y+19, r24	; 0x13
    1296:	8b 89       	ldd	r24, Y+19	; 0x13
    1298:	9c 89       	ldd	r25, Y+20	; 0x14
    129a:	98 8b       	std	Y+16, r25	; 0x10
    129c:	8f 87       	std	Y+15, r24	; 0x0f
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <LCD_voidSendCommand+0x30a>
    12a6:	98 8b       	std	Y+16, r25	; 0x10
    12a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	62 e0       	ldi	r22, 0x02	; 2
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a8 e4       	ldi	r26, 0x48	; 72
    12ba:	b2 e4       	ldi	r27, 0x42	; 66
    12bc:	8b 87       	std	Y+11, r24	; 0x0b
    12be:	9c 87       	std	Y+12, r25	; 0x0c
    12c0:	ad 87       	std	Y+13, r26	; 0x0d
    12c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4a ef       	ldi	r20, 0xFA	; 250
    12d2:	54 e4       	ldi	r21, 0x44	; 68
    12d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8f 83       	std	Y+7, r24	; 0x07
    12de:	98 87       	std	Y+8, r25	; 0x08
    12e0:	a9 87       	std	Y+9, r26	; 0x09
    12e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e4:	6f 81       	ldd	r22, Y+7	; 0x07
    12e6:	78 85       	ldd	r23, Y+8	; 0x08
    12e8:	89 85       	ldd	r24, Y+9	; 0x09
    12ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <LCD_voidSendCommand+0x36e>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <LCD_voidSendCommand+0x3ec>
	else if (__tmp > 65535)
    1306:	6f 81       	ldd	r22, Y+7	; 0x07
    1308:	78 85       	ldd	r23, Y+8	; 0x08
    130a:	89 85       	ldd	r24, Y+9	; 0x09
    130c:	9a 85       	ldd	r25, Y+10	; 0x0a
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	57 e4       	ldi	r21, 0x47	; 71
    1316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <LCD_voidSendCommand+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1320:	7c 85       	ldd	r23, Y+12	; 0x0c
    1322:	8d 85       	ldd	r24, Y+13	; 0x0d
    1324:	9e 85       	ldd	r25, Y+14	; 0x0e
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <LCD_voidSendCommand+0x3ce>
    1348:	88 ec       	ldi	r24, 0xC8	; 200
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	8b 83       	std	Y+3, r24	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <LCD_voidSendCommand+0x3bc>
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f7       	brne	.-38     	; 0x1348 <LCD_voidSendCommand+0x3b0>
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <LCD_voidSendCommand+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	6f 81       	ldd	r22, Y+7	; 0x07
    1372:	78 85       	ldd	r23, Y+8	; 0x08
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	9a 85       	ldd	r25, Y+10	; 0x0a
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_voidSendCommand+0x3f8>
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
#endif
}
    1398:	e9 96       	adiw	r28, 0x39	; 57
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	6d 97       	sbiw	r28, 0x1d	; 29
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);


#elif LCD_MODE == FOUR_BIT
	/*set RS pin HIGH for DATA*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,HIGH );
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
	/*Set RW pin LOW for Write*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	40 e0       	ldi	r20, 0x00	; 0
    13d0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
	/*Send Command in data PORT*/
	DIO_u8SetPortValue(LCD_DATA_PORT,(Copy_u8Data & 0xf0));
    13d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d6:	98 2f       	mov	r25, r24
    13d8:	90 7f       	andi	r25, 0xF0	; 240
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	69 2f       	mov	r22, r25
    13de:	0e 94 ba 1b 	call	0x3774	; 0x3774 <DIO_u8SetPortValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	62 e0       	ldi	r22, 0x02	; 2
    13e6:	41 e0       	ldi	r20, 0x01	; 1
    13e8:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	a0 e0       	ldi	r26, 0x00	; 0
    13f2:	b0 e4       	ldi	r27, 0x40	; 64
    13f4:	89 8f       	std	Y+25, r24	; 0x19
    13f6:	9a 8f       	std	Y+26, r25	; 0x1a
    13f8:	ab 8f       	std	Y+27, r26	; 0x1b
    13fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	69 8d       	ldd	r22, Y+25	; 0x19
    13fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1400:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1402:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a ef       	ldi	r20, 0xFA	; 250
    140a:	54 e4       	ldi	r21, 0x44	; 68
    140c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	8d 8b       	std	Y+21, r24	; 0x15
    1416:	9e 8b       	std	Y+22, r25	; 0x16
    1418:	af 8b       	std	Y+23, r26	; 0x17
    141a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    141c:	6d 89       	ldd	r22, Y+21	; 0x15
    141e:	7e 89       	ldd	r23, Y+22	; 0x16
    1420:	8f 89       	ldd	r24, Y+23	; 0x17
    1422:	98 8d       	ldd	r25, Y+24	; 0x18
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <LCD_voidSendData+0x94>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9c 8b       	std	Y+20, r25	; 0x14
    143a:	8b 8b       	std	Y+19, r24	; 0x13
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <LCD_voidSendData+0x112>
	else if (__tmp > 65535)
    143e:	6d 89       	ldd	r22, Y+21	; 0x15
    1440:	7e 89       	ldd	r23, Y+22	; 0x16
    1442:	8f 89       	ldd	r24, Y+23	; 0x17
    1444:	98 8d       	ldd	r25, Y+24	; 0x18
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	4c f5       	brge	.+82     	; 0x14a8 <LCD_voidSendData+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	69 8d       	ldd	r22, Y+25	; 0x19
    1458:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	9c 8b       	std	Y+20, r25	; 0x14
    147c:	8b 8b       	std	Y+19, r24	; 0x13
    147e:	0f c0       	rjmp	.+30     	; 0x149e <LCD_voidSendData+0xf4>
    1480:	88 ec       	ldi	r24, 0xC8	; 200
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9a 8b       	std	Y+18, r25	; 0x12
    1486:	89 8b       	std	Y+17, r24	; 0x11
    1488:	89 89       	ldd	r24, Y+17	; 0x11
    148a:	9a 89       	ldd	r25, Y+18	; 0x12
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_voidSendData+0xe2>
    1490:	9a 8b       	std	Y+18, r25	; 0x12
    1492:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	8b 89       	ldd	r24, Y+19	; 0x13
    1496:	9c 89       	ldd	r25, Y+20	; 0x14
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9c 8b       	std	Y+20, r25	; 0x14
    149c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	8b 89       	ldd	r24, Y+19	; 0x13
    14a0:	9c 89       	ldd	r25, Y+20	; 0x14
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f7       	brne	.-38     	; 0x1480 <LCD_voidSendData+0xd6>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <LCD_voidSendData+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a8:	6d 89       	ldd	r22, Y+21	; 0x15
    14aa:	7e 89       	ldd	r23, Y+22	; 0x16
    14ac:	8f 89       	ldd	r24, Y+23	; 0x17
    14ae:	98 8d       	ldd	r25, Y+24	; 0x18
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9c 8b       	std	Y+20, r25	; 0x14
    14ba:	8b 8b       	std	Y+19, r24	; 0x13
    14bc:	8b 89       	ldd	r24, Y+19	; 0x13
    14be:	9c 89       	ldd	r25, Y+20	; 0x14
    14c0:	98 8b       	std	Y+16, r25	; 0x10
    14c2:	8f 87       	std	Y+15, r24	; 0x0f
    14c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c6:	98 89       	ldd	r25, Y+16	; 0x10
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <LCD_voidSendData+0x11e>
    14cc:	98 8b       	std	Y+16, r25	; 0x10
    14ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	62 e0       	ldi	r22, 0x02	; 2
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
	/*Send Lower Data*/
	DIO_u8SetPortValue(LCD_DATA_PORT,(Copy_u8Data << 4));
    14da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14dc:	98 2f       	mov	r25, r24
    14de:	92 95       	swap	r25
    14e0:	90 7f       	andi	r25, 0xF0	; 240
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	69 2f       	mov	r22, r25
    14e6:	0e 94 ba 1b 	call	0x3774	; 0x3774 <DIO_u8SetPortValue>
	/*Send Enable Pulse*/
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 e0       	ldi	r26, 0x00	; 0
    14fa:	b0 e4       	ldi	r27, 0x40	; 64
    14fc:	8b 87       	std	Y+11, r24	; 0x0b
    14fe:	9c 87       	std	Y+12, r25	; 0x0c
    1500:	ad 87       	std	Y+13, r26	; 0x0d
    1502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1504:	6b 85       	ldd	r22, Y+11	; 0x0b
    1506:	7c 85       	ldd	r23, Y+12	; 0x0c
    1508:	8d 85       	ldd	r24, Y+13	; 0x0d
    150a:	9e 85       	ldd	r25, Y+14	; 0x0e
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	4a ef       	ldi	r20, 0xFA	; 250
    1512:	54 e4       	ldi	r21, 0x44	; 68
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	8f 83       	std	Y+7, r24	; 0x07
    151e:	98 87       	std	Y+8, r25	; 0x08
    1520:	a9 87       	std	Y+9, r26	; 0x09
    1522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1524:	6f 81       	ldd	r22, Y+7	; 0x07
    1526:	78 85       	ldd	r23, Y+8	; 0x08
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	2c f4       	brge	.+10     	; 0x1546 <LCD_voidSendData+0x19c>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <LCD_voidSendData+0x21a>
	else if (__tmp > 65535)
    1546:	6f 81       	ldd	r22, Y+7	; 0x07
    1548:	78 85       	ldd	r23, Y+8	; 0x08
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	57 e4       	ldi	r21, 0x47	; 71
    1556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	4c f5       	brge	.+82     	; 0x15b0 <LCD_voidSendData+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1560:	7c 85       	ldd	r23, Y+12	; 0x0c
    1562:	8d 85       	ldd	r24, Y+13	; 0x0d
    1564:	9e 85       	ldd	r25, Y+14	; 0x0e
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e2       	ldi	r20, 0x20	; 32
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <LCD_voidSendData+0x1fc>
    1588:	88 ec       	ldi	r24, 0xC8	; 200
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <LCD_voidSendData+0x1ea>
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f7       	brne	.-38     	; 0x1588 <LCD_voidSendData+0x1de>
    15ae:	14 c0       	rjmp	.+40     	; 0x15d8 <LCD_voidSendData+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_voidSendData+0x226>
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	62 e0       	ldi	r22, 0x02	; 2
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
#endif
}
    15e2:	6d 96       	adiw	r28, 0x1d	; 29
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <LCD_voidInit>:

void LCD_voidInit(void)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	2e 97       	sbiw	r28, 0x0e	; 14
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a0 ef       	ldi	r26, 0xF0	; 240
    160e:	b1 e4       	ldi	r27, 0x41	; 65
    1610:	8b 87       	std	Y+11, r24	; 0x0b
    1612:	9c 87       	std	Y+12, r25	; 0x0c
    1614:	ad 87       	std	Y+13, r26	; 0x0d
    1616:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1618:	6b 85       	ldd	r22, Y+11	; 0x0b
    161a:	7c 85       	ldd	r23, Y+12	; 0x0c
    161c:	8d 85       	ldd	r24, Y+13	; 0x0d
    161e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a ef       	ldi	r20, 0xFA	; 250
    1626:	54 e4       	ldi	r21, 0x44	; 68
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	8f 83       	std	Y+7, r24	; 0x07
    1632:	98 87       	std	Y+8, r25	; 0x08
    1634:	a9 87       	std	Y+9, r26	; 0x09
    1636:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1638:	6f 81       	ldd	r22, Y+7	; 0x07
    163a:	78 85       	ldd	r23, Y+8	; 0x08
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e8       	ldi	r20, 0x80	; 128
    1646:	5f e3       	ldi	r21, 0x3F	; 63
    1648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164c:	88 23       	and	r24, r24
    164e:	2c f4       	brge	.+10     	; 0x165a <LCD_voidInit+0x66>
		__ticks = 1;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	3f c0       	rjmp	.+126    	; 0x16d8 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    165a:	6f 81       	ldd	r22, Y+7	; 0x07
    165c:	78 85       	ldd	r23, Y+8	; 0x08
    165e:	89 85       	ldd	r24, Y+9	; 0x09
    1660:	9a 85       	ldd	r25, Y+10	; 0x0a
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	4f e7       	ldi	r20, 0x7F	; 127
    1668:	57 e4       	ldi	r21, 0x47	; 71
    166a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    166e:	18 16       	cp	r1, r24
    1670:	4c f5       	brge	.+82     	; 0x16c4 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1672:	6b 85       	ldd	r22, Y+11	; 0x0b
    1674:	7c 85       	ldd	r23, Y+12	; 0x0c
    1676:	8d 85       	ldd	r24, Y+13	; 0x0d
    1678:	9e 85       	ldd	r25, Y+14	; 0x0e
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e2       	ldi	r20, 0x20	; 32
    1680:	51 e4       	ldi	r21, 0x41	; 65
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <LCD_voidInit+0xc6>
    169c:	88 ec       	ldi	r24, 0xC8	; 200
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	9c 83       	std	Y+4, r25	; 0x04
    16a2:	8b 83       	std	Y+3, r24	; 0x03
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <LCD_voidInit+0xb4>
    16ac:	9c 83       	std	Y+4, r25	; 0x04
    16ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	69 f7       	brne	.-38     	; 0x169c <LCD_voidInit+0xa8>
    16c2:	14 c0       	rjmp	.+40     	; 0x16ec <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c4:	6f 81       	ldd	r22, Y+7	; 0x07
    16c6:	78 85       	ldd	r23, Y+8	; 0x08
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9e 83       	std	Y+6, r25	; 0x06
    16d6:	8d 83       	std	Y+5, r24	; 0x05
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	9e 81       	ldd	r25, Y+6	; 0x06
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <LCD_voidInit+0xf0>
    16e8:	9a 83       	std	Y+2, r25	; 0x02
    16ea:	89 83       	std	Y+1, r24	; 0x01


#elif LCD_MODE == FOUR_BIT

	_delay_ms(30);
	LCD_voidSendCommand(0x02);
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	0e 94 cc 07 	call	0xf98	; 0xf98 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x28);
    16f2:	88 e2       	ldi	r24, 0x28	; 40
    16f4:	0e 94 cc 07 	call	0xf98	; 0xf98 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x0c);
    16f8:	8c e0       	ldi	r24, 0x0C	; 12
    16fa:	0e 94 cc 07 	call	0xf98	; 0xf98 <LCD_voidSendCommand>
	LCD_voidSendCommand(0x06);
    16fe:	86 e0       	ldi	r24, 0x06	; 6
    1700:	0e 94 cc 07 	call	0xf98	; 0xf98 <LCD_voidSendCommand>

#endif

}
    1704:	2e 96       	adiw	r28, 0x0e	; 14
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	de bf       	out	0x3e, r29	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	cd bf       	out	0x3d, r28	; 61
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <LCD_voidSendString>:

void LCD_voidSendString(const char* String )
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <LCD_voidSendString+0x6>
    171c:	0f 92       	push	r0
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
    1722:	9b 83       	std	Y+3, r25	; 0x03
    1724:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter =  0 ;
    1726:	19 82       	std	Y+1, r1	; 0x01
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <LCD_voidSendString+0x30>
	while(String[Counter])
	{
		LCD_voidSendData(String[Counter]);
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	fc 01       	movw	r30, r24
    1736:	e2 0f       	add	r30, r18
    1738:	f3 1f       	adc	r31, r19
    173a:	80 81       	ld	r24, Z
    173c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_voidSendData>
		Counter++;
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	8f 5f       	subi	r24, 0xFF	; 255
    1744:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const char* String )
{
	u8 Counter =  0 ;
	while(String[Counter])
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	9b 81       	ldd	r25, Y+3	; 0x03
    1750:	fc 01       	movw	r30, r24
    1752:	e2 0f       	add	r30, r18
    1754:	f3 1f       	adc	r31, r19
    1756:	80 81       	ld	r24, Z
    1758:	88 23       	and	r24, r24
    175a:	39 f7       	brne	.-50     	; 0x172a <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[Counter]);
		Counter++;
	}
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 X_position,u8 Y_Position)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <LCD_voidGoToXY+0x6>
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	8a 83       	std	Y+2, r24	; 0x02
    1776:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	/*X position is the Row and Y is Col.
	 * Address of first row is from 0 to 0xf
	 * Second row is from 0x40 to 0x4f*/
	if(X_position==0)
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	88 23       	and	r24, r24
    177c:	19 f4       	brne	.+6      	; 0x1784 <LCD_voidGoToXY+0x1c>
	{
		Address =Y_Position;
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <LCD_voidGoToXY+0x28>
	}
	else if(X_position==1)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	19 f4       	brne	.+6      	; 0x1790 <LCD_voidGoToXY+0x28>
	{
		Address =0x40 + Y_Position ;
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	80 5c       	subi	r24, 0xC0	; 192
    178e:	89 83       	std	Y+1, r24	; 0x01
	}
	/*The command to set address that you want is 0b10000000
	 * So we add 128 to the address*/
	LCD_voidSendCommand((Address|0b10000000));
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	80 68       	ori	r24, 0x80	; 128
    1794:	0e 94 cc 07 	call	0xf98	; 0xf98 <LCD_voidSendCommand>
}
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <LCD_voidSpecialChar>:

void LCD_voidSpecialChar(u8* Pattern,u8 Block_no,u8 Xposition,u8 Yposition)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	27 97       	sbiw	r28, 0x07	; 7
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	6d 83       	std	Y+5, r22	; 0x05
    17be:	4e 83       	std	Y+6, r20	; 0x06
    17c0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Address = Block_no*8;
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(Address+64);
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	80 5c       	subi	r24, 0xC0	; 192
    17da:	0e 94 cc 07 	call	0xf98	; 0xf98 <LCD_voidSendCommand>
	for(u8 i=0 ;i<8;i++)
    17de:	19 82       	std	Y+1, r1	; 0x01
    17e0:	0e c0       	rjmp	.+28     	; 0x17fe <LCD_voidSpecialChar+0x5a>
	{
		LCD_voidSendData(Pattern[i]);
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	fc 01       	movw	r30, r24
    17ee:	e2 0f       	add	r30, r18
    17f0:	f3 1f       	adc	r31, r19
    17f2:	80 81       	ld	r24, Z
    17f4:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_voidSendData>

void LCD_voidSpecialChar(u8* Pattern,u8 Block_no,u8 Xposition,u8 Yposition)
{
	u8 Address = Block_no*8;
	LCD_voidSendCommand(Address+64);
	for(u8 i=0 ;i<8;i++)
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	8f 5f       	subi	r24, 0xFF	; 255
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	88 30       	cpi	r24, 0x08	; 8
    1802:	78 f3       	brcs	.-34     	; 0x17e2 <LCD_voidSpecialChar+0x3e>
	{
		LCD_voidSendData(Pattern[i]);
	}
	LCD_voidGoToXY(Xposition,Yposition);
    1804:	8e 81       	ldd	r24, Y+6	; 0x06
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	0e 94 b4 0b 	call	0x1768	; 0x1768 <LCD_voidGoToXY>
	LCD_voidSendData(Block_no);
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_voidSendData>
}
    1812:	27 96       	adiw	r28, 0x07	; 7
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <LCD_voidWriteNumber>:
void LCD_voidWriteNumber(u32 Number)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	63 97       	sbiw	r28, 0x13	; 19
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	68 8b       	std	Y+16, r22	; 0x10
    183a:	79 8b       	std	Y+17, r23	; 0x11
    183c:	8a 8b       	std	Y+18, r24	; 0x12
    183e:	9b 8b       	std	Y+19, r25	; 0x13
	u8 str[8];
	u8 i;
	u32 num;
	u8 rem;
	u8 len =0;
    1840:	19 82       	std	Y+1, r1	; 0x01
	num=Number;
    1842:	88 89       	ldd	r24, Y+16	; 0x10
    1844:	99 89       	ldd	r25, Y+17	; 0x11
    1846:	aa 89       	ldd	r26, Y+18	; 0x12
    1848:	bb 89       	ldd	r27, Y+19	; 0x13
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	ad 83       	std	Y+5, r26	; 0x05
    1850:	be 83       	std	Y+6, r27	; 0x06
    1852:	15 c0       	rjmp	.+42     	; 0x187e <LCD_voidWriteNumber+0x5a>
	while(num != 0)
	{
		len++;
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	8f 5f       	subi	r24, 0xFF	; 255
    1858:	89 83       	std	Y+1, r24	; 0x01
		num=num/10;
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	ad 81       	ldd	r26, Y+5	; 0x05
    1860:	be 81       	ldd	r27, Y+6	; 0x06
    1862:	2a e0       	ldi	r18, 0x0A	; 10
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <__udivmodsi4>
    1872:	da 01       	movw	r26, r20
    1874:	c9 01       	movw	r24, r18
    1876:	8b 83       	std	Y+3, r24	; 0x03
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	ad 83       	std	Y+5, r26	; 0x05
    187c:	be 83       	std	Y+6, r27	; 0x06
	u8 i;
	u32 num;
	u8 rem;
	u8 len =0;
	num=Number;
	while(num != 0)
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	ad 81       	ldd	r26, Y+5	; 0x05
    1884:	be 81       	ldd	r27, Y+6	; 0x06
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	a1 05       	cpc	r26, r1
    188a:	b1 05       	cpc	r27, r1
    188c:	19 f7       	brne	.-58     	; 0x1854 <LCD_voidWriteNumber+0x30>
	{
		len++;
		num=num/10;
	}
	if(len==0)
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	88 23       	and	r24, r24
    1892:	19 f4       	brne	.+6      	; 0x189a <LCD_voidWriteNumber+0x76>
	{
		LCD_voidSendData('0');
    1894:	80 e3       	ldi	r24, 0x30	; 48
    1896:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_voidSendData>

	}
	for(i=0;i<len;i++)
    189a:	1f 82       	std	Y+7, r1	; 0x07
    189c:	37 c0       	rjmp	.+110    	; 0x190c <LCD_voidWriteNumber+0xe8>
	{
		rem=Number%10;
    189e:	88 89       	ldd	r24, Y+16	; 0x10
    18a0:	99 89       	ldd	r25, Y+17	; 0x11
    18a2:	aa 89       	ldd	r26, Y+18	; 0x12
    18a4:	bb 89       	ldd	r27, Y+19	; 0x13
    18a6:	2a e0       	ldi	r18, 0x0A	; 10
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <__udivmodsi4>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8a 83       	std	Y+2, r24	; 0x02
		Number=Number/10;
    18bc:	88 89       	ldd	r24, Y+16	; 0x10
    18be:	99 89       	ldd	r25, Y+17	; 0x11
    18c0:	aa 89       	ldd	r26, Y+18	; 0x12
    18c2:	bb 89       	ldd	r27, Y+19	; 0x13
    18c4:	2a e0       	ldi	r18, 0x0A	; 10
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	50 e0       	ldi	r21, 0x00	; 0
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <__udivmodsi4>
    18d4:	da 01       	movw	r26, r20
    18d6:	c9 01       	movw	r24, r18
    18d8:	88 8b       	std	Y+16, r24	; 0x10
    18da:	99 8b       	std	Y+17, r25	; 0x11
    18dc:	aa 8b       	std	Y+18, r26	; 0x12
    18de:	bb 8b       	std	Y+19, r27	; 0x13
		str[len-(i+1)]=rem+'0';
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	8f 81       	ldd	r24, Y+7	; 0x07
    18e8:	88 2f       	mov	r24, r24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	80 95       	com	r24
    18ee:	90 95       	com	r25
    18f0:	28 0f       	add	r18, r24
    18f2:	39 1f       	adc	r19, r25
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	48 2f       	mov	r20, r24
    18f8:	40 5d       	subi	r20, 0xD0	; 208
    18fa:	ce 01       	movw	r24, r28
    18fc:	08 96       	adiw	r24, 0x08	; 8
    18fe:	fc 01       	movw	r30, r24
    1900:	e2 0f       	add	r30, r18
    1902:	f3 1f       	adc	r31, r19
    1904:	40 83       	st	Z, r20
	if(len==0)
	{
		LCD_voidSendData('0');

	}
	for(i=0;i<len;i++)
    1906:	8f 81       	ldd	r24, Y+7	; 0x07
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	8f 83       	std	Y+7, r24	; 0x07
    190c:	9f 81       	ldd	r25, Y+7	; 0x07
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	98 17       	cp	r25, r24
    1912:	28 f2       	brcs	.-118    	; 0x189e <LCD_voidWriteNumber+0x7a>
	{
		rem=Number%10;
		Number=Number/10;
		str[len-(i+1)]=rem+'0';
	}
	str[len]='\0';
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	ce 01       	movw	r24, r28
    191c:	08 96       	adiw	r24, 0x08	; 8
    191e:	fc 01       	movw	r30, r24
    1920:	e2 0f       	add	r30, r18
    1922:	f3 1f       	adc	r31, r19
    1924:	10 82       	st	Z, r1
	LCD_voidSendString(str);
    1926:	ce 01       	movw	r24, r28
    1928:	08 96       	adiw	r24, 0x08	; 8
    192a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <LCD_voidSendString>
}
    192e:	63 96       	adiw	r28, 0x13	; 19
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <KP_u8GetPressedKey>:
/*********************************************************************************/
/*********************************************************************************/
#include "KP_interface.h"

u8 KP_u8GetPressedKey(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <KP_u8GetPressedKey+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <KP_u8GetPressedKey+0x8>
    1948:	0f 92       	push	r0
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(KP_PORT, 0b00001111);
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	6f e0       	ldi	r22, 0x0F	; 15
    1952:	0e 94 5f 1a 	call	0x34be	; 0x34be <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(KP_PORT, 0xff);
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	6f ef       	ldi	r22, 0xFF	; 255
    195a:	0e 94 ba 1b 	call	0x3774	; 0x3774 <DIO_u8SetPortValue>
	 u8 PressedKey = NoPressedKey;
    195e:	8f ef       	ldi	r24, 0xFF	; 255
    1960:	8b 83       	std	Y+3, r24	; 0x03
	 u8 Column,Row;
	static u8 KP_arr[4][4]= KPD_arr_val;
	static u8 KP_ColArr[4] ={KP_Col1,KP_Col2,KP_Col3,KP_Col4};
	static u8 KP_RowArr[4] ={KP_Row1,KP_Row2,KP_Row3,KP_Row4};

	for(Column=0;Column<4;Column++)
    1962:	1a 82       	std	Y+2, r1	; 0x02
    1964:	6a c0       	rjmp	.+212    	; 0x1a3a <KP_u8GetPressedKey+0xfa>
	{
		/*activate current Column*/
		DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],LOW);
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	fc 01       	movw	r30, r24
    196e:	ea 58       	subi	r30, 0x8A	; 138
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	90 81       	ld	r25, Z
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	69 2f       	mov	r22, r25
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>

		for(Row=0;Row<4;Row++)
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	49 c0       	rjmp	.+146    	; 0x1a14 <KP_u8GetPressedKey+0xd4>
		{
			/*Check Row Pins*/
			DIO_u8GetPinValue(KP_PORT, KP_RowArr[Row],&PinState);
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	fc 01       	movw	r30, r24
    198a:	ee 58       	subi	r30, 0x8E	; 142
    198c:	fe 4f       	sbci	r31, 0xFE	; 254
    198e:	90 81       	ld	r25, Z
    1990:	9e 01       	movw	r18, r28
    1992:	2c 5f       	subi	r18, 0xFC	; 252
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	69 2f       	mov	r22, r25
    199a:	a9 01       	movw	r20, r18
    199c:	0e 94 03 1c 	call	0x3806	; 0x3806 <DIO_u8GetPinValue>
			/*Check pin state*/
			if(PinState==0)
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	88 23       	and	r24, r24
    19a4:	a1 f5       	brne	.+104    	; 0x1a0e <KP_u8GetPressedKey+0xce>
			{
				PressedKey=KP_arr[Row][Column];
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	48 2f       	mov	r20, r24
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	ca 01       	movw	r24, r20
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	82 0f       	add	r24, r18
    19be:	93 1f       	adc	r25, r19
    19c0:	fc 01       	movw	r30, r24
    19c2:	e6 58       	subi	r30, 0x86	; 134
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	80 81       	ld	r24, Z
    19c8:	8b 83       	std	Y+3, r24	; 0x03
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <KP_u8GetPressedKey+0xaa>
				while(PinState==0)
				{
					DIO_u8GetPinValue(KP_PORT, KP_RowArr[Row],&PinState);
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	fc 01       	movw	r30, r24
    19d4:	ee 58       	subi	r30, 0x8E	; 142
    19d6:	fe 4f       	sbci	r31, 0xFE	; 254
    19d8:	90 81       	ld	r25, Z
    19da:	9e 01       	movw	r18, r28
    19dc:	2c 5f       	subi	r18, 0xFC	; 252
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	69 2f       	mov	r22, r25
    19e4:	a9 01       	movw	r20, r18
    19e6:	0e 94 03 1c 	call	0x3806	; 0x3806 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KP_PORT, KP_RowArr[Row],&PinState);
			/*Check pin state*/
			if(PinState==0)
			{
				PressedKey=KP_arr[Row][Column];
				while(PinState==0)
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	88 23       	and	r24, r24
    19ee:	71 f3       	breq	.-36     	; 0x19cc <KP_u8GetPressedKey+0x8c>
				{
					DIO_u8GetPinValue(KP_PORT, KP_RowArr[Row],&PinState);
				}
				DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],HIGH);
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	fc 01       	movw	r30, r24
    19f8:	ea 58       	subi	r30, 0x8A	; 138
    19fa:	fe 4f       	sbci	r31, 0xFE	; 254
    19fc:	90 81       	ld	r25, Z
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	69 2f       	mov	r22, r25
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
				return PressedKey;
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
    1a0c:	1c c0       	rjmp	.+56     	; 0x1a46 <KP_u8GetPressedKey+0x106>
	for(Column=0;Column<4;Column++)
	{
		/*activate current Column*/
		DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],LOW);

		for(Row=0;Row<4;Row++)
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	08 f4       	brcc	.+2      	; 0x1a1c <KP_u8GetPressedKey+0xdc>
    1a1a:	b3 cf       	rjmp	.-154    	; 0x1982 <KP_u8GetPressedKey+0x42>
				DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],HIGH);
				return PressedKey;
			}
		}
		/*Deactivate Column*/
		DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],HIGH);
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	88 2f       	mov	r24, r24
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	fc 01       	movw	r30, r24
    1a24:	ea 58       	subi	r30, 0x8A	; 138
    1a26:	fe 4f       	sbci	r31, 0xFE	; 254
    1a28:	90 81       	ld	r25, Z
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	69 2f       	mov	r22, r25
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 a8 1a 	call	0x3550	; 0x3550 <DIO_u8SetPinValue>
	 u8 Column,Row;
	static u8 KP_arr[4][4]= KPD_arr_val;
	static u8 KP_ColArr[4] ={KP_Col1,KP_Col2,KP_Col3,KP_Col4};
	static u8 KP_RowArr[4] ={KP_Row1,KP_Row2,KP_Row3,KP_Row4};

	for(Column=0;Column<4;Column++)
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	8a 83       	std	Y+2, r24	; 0x02
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	84 30       	cpi	r24, 0x04	; 4
    1a3e:	08 f4       	brcc	.+2      	; 0x1a42 <KP_u8GetPressedKey+0x102>
    1a40:	92 cf       	rjmp	.-220    	; 0x1966 <KP_u8GetPressedKey+0x26>
		/*Deactivate Column*/
		DIO_u8SetPinValue(KP_PORT,KP_ColArr[Column],HIGH);
	}


	return PressedKey;
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <SPI_voidMasterInit>:
/*********************************************************************************/

#include"SPI_interface.h"

void SPI_voidMasterInit(void)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
	/*Set as Master*/
	SET_BIT(SPCR,SPCR_MSTR);
    1a60:	ad e2       	ldi	r26, 0x2D	; 45
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	ed e2       	ldi	r30, 0x2D	; 45
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 61       	ori	r24, 0x10	; 16
    1a6c:	8c 93       	st	X, r24

	/*Set Prescaler to Fosc/16*/
	SET_BIT(SPCR,SPCR_SPR0);
    1a6e:	ad e2       	ldi	r26, 0x2D	; 45
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	ed e2       	ldi	r30, 0x2D	; 45
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	81 60       	ori	r24, 0x01	; 1
    1a7a:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    1a7c:	ad e2       	ldi	r26, 0x2D	; 45
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	ed e2       	ldi	r30, 0x2D	; 45
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8d 7f       	andi	r24, 0xFD	; 253
    1a88:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
    1a8a:	ae e2       	ldi	r26, 0x2E	; 46
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ee e2       	ldi	r30, 0x2E	; 46
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8e 7f       	andi	r24, 0xFE	; 254
    1a96:	8c 93       	st	X, r24


	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    1a98:	ad e2       	ldi	r26, 0x2D	; 45
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ed e2       	ldi	r30, 0x2D	; 45
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	8c 93       	st	X, r24
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <SPI_voidSlaveInit>:



void SPI_voidSlaveInit(void)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
	/*Set as Slave*/
	CLR_BIT(SPCR,SPCR_MSTR);
    1ab4:	ad e2       	ldi	r26, 0x2D	; 45
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	ed e2       	ldi	r30, 0x2D	; 45
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8f 7e       	andi	r24, 0xEF	; 239
    1ac0:	8c 93       	st	X, r24


	/*SPI Enable*/
	SET_BIT(SPCR,SPCR_SPE);
    1ac2:	ad e2       	ldi	r26, 0x2D	; 45
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	ed e2       	ldi	r30, 0x2D	; 45
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	80 64       	ori	r24, 0x40	; 64
    1ace:	8c 93       	st	X, r24
}
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <SPI_u8TransCeive>:



u8 SPI_u8TransCeive(u8 Copy_u8Data)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	0f 92       	push	r0
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	89 83       	std	Y+1, r24	; 0x01

	/*Send Data*/
	SPDR=Copy_u8Data;
    1ae2:	ef e2       	ldi	r30, 0x2F	; 47
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	80 83       	st	Z, r24

	/*Wait untill Transfere is complete*/
	while (GET_BIT(SPSR,SPSR_SPIF)==0);
    1aea:	ee e2       	ldi	r30, 0x2E	; 46
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	88 23       	and	r24, r24
    1af2:	dc f7       	brge	.-10     	; 0x1aea <SPI_u8TransCeive+0x14>

	/*Return The data*/
	return SPDR;
    1af4:	ef e2       	ldi	r30, 0x2F	; 47
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
}
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <USART_voidInit>:
/*********************************************************************************/

#include "USART_interface.h"

void USART_voidInit(void)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	0f 92       	push	r0
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC=0;
    1b0c:	19 82       	std	Y+1, r1	; 0x01
	/*Write on UCSRC needs to be as such 0b1xxxxxxx*/
	/*Set Async mode && no parity && 1 Stop bit && 8-bit mode */
	SET_BIT(Local_u8UCSRC,URSEL);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	80 68       	ori	r24, 0x80	; 128
    1b12:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,UCSRC_UMSEL);
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	8f 7b       	andi	r24, 0xBF	; 191
    1b18:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,UCSRC_UCPOL);
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	8e 7f       	andi	r24, 0xFE	; 254
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,UCSRC_USBS);
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	87 7f       	andi	r24, 0xF7	; 247
    1b24:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,UCSRC_UMP0);
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	8f 7d       	andi	r24, 0xDF	; 223
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRC,UCSRC_UMP1);
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	8f 7e       	andi	r24, 0xEF	; 239
    1b30:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	82 60       	ori	r24, 0x02	; 2
    1b36:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	84 60       	ori	r24, 0x04	; 4
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	UCSRC=Local_u8UCSRC;
    1b3e:	e0 e4       	ldi	r30, 0x40	; 64
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	80 83       	st	Z, r24
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1b46:	aa e2       	ldi	r26, 0x2A	; 42
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	ea e2       	ldi	r30, 0x2A	; 42
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8b 7f       	andi	r24, 0xFB	; 251
    1b52:	8c 93       	st	X, r24

	/*Set BPS to 9600*/
	UBRRL=51;
    1b54:	e9 e2       	ldi	r30, 0x29	; 41
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	83 e3       	ldi	r24, 0x33	; 51
    1b5a:	80 83       	st	Z, r24

	/*Enable TX and RX*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    1b5c:	aa e2       	ldi	r26, 0x2A	; 42
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ea e2       	ldi	r30, 0x2A	; 42
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	80 61       	ori	r24, 0x10	; 16
    1b68:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN);
    1b6a:	aa e2       	ldi	r26, 0x2A	; 42
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	ea e2       	ldi	r30, 0x2A	; 42
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	88 60       	ori	r24, 0x08	; 8
    1b76:	8c 93       	st	X, r24
}
    1b78:	0f 90       	pop	r0
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <USART_voidSendData>:



void USART_voidSendData(u8 Data)
{
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	0f 92       	push	r0
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the Flag is Set*/
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
    1b8c:	eb e2       	ldi	r30, 0x2B	; 43
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	82 95       	swap	r24
    1b94:	86 95       	lsr	r24
    1b96:	87 70       	andi	r24, 0x07	; 7
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	81 70       	andi	r24, 0x01	; 1
    1b9e:	90 70       	andi	r25, 0x00	; 0
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	a1 f3       	breq	.-24     	; 0x1b8c <USART_voidSendData+0xc>

	UDR=Data;
    1ba4:	ec e2       	ldi	r30, 0x2C	; 44
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	80 83       	st	Z, r24
}
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <USART_u8ReadData>:



u8 USART_u8ReadData(void)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	/*Wait Until the recieve is complete*/
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
    1bbc:	eb e2       	ldi	r30, 0x2B	; 43
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 23       	and	r24, r24
    1bc4:	dc f7       	brge	.-10     	; 0x1bbc <USART_u8ReadData+0x8>

	return UDR;
    1bc6:	ec e2       	ldi	r30, 0x2C	; 44
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
}
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <PORT_voidInit>:
/*********************************************************************************/
/*********************************************************************************/
#include "Port_interface.h"

void PORT_voidInit(void)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR ;
    1bda:	ea e3       	ldi	r30, 0x3A	; 58
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	10 82       	st	Z, r1
	DDRB = PORTB_DIR ;
    1be0:	e7 e3       	ldi	r30, 0x37	; 55
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 ea       	ldi	r24, 0xA0	; 160
    1be6:	80 83       	st	Z, r24
	DDRC = PORTC_DIR ;
    1be8:	e4 e3       	ldi	r30, 0x34	; 52
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	10 82       	st	Z, r1
	DDRD = PORTD_DIR ;
    1bee:	e1 e3       	ldi	r30, 0x31	; 49
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	10 82       	st	Z, r1

	PORTA = PORTA_INT;
    1bf4:	eb e3       	ldi	r30, 0x3B	; 59
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	10 82       	st	Z, r1
	PORTB = PORTB_INT;
    1bfa:	e8 e3       	ldi	r30, 0x38	; 56
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 e1       	ldi	r24, 0x10	; 16
    1c00:	80 83       	st	Z, r24
	PORTC = PORTC_INT;
    1c02:	e5 e3       	ldi	r30, 0x35	; 53
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	10 82       	st	Z, r1
	PORTD = PORTD_INT;
    1c08:	e2 e3       	ldi	r30, 0x32	; 50
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	10 82       	st	Z, r1
}
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <DELAY_NonBlockHelper>:
static u8 Init_F=NOT_INITIALIZED;
static u16 Copy_u8Time=0;
static u8 Period=0;

void DELAY_NonBlockHelper(void)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	static u16 counter_ms=0;
	static u8 counter_us=0;
	counter_us++;
    1c1c:	80 91 96 01 	lds	r24, 0x0196
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 96 01 	sts	0x0196, r24
	if(Period==PERIODIC)
    1c26:	80 91 95 01 	lds	r24, 0x0195
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	21 f5       	brne	.+72     	; 0x1c76 <DELAY_NonBlockHelper+0x62>
	{
		if(counter_us==4)
    1c2e:	80 91 96 01 	lds	r24, 0x0196
    1c32:	84 30       	cpi	r24, 0x04	; 4
    1c34:	59 f4       	brne	.+22     	; 0x1c4c <DELAY_NonBlockHelper+0x38>
		{
			counter_ms++;
    1c36:	80 91 97 01 	lds	r24, 0x0197
    1c3a:	90 91 98 01 	lds	r25, 0x0198
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	90 93 98 01 	sts	0x0198, r25
    1c44:	80 93 97 01 	sts	0x0197, r24
			counter_us=0;
    1c48:	10 92 96 01 	sts	0x0196, r1
		}
		if(counter_ms==Copy_u8Time)
    1c4c:	20 91 97 01 	lds	r18, 0x0197
    1c50:	30 91 98 01 	lds	r19, 0x0198
    1c54:	80 91 93 01 	lds	r24, 0x0193
    1c58:	90 91 94 01 	lds	r25, 0x0194
    1c5c:	28 17       	cp	r18, r24
    1c5e:	39 07       	cpc	r19, r25
    1c60:	a1 f5       	brne	.+104    	; 0x1cca <DELAY_NonBlockHelper+0xb6>
		{
			TIMER0_COMPCallBack();
    1c62:	e0 91 8c 01 	lds	r30, 0x018C
    1c66:	f0 91 8d 01 	lds	r31, 0x018D
    1c6a:	09 95       	icall
			counter_ms=0;
    1c6c:	10 92 98 01 	sts	0x0198, r1
    1c70:	10 92 97 01 	sts	0x0197, r1
    1c74:	2a c0       	rjmp	.+84     	; 0x1cca <DELAY_NonBlockHelper+0xb6>
		}
	}
	else if (Period==NON_PERIODIC)
    1c76:	80 91 95 01 	lds	r24, 0x0195
    1c7a:	82 30       	cpi	r24, 0x02	; 2
    1c7c:	31 f5       	brne	.+76     	; 0x1cca <DELAY_NonBlockHelper+0xb6>
	{
		if(counter_us==4)
    1c7e:	80 91 96 01 	lds	r24, 0x0196
    1c82:	84 30       	cpi	r24, 0x04	; 4
    1c84:	59 f4       	brne	.+22     	; 0x1c9c <DELAY_NonBlockHelper+0x88>
		{
			counter_ms++;
    1c86:	80 91 97 01 	lds	r24, 0x0197
    1c8a:	90 91 98 01 	lds	r25, 0x0198
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	90 93 98 01 	sts	0x0198, r25
    1c94:	80 93 97 01 	sts	0x0197, r24
			counter_us=0;
    1c98:	10 92 96 01 	sts	0x0196, r1
		}
		if(counter_ms==Copy_u8Time)
    1c9c:	20 91 97 01 	lds	r18, 0x0197
    1ca0:	30 91 98 01 	lds	r19, 0x0198
    1ca4:	80 91 93 01 	lds	r24, 0x0193
    1ca8:	90 91 94 01 	lds	r25, 0x0194
    1cac:	28 17       	cp	r18, r24
    1cae:	39 07       	cpc	r19, r25
    1cb0:	61 f4       	brne	.+24     	; 0x1cca <DELAY_NonBlockHelper+0xb6>
		{
			TIMER0_COMPCallBack();
    1cb2:	e0 91 8c 01 	lds	r30, 0x018C
    1cb6:	f0 91 8d 01 	lds	r31, 0x018D
    1cba:	09 95       	icall
			counter_ms=0;
    1cbc:	10 92 98 01 	sts	0x0198, r1
    1cc0:	10 92 97 01 	sts	0x0197, r1
			TIMER0_COMPIntE(DISABLE);
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <TIMER0_COMPIntE>
		}
	}
}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <TIMER0_voidINIT>:

void TIMER0_voidINIT(u8 Copy_u8Mode,u8 Copy_u8Prescaler)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <TIMER0_voidINIT+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <TIMER0_voidINIT+0x8>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <TIMER0_voidINIT+0xa>
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	6a 83       	std	Y+2, r22	; 0x02
	Mode=Copy_u8Mode;
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	80 93 92 01 	sts	0x0192, r24
	/*Select TIMER0 Mode
	 * ->Normal
	 * ->PWM
	 * ->CTC
	 * ->Fast_PWM */
	switch(Copy_u8Mode)
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	3e 83       	std	Y+6, r19	; 0x06
    1cf0:	2d 83       	std	Y+5, r18	; 0x05
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	82 30       	cpi	r24, 0x02	; 2
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	29 f1       	breq	.+74     	; 0x1d46 <TIMER0_voidINIT+0x76>
    1cfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1d00:	23 30       	cpi	r18, 0x03	; 3
    1d02:	31 05       	cpc	r19, r1
    1d04:	34 f4       	brge	.+12     	; 0x1d12 <TIMER0_voidINIT+0x42>
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	61 f0       	breq	.+24     	; 0x1d28 <TIMER0_voidINIT+0x58>
    1d10:	46 c0       	rjmp	.+140    	; 0x1d9e <TIMER0_voidINIT+0xce>
    1d12:	2d 81       	ldd	r18, Y+5	; 0x05
    1d14:	3e 81       	ldd	r19, Y+6	; 0x06
    1d16:	23 30       	cpi	r18, 0x03	; 3
    1d18:	31 05       	cpc	r19, r1
    1d1a:	21 f1       	breq	.+72     	; 0x1d64 <TIMER0_voidINIT+0x94>
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	84 30       	cpi	r24, 0x04	; 4
    1d22:	91 05       	cpc	r25, r1
    1d24:	71 f1       	breq	.+92     	; 0x1d82 <TIMER0_voidINIT+0xb2>
    1d26:	3b c0       	rjmp	.+118    	; 0x1d9e <TIMER0_voidINIT+0xce>
	{
	case NORMAL :
		CLR_BIT(TCCR0,TCCR0_WGM00);
    1d28:	a3 e5       	ldi	r26, 0x53	; 83
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e3 e5       	ldi	r30, 0x53	; 83
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	8f 7b       	andi	r24, 0xBF	; 191
    1d34:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    1d36:	a3 e5       	ldi	r26, 0x53	; 83
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e3 e5       	ldi	r30, 0x53	; 83
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	87 7f       	andi	r24, 0xF7	; 247
    1d42:	8c 93       	st	X, r24
    1d44:	2c c0       	rjmp	.+88     	; 0x1d9e <TIMER0_voidINIT+0xce>
		break;
	case PWM :
		SET_BIT(TCCR0,TCCR0_WGM00);
    1d46:	a3 e5       	ldi	r26, 0x53	; 83
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e3 e5       	ldi	r30, 0x53	; 83
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 64       	ori	r24, 0x40	; 64
    1d52:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    1d54:	a3 e5       	ldi	r26, 0x53	; 83
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e3 e5       	ldi	r30, 0x53	; 83
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	87 7f       	andi	r24, 0xF7	; 247
    1d60:	8c 93       	st	X, r24
    1d62:	1d c0       	rjmp	.+58     	; 0x1d9e <TIMER0_voidINIT+0xce>
		break;
	case CTC :
		CLR_BIT(TCCR0,TCCR0_WGM00);
    1d64:	a3 e5       	ldi	r26, 0x53	; 83
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e3 e5       	ldi	r30, 0x53	; 83
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8f 7b       	andi	r24, 0xBF	; 191
    1d70:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    1d72:	a3 e5       	ldi	r26, 0x53	; 83
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e3 e5       	ldi	r30, 0x53	; 83
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 60       	ori	r24, 0x08	; 8
    1d7e:	8c 93       	st	X, r24
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <TIMER0_voidINIT+0xce>
		break;
	case FAST_PWM :
		SET_BIT(TCCR0,TCCR0_WGM00);
    1d82:	a3 e5       	ldi	r26, 0x53	; 83
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e3 e5       	ldi	r30, 0x53	; 83
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 64       	ori	r24, 0x40	; 64
    1d8e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    1d90:	a3 e5       	ldi	r26, 0x53	; 83
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e3 e5       	ldi	r30, 0x53	; 83
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 60       	ori	r24, 0x08	; 8
    1d9c:	8c 93       	st	X, r24
	 * ->DIV_64
	 * ->DIV_256
	 * ->DIV_1024
	 * ->EXT_T0_FALLING
	 * ->EXT_T0_RISING*/
	switch(Copy_u8Prescaler)
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	3c 83       	std	Y+4, r19	; 0x04
    1da6:	2b 83       	std	Y+3, r18	; 0x03
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dac:	84 30       	cpi	r24, 0x04	; 4
    1dae:	91 05       	cpc	r25, r1
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <TIMER0_voidINIT+0xe4>
    1db2:	71 c0       	rjmp	.+226    	; 0x1e96 <TIMER0_voidINIT+0x1c6>
    1db4:	2b 81       	ldd	r18, Y+3	; 0x03
    1db6:	3c 81       	ldd	r19, Y+4	; 0x04
    1db8:	25 30       	cpi	r18, 0x05	; 5
    1dba:	31 05       	cpc	r19, r1
    1dbc:	8c f4       	brge	.+34     	; 0x1de0 <TIMER0_voidINIT+0x110>
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	82 30       	cpi	r24, 0x02	; 2
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	d9 f1       	breq	.+118    	; 0x1e3e <TIMER0_voidINIT+0x16e>
    1dc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dca:	3c 81       	ldd	r19, Y+4	; 0x04
    1dcc:	23 30       	cpi	r18, 0x03	; 3
    1dce:	31 05       	cpc	r19, r1
    1dd0:	0c f0       	brlt	.+2      	; 0x1dd4 <TIMER0_voidINIT+0x104>
    1dd2:	4b c0       	rjmp	.+150    	; 0x1e6a <TIMER0_voidINIT+0x19a>
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	81 30       	cpi	r24, 0x01	; 1
    1dda:	91 05       	cpc	r25, r1
    1ddc:	d1 f0       	breq	.+52     	; 0x1e12 <TIMER0_voidINIT+0x142>
    1dde:	c8 c0       	rjmp	.+400    	; 0x1f70 <TIMER0_voidINIT+0x2a0>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	26 30       	cpi	r18, 0x06	; 6
    1de6:	31 05       	cpc	r19, r1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <TIMER0_voidINIT+0x11c>
    1dea:	81 c0       	rjmp	.+258    	; 0x1eee <TIMER0_voidINIT+0x21e>
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	86 30       	cpi	r24, 0x06	; 6
    1df2:	91 05       	cpc	r25, r1
    1df4:	0c f4       	brge	.+2      	; 0x1df8 <TIMER0_voidINIT+0x128>
    1df6:	65 c0       	rjmp	.+202    	; 0x1ec2 <TIMER0_voidINIT+0x1f2>
    1df8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfc:	27 30       	cpi	r18, 0x07	; 7
    1dfe:	31 05       	cpc	r19, r1
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <TIMER0_voidINIT+0x134>
    1e02:	8b c0       	rjmp	.+278    	; 0x1f1a <TIMER0_voidINIT+0x24a>
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	88 30       	cpi	r24, 0x08	; 8
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <TIMER0_voidINIT+0x140>
    1e0e:	9b c0       	rjmp	.+310    	; 0x1f46 <TIMER0_voidINIT+0x276>
    1e10:	af c0       	rjmp	.+350    	; 0x1f70 <TIMER0_voidINIT+0x2a0>
	{
	case NO_CLOCK :
		CLR_BIT(TCCR0,TCCR0_CS00);
    1e12:	a3 e5       	ldi	r26, 0x53	; 83
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e3 e5       	ldi	r30, 0x53	; 83
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8e 7f       	andi	r24, 0xFE	; 254
    1e1e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
    1e20:	a3 e5       	ldi	r26, 0x53	; 83
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e3 e5       	ldi	r30, 0x53	; 83
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	8d 7f       	andi	r24, 0xFD	; 253
    1e2c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    1e2e:	a3 e5       	ldi	r26, 0x53	; 83
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e3 e5       	ldi	r30, 0x53	; 83
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	8b 7f       	andi	r24, 0xFB	; 251
    1e3a:	8c 93       	st	X, r24
    1e3c:	99 c0       	rjmp	.+306    	; 0x1f70 <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_1 :
		SET_BIT(TCCR0,TCCR0_CS00);
    1e3e:	a3 e5       	ldi	r26, 0x53	; 83
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e3 e5       	ldi	r30, 0x53	; 83
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	81 60       	ori	r24, 0x01	; 1
    1e4a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
    1e4c:	a3 e5       	ldi	r26, 0x53	; 83
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e3 e5       	ldi	r30, 0x53	; 83
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	8d 7f       	andi	r24, 0xFD	; 253
    1e58:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    1e5a:	a3 e5       	ldi	r26, 0x53	; 83
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e3 e5       	ldi	r30, 0x53	; 83
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8b 7f       	andi	r24, 0xFB	; 251
    1e66:	8c 93       	st	X, r24
    1e68:	83 c0       	rjmp	.+262    	; 0x1f70 <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_8 :
		CLR_BIT(TCCR0,TCCR0_CS00);
    1e6a:	a3 e5       	ldi	r26, 0x53	; 83
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e3 e5       	ldi	r30, 0x53	; 83
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8e 7f       	andi	r24, 0xFE	; 254
    1e76:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1e78:	a3 e5       	ldi	r26, 0x53	; 83
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e3 e5       	ldi	r30, 0x53	; 83
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	82 60       	ori	r24, 0x02	; 2
    1e84:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    1e86:	a3 e5       	ldi	r26, 0x53	; 83
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e3 e5       	ldi	r30, 0x53	; 83
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	8b 7f       	andi	r24, 0xFB	; 251
    1e92:	8c 93       	st	X, r24
    1e94:	6d c0       	rjmp	.+218    	; 0x1f70 <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_64 :
		SET_BIT(TCCR0,TCCR0_CS00);
    1e96:	a3 e5       	ldi	r26, 0x53	; 83
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e3 e5       	ldi	r30, 0x53	; 83
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	81 60       	ori	r24, 0x01	; 1
    1ea2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1ea4:	a3 e5       	ldi	r26, 0x53	; 83
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e3 e5       	ldi	r30, 0x53	; 83
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	82 60       	ori	r24, 0x02	; 2
    1eb0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
    1eb2:	a3 e5       	ldi	r26, 0x53	; 83
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e3 e5       	ldi	r30, 0x53	; 83
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8b 7f       	andi	r24, 0xFB	; 251
    1ebe:	8c 93       	st	X, r24
    1ec0:	57 c0       	rjmp	.+174    	; 0x1f70 <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_256 :
		CLR_BIT(TCCR0,TCCR0_CS00);
    1ec2:	a3 e5       	ldi	r26, 0x53	; 83
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e3 e5       	ldi	r30, 0x53	; 83
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8e 7f       	andi	r24, 0xFE	; 254
    1ece:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
    1ed0:	a3 e5       	ldi	r26, 0x53	; 83
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e3 e5       	ldi	r30, 0x53	; 83
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	8d 7f       	andi	r24, 0xFD	; 253
    1edc:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
    1ede:	a3 e5       	ldi	r26, 0x53	; 83
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e3 e5       	ldi	r30, 0x53	; 83
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	84 60       	ori	r24, 0x04	; 4
    1eea:	8c 93       	st	X, r24
    1eec:	41 c0       	rjmp	.+130    	; 0x1f70 <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_1024 :
		SET_BIT(TCCR0,TCCR0_CS00);
    1eee:	a3 e5       	ldi	r26, 0x53	; 83
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e3 e5       	ldi	r30, 0x53	; 83
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	81 60       	ori	r24, 0x01	; 1
    1efa:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
    1efc:	a3 e5       	ldi	r26, 0x53	; 83
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e3 e5       	ldi	r30, 0x53	; 83
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	8d 7f       	andi	r24, 0xFD	; 253
    1f08:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
    1f0a:	a3 e5       	ldi	r26, 0x53	; 83
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e3 e5       	ldi	r30, 0x53	; 83
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	84 60       	ori	r24, 0x04	; 4
    1f16:	8c 93       	st	X, r24
    1f18:	2b c0       	rjmp	.+86     	; 0x1f70 <TIMER0_voidINIT+0x2a0>
		break;
	case EXT_T0_FALLING :
		CLR_BIT(TCCR0,TCCR0_CS00);
    1f1a:	a3 e5       	ldi	r26, 0x53	; 83
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e3 e5       	ldi	r30, 0x53	; 83
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8e 7f       	andi	r24, 0xFE	; 254
    1f26:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1f28:	a3 e5       	ldi	r26, 0x53	; 83
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e3 e5       	ldi	r30, 0x53	; 83
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	82 60       	ori	r24, 0x02	; 2
    1f34:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
    1f36:	a3 e5       	ldi	r26, 0x53	; 83
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e3 e5       	ldi	r30, 0x53	; 83
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	84 60       	ori	r24, 0x04	; 4
    1f42:	8c 93       	st	X, r24
    1f44:	15 c0       	rjmp	.+42     	; 0x1f70 <TIMER0_voidINIT+0x2a0>
		break;
	case EXT_T0_RISING :
		SET_BIT(TCCR0,TCCR0_CS00);
    1f46:	a3 e5       	ldi	r26, 0x53	; 83
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e3 e5       	ldi	r30, 0x53	; 83
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	81 60       	ori	r24, 0x01	; 1
    1f52:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1f54:	a3 e5       	ldi	r26, 0x53	; 83
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e3 e5       	ldi	r30, 0x53	; 83
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	82 60       	ori	r24, 0x02	; 2
    1f60:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
    1f62:	a3 e5       	ldi	r26, 0x53	; 83
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e3 e5       	ldi	r30, 0x53	; 83
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	84 60       	ori	r24, 0x04	; 4
    1f6e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1f70:	26 96       	adiw	r28, 0x06	; 6
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <TIMER0_SetCOMPValue>:


void TIMER0_SetCOMPValue(u8 Value)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	0f 92       	push	r0
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Value;
    1f8e:	ec e5       	ldi	r30, 0x5C	; 92
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	80 83       	st	Z, r24
}
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <TIMER0_SetOutMode>:

void TIMER0_SetOutMode(u8 Copy_u8OutMode)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	29 97       	sbiw	r28, 0x09	; 9
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	89 83       	std	Y+1, r24	; 0x01
	/*Copy_Mode ranges from 1-->4*/
	switch (Mode)
    1fb4:	80 91 92 01 	lds	r24, 0x0192
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	39 87       	std	Y+9, r19	; 0x09
    1fbe:	28 87       	std	Y+8, r18	; 0x08
    1fc0:	88 85       	ldd	r24, Y+8	; 0x08
    1fc2:	99 85       	ldd	r25, Y+9	; 0x09
    1fc4:	82 30       	cpi	r24, 0x02	; 2
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <TIMER0_SetOutMode+0x2e>
    1fca:	68 c0       	rjmp	.+208    	; 0x209c <TIMER0_SetOutMode+0xfe>
    1fcc:	28 85       	ldd	r18, Y+8	; 0x08
    1fce:	39 85       	ldd	r19, Y+9	; 0x09
    1fd0:	24 30       	cpi	r18, 0x04	; 4
    1fd2:	31 05       	cpc	r19, r1
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <TIMER0_SetOutMode+0x3a>
    1fd6:	a4 c0       	rjmp	.+328    	; 0x2120 <TIMER0_SetOutMode+0x182>
    1fd8:	88 85       	ldd	r24, Y+8	; 0x08
    1fda:	99 85       	ldd	r25, Y+9	; 0x09
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <TIMER0_SetOutMode+0x46>
    1fe2:	de c0       	rjmp	.+444    	; 0x21a0 <TIMER0_SetOutMode+0x202>
	case NORMAL :
		/* 1-OC0 disconnected
		 * 2-Toggle OC0 on Compare
		 * 3-Clear OC0 on Compare
		 * 4-Set OC0 on Compare*/
		switch(Copy_u8OutMode)
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	3f 83       	std	Y+7, r19	; 0x07
    1fec:	2e 83       	std	Y+6, r18	; 0x06
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	29 f1       	breq	.+74     	; 0x2042 <TIMER0_SetOutMode+0xa4>
    1ff8:	2e 81       	ldd	r18, Y+6	; 0x06
    1ffa:	3f 81       	ldd	r19, Y+7	; 0x07
    1ffc:	23 30       	cpi	r18, 0x03	; 3
    1ffe:	31 05       	cpc	r19, r1
    2000:	34 f4       	brge	.+12     	; 0x200e <TIMER0_SetOutMode+0x70>
    2002:	8e 81       	ldd	r24, Y+6	; 0x06
    2004:	9f 81       	ldd	r25, Y+7	; 0x07
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	91 05       	cpc	r25, r1
    200a:	61 f0       	breq	.+24     	; 0x2024 <TIMER0_SetOutMode+0x86>
    200c:	c9 c0       	rjmp	.+402    	; 0x21a0 <TIMER0_SetOutMode+0x202>
    200e:	2e 81       	ldd	r18, Y+6	; 0x06
    2010:	3f 81       	ldd	r19, Y+7	; 0x07
    2012:	23 30       	cpi	r18, 0x03	; 3
    2014:	31 05       	cpc	r19, r1
    2016:	21 f1       	breq	.+72     	; 0x2060 <TIMER0_SetOutMode+0xc2>
    2018:	8e 81       	ldd	r24, Y+6	; 0x06
    201a:	9f 81       	ldd	r25, Y+7	; 0x07
    201c:	84 30       	cpi	r24, 0x04	; 4
    201e:	91 05       	cpc	r25, r1
    2020:	71 f1       	breq	.+92     	; 0x207e <TIMER0_SetOutMode+0xe0>
    2022:	be c0       	rjmp	.+380    	; 0x21a0 <TIMER0_SetOutMode+0x202>
		{
		case DISC:
			CLR_BIT(TCCR0,TCCR0_COM00);
    2024:	a3 e5       	ldi	r26, 0x53	; 83
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e3 e5       	ldi	r30, 0x53	; 83
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8f 7e       	andi	r24, 0xEF	; 239
    2030:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM01);
    2032:	a3 e5       	ldi	r26, 0x53	; 83
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e3 e5       	ldi	r30, 0x53	; 83
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	8f 7d       	andi	r24, 0xDF	; 223
    203e:	8c 93       	st	X, r24
    2040:	af c0       	rjmp	.+350    	; 0x21a0 <TIMER0_SetOutMode+0x202>
			break;
		case TOGGLE:
			SET_BIT(TCCR0,TCCR0_COM00);
    2042:	a3 e5       	ldi	r26, 0x53	; 83
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e3 e5       	ldi	r30, 0x53	; 83
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	80 61       	ori	r24, 0x10	; 16
    204e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM01);
    2050:	a3 e5       	ldi	r26, 0x53	; 83
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e3 e5       	ldi	r30, 0x53	; 83
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8f 7d       	andi	r24, 0xDF	; 223
    205c:	8c 93       	st	X, r24
    205e:	a0 c0       	rjmp	.+320    	; 0x21a0 <TIMER0_SetOutMode+0x202>
			break;
		case CLEAR:
			CLR_BIT(TCCR0,TCCR0_COM00);
    2060:	a3 e5       	ldi	r26, 0x53	; 83
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e3 e5       	ldi	r30, 0x53	; 83
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	8f 7e       	andi	r24, 0xEF	; 239
    206c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    206e:	a3 e5       	ldi	r26, 0x53	; 83
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e3 e5       	ldi	r30, 0x53	; 83
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 62       	ori	r24, 0x20	; 32
    207a:	8c 93       	st	X, r24
    207c:	91 c0       	rjmp	.+290    	; 0x21a0 <TIMER0_SetOutMode+0x202>
			break;
		case SET:
			SET_BIT(TCCR0,TCCR0_COM00);
    207e:	a3 e5       	ldi	r26, 0x53	; 83
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e3 e5       	ldi	r30, 0x53	; 83
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	80 61       	ori	r24, 0x10	; 16
    208a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    208c:	a3 e5       	ldi	r26, 0x53	; 83
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e3 e5       	ldi	r30, 0x53	; 83
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	80 62       	ori	r24, 0x20	; 32
    2098:	8c 93       	st	X, r24
    209a:	82 c0       	rjmp	.+260    	; 0x21a0 <TIMER0_SetOutMode+0x202>
		case PWM :
			/* 1-OC0 DISCONNECTED
			 * 2-RESERVED
			 * 3-Clear OC0 on compare when UP-Counting && Set OC0 on compare when DOWN-COUNTING
			 * 4-Set OC0 on compare when UP-Counting && Clear OC0 on compare when DOWN-COUNTING*/
			switch(Copy_u8OutMode)
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	3d 83       	std	Y+5, r19	; 0x05
    20a4:	2c 83       	std	Y+4, r18	; 0x04
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	83 30       	cpi	r24, 0x03	; 3
    20ac:	91 05       	cpc	r25, r1
    20ae:	d1 f0       	breq	.+52     	; 0x20e4 <TIMER0_SetOutMode+0x146>
    20b0:	2c 81       	ldd	r18, Y+4	; 0x04
    20b2:	3d 81       	ldd	r19, Y+5	; 0x05
    20b4:	24 30       	cpi	r18, 0x04	; 4
    20b6:	31 05       	cpc	r19, r1
    20b8:	21 f1       	breq	.+72     	; 0x2102 <TIMER0_SetOutMode+0x164>
    20ba:	8c 81       	ldd	r24, Y+4	; 0x04
    20bc:	9d 81       	ldd	r25, Y+5	; 0x05
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	91 05       	cpc	r25, r1
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <TIMER0_SetOutMode+0x128>
    20c4:	6d c0       	rjmp	.+218    	; 0x21a0 <TIMER0_SetOutMode+0x202>
			{
			case PWM_DISC :
				CLR_BIT(TCCR0,TCCR0_COM00);
    20c6:	a3 e5       	ldi	r26, 0x53	; 83
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e3 e5       	ldi	r30, 0x53	; 83
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 7e       	andi	r24, 0xEF	; 239
    20d2:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,TCCR0_COM01);
    20d4:	a3 e5       	ldi	r26, 0x53	; 83
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e3 e5       	ldi	r30, 0x53	; 83
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	8f 7d       	andi	r24, 0xDF	; 223
    20e0:	8c 93       	st	X, r24
    20e2:	5e c0       	rjmp	.+188    	; 0x21a0 <TIMER0_SetOutMode+0x202>
				break;
			case PWM_CLR_UP :
				CLR_BIT(TCCR0,TCCR0_COM00);
    20e4:	a3 e5       	ldi	r26, 0x53	; 83
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e3 e5       	ldi	r30, 0x53	; 83
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8f 7e       	andi	r24, 0xEF	; 239
    20f0:	8c 93       	st	X, r24
				SET_BIT(TCCR0,TCCR0_COM01);
    20f2:	a3 e5       	ldi	r26, 0x53	; 83
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	e3 e5       	ldi	r30, 0x53	; 83
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	80 62       	ori	r24, 0x20	; 32
    20fe:	8c 93       	st	X, r24
    2100:	4f c0       	rjmp	.+158    	; 0x21a0 <TIMER0_SetOutMode+0x202>
				break;
			case PWM_SET_UP :
				SET_BIT(TCCR0,TCCR0_COM00);
    2102:	a3 e5       	ldi	r26, 0x53	; 83
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e3 e5       	ldi	r30, 0x53	; 83
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	80 61       	ori	r24, 0x10	; 16
    210e:	8c 93       	st	X, r24
				SET_BIT(TCCR0,TCCR0_COM01);
    2110:	a3 e5       	ldi	r26, 0x53	; 83
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e3 e5       	ldi	r30, 0x53	; 83
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 62       	ori	r24, 0x20	; 32
    211c:	8c 93       	st	X, r24
    211e:	40 c0       	rjmp	.+128    	; 0x21a0 <TIMER0_SetOutMode+0x202>
			case FAST_PWM :
				/* 1-OC0 DISCONNECTED
				 * 2-RESERVED
				 * 3-Clear on compare && Set on Top
				 * 4-Set on Compare && clear on Top*/
				switch(Copy_u8OutMode)
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	3b 83       	std	Y+3, r19	; 0x03
    2128:	2a 83       	std	Y+2, r18	; 0x02
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	9b 81       	ldd	r25, Y+3	; 0x03
    212e:	83 30       	cpi	r24, 0x03	; 3
    2130:	91 05       	cpc	r25, r1
    2132:	c9 f0       	breq	.+50     	; 0x2166 <TIMER0_SetOutMode+0x1c8>
    2134:	2a 81       	ldd	r18, Y+2	; 0x02
    2136:	3b 81       	ldd	r19, Y+3	; 0x03
    2138:	24 30       	cpi	r18, 0x04	; 4
    213a:	31 05       	cpc	r19, r1
    213c:	19 f1       	breq	.+70     	; 0x2184 <TIMER0_SetOutMode+0x1e6>
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	91 05       	cpc	r25, r1
    2146:	61 f5       	brne	.+88     	; 0x21a0 <TIMER0_SetOutMode+0x202>
				{
				case FAST_PWM_DISC :
					CLR_BIT(TCCR0,TCCR0_COM00);
    2148:	a3 e5       	ldi	r26, 0x53	; 83
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e3 e5       	ldi	r30, 0x53	; 83
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	8f 7e       	andi	r24, 0xEF	; 239
    2154:	8c 93       	st	X, r24
					CLR_BIT(TCCR0,TCCR0_COM01);
    2156:	a3 e5       	ldi	r26, 0x53	; 83
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e3 e5       	ldi	r30, 0x53	; 83
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	8f 7d       	andi	r24, 0xDF	; 223
    2162:	8c 93       	st	X, r24
    2164:	1d c0       	rjmp	.+58     	; 0x21a0 <TIMER0_SetOutMode+0x202>
					break;
				case FAST_PWM_CLR_COMP :
					CLR_BIT(TCCR0,TCCR0_COM00);
    2166:	a3 e5       	ldi	r26, 0x53	; 83
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e3 e5       	ldi	r30, 0x53	; 83
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	8f 7e       	andi	r24, 0xEF	; 239
    2172:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_COM01);
    2174:	a3 e5       	ldi	r26, 0x53	; 83
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e3 e5       	ldi	r30, 0x53	; 83
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 62       	ori	r24, 0x20	; 32
    2180:	8c 93       	st	X, r24
    2182:	0e c0       	rjmp	.+28     	; 0x21a0 <TIMER0_SetOutMode+0x202>
					break;
				case FAST_PWM_SET_COMP :
					SET_BIT(TCCR0,TCCR0_COM00);
    2184:	a3 e5       	ldi	r26, 0x53	; 83
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e3 e5       	ldi	r30, 0x53	; 83
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	80 61       	ori	r24, 0x10	; 16
    2190:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_COM01);
    2192:	a3 e5       	ldi	r26, 0x53	; 83
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e3 e5       	ldi	r30, 0x53	; 83
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	80 62       	ori	r24, 0x20	; 32
    219e:	8c 93       	st	X, r24
				break;
				default:
					break;
	}

}
    21a0:	29 96       	adiw	r28, 0x09	; 9
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <TIMER0_COMPIntE>:

void TIMER0_COMPIntE(u8 Copy_u8Enable)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <TIMER0_COMPIntE+0x6>
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Enable)
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	3b 83       	std	Y+3, r19	; 0x03
    21c8:	2a 83       	std	Y+2, r18	; 0x02
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	91 05       	cpc	r25, r1
    21d2:	31 f0       	breq	.+12     	; 0x21e0 <TIMER0_COMPIntE+0x2e>
    21d4:	2a 81       	ldd	r18, Y+2	; 0x02
    21d6:	3b 81       	ldd	r19, Y+3	; 0x03
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	49 f0       	breq	.+18     	; 0x21f0 <TIMER0_COMPIntE+0x3e>
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <TIMER0_COMPIntE+0x4c>
	{
	case ENABLE :
		SET_BIT(TIMSK,TIMSK_OCIE0);
    21e0:	a9 e5       	ldi	r26, 0x59	; 89
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e9 e5       	ldi	r30, 0x59	; 89
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	82 60       	ori	r24, 0x02	; 2
    21ec:	8c 93       	st	X, r24
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <TIMER0_COMPIntE+0x4c>
		break;
	case DISABLE :
		CLR_BIT(TIMSK,TIMSK_OCIE0);
    21f0:	a9 e5       	ldi	r26, 0x59	; 89
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e9 e5       	ldi	r30, 0x59	; 89
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	8d 7f       	andi	r24, 0xFD	; 253
    21fc:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <TIMER0_OVFIntE>:

void TIMER0_OVFIntE(u8 Copy_u8Enable)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <TIMER0_OVFIntE+0x6>
    2210:	0f 92       	push	r0
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Enable)
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	3b 83       	std	Y+3, r19	; 0x03
    2220:	2a 83       	std	Y+2, r18	; 0x02
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	91 05       	cpc	r25, r1
    222a:	31 f0       	breq	.+12     	; 0x2238 <TIMER0_OVFIntE+0x2e>
    222c:	2a 81       	ldd	r18, Y+2	; 0x02
    222e:	3b 81       	ldd	r19, Y+3	; 0x03
    2230:	22 30       	cpi	r18, 0x02	; 2
    2232:	31 05       	cpc	r19, r1
    2234:	49 f0       	breq	.+18     	; 0x2248 <TIMER0_OVFIntE+0x3e>
    2236:	0f c0       	rjmp	.+30     	; 0x2256 <TIMER0_OVFIntE+0x4c>
	{
	case ENABLE :
		SET_BIT(TIMSK,TIMSK_TOIE0);
    2238:	a9 e5       	ldi	r26, 0x59	; 89
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e9 e5       	ldi	r30, 0x59	; 89
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	81 60       	ori	r24, 0x01	; 1
    2244:	8c 93       	st	X, r24
    2246:	07 c0       	rjmp	.+14     	; 0x2256 <TIMER0_OVFIntE+0x4c>
		break;
	case DISABLE :
		CLR_BIT(TIMSK,TIMSK_TOIE0);
    2248:	a9 e5       	ldi	r26, 0x59	; 89
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e9 e5       	ldi	r30, 0x59	; 89
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	8e 7f       	andi	r24, 0xFE	; 254
    2254:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <TIMER0_u8COMPCallBackFunc>:

u8 TIMER0_u8COMPCallBackFunc(void(*pvNotfication)(void))
{
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <TIMER0_u8COMPCallBackFunc+0x6>
    2268:	0f 92       	push	r0
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	9b 83       	std	Y+3, r25	; 0x03
    2270:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    2272:	19 82       	std	Y+1, r1	; 0x01
	if(pvNotfication!=NULL)
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	9b 81       	ldd	r25, Y+3	; 0x03
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	39 f0       	breq	.+14     	; 0x228a <TIMER0_u8COMPCallBackFunc+0x28>
	{
		TIMER0_COMPCallBack = pvNotfication;
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	90 93 8d 01 	sts	0x018D, r25
    2284:	80 93 8c 01 	sts	0x018C, r24
    2288:	02 c0       	rjmp	.+4      	; 0x228e <TIMER0_u8COMPCallBackFunc+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = P_NULL;
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    228e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <TIMER0_u8OVFCallBackFunc>:

u8 TIMER0_u8OVFCallBackFunc(void(*pvNotfication)(void))
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <TIMER0_u8OVFCallBackFunc+0x6>
    22a2:	0f 92       	push	r0
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	9b 83       	std	Y+3, r25	; 0x03
    22aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    22ac:	19 82       	std	Y+1, r1	; 0x01
	if(pvNotfication!=NULL)
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	9b 81       	ldd	r25, Y+3	; 0x03
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	39 f0       	breq	.+14     	; 0x22c4 <TIMER0_u8OVFCallBackFunc+0x28>
	{
		TIMER0_OVFCallBack = pvNotfication;
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ba:	90 93 8f 01 	sts	0x018F, r25
    22be:	80 93 8e 01 	sts	0x018E, r24
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <TIMER0_u8OVFCallBackFunc+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = P_NULL;
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <DELYA_voidNonBlockDelay>:


void DELYA_voidNonBlockDelay(u16 Copy_ms, void(*pvFunc)(void) ,u8 Copy_u8Periodic)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <DELYA_voidNonBlockDelay+0x6>
    22dc:	00 d0       	rcall	.+0      	; 0x22de <DELYA_voidNonBlockDelay+0x8>
    22de:	0f 92       	push	r0
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	9a 83       	std	Y+2, r25	; 0x02
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	7c 83       	std	Y+4, r23	; 0x04
    22ea:	6b 83       	std	Y+3, r22	; 0x03
    22ec:	4d 83       	std	Y+5, r20	; 0x05
	if(Init_F==NOT_INITIALIZED)
    22ee:	80 91 8a 01 	lds	r24, 0x018A
    22f2:	81 30       	cpi	r24, 0x01	; 1
    22f4:	e1 f4       	brne	.+56     	; 0x232e <DELYA_voidNonBlockDelay+0x58>
	{
		TIMER0_voidINIT(CTC,DIV_8);
    22f6:	83 e0       	ldi	r24, 0x03	; 3
    22f8:	63 e0       	ldi	r22, 0x03	; 3
    22fa:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <TIMER0_voidINIT>

		/*Set Comp value to 250 us*/
		TIMER0_SetCOMPValue(250);
    22fe:	8a ef       	ldi	r24, 0xFA	; 250
    2300:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <TIMER0_SetCOMPValue>

		/*Enable COMP INT*/
		TIMER0_COMPIntE(ENABLE);
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <TIMER0_COMPIntE>

		Period=Copy_u8Periodic;
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	80 93 95 01 	sts	0x0195, r24
		Copy_u8Time=Copy_ms;
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	90 93 94 01 	sts	0x0194, r25
    2318:	80 93 93 01 	sts	0x0193, r24
		TIMER0_COMPCallBack=pvFunc;
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	90 93 8d 01 	sts	0x018D, r25
    2324:	80 93 8c 01 	sts	0x018C, r24

		Init_F=INITIALIZED;
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	80 93 8a 01 	sts	0x018A, r24
	}
	TIMER0_u8COMPCallBackFunc(&DELAY_NonBlockHelper);
    232e:	8a e0       	ldi	r24, 0x0A	; 10
    2330:	9e e0       	ldi	r25, 0x0E	; 14
    2332:	0e 94 31 11 	call	0x2262	; 0x2262 <TIMER0_u8COMPCallBackFunc>
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
	SET_BIT(TCCR1A,TCCR1A_COM1A1);*/


	/*Select NORMAL mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    234e:	af e4       	ldi	r26, 0x4F	; 79
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	ef e4       	ldi	r30, 0x4F	; 79
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8e 7f       	andi	r24, 0xFE	; 254
    235a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
    235c:	af e4       	ldi	r26, 0x4F	; 79
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	ef e4       	ldi	r30, 0x4F	; 79
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	8d 7f       	andi	r24, 0xFD	; 253
    2368:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    236a:	ae e4       	ldi	r26, 0x4E	; 78
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	ee e4       	ldi	r30, 0x4E	; 78
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	87 7f       	andi	r24, 0xF7	; 247
    2376:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2378:	ae e4       	ldi	r26, 0x4E	; 78
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	ee e4       	ldi	r30, 0x4E	; 78
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	8f 7e       	andi	r24, 0xEF	; 239
    2384:	8c 93       	st	X, r24

	/*Set Prescaler DIV by 8*/
	SET_BIT(TCCR1B,TCCR1B_CS11);
    2386:	ae e4       	ldi	r26, 0x4E	; 78
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	ee e4       	ldi	r30, 0x4E	; 78
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	82 60       	ori	r24, 0x02	; 2
    2392:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    2394:	ae e4       	ldi	r26, 0x4E	; 78
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	ee e4       	ldi	r30, 0x4E	; 78
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	8e 7f       	andi	r24, 0xFE	; 254
    23a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    23a2:	ae e4       	ldi	r26, 0x4E	; 78
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	ee e4       	ldi	r30, 0x4E	; 78
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	8b 7f       	andi	r24, 0xFB	; 251
    23ae:	8c 93       	st	X, r24
}
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <TIMER1_TopValue>:


void TIMER1_TopValue(u16 Value)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <TIMER1_TopValue+0x6>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Value;
    23c4:	e6 e4       	ldi	r30, 0x46	; 70
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
}
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <TIMER1_channelACOMPValue>:

void TIMER1_channelACOMPValue(u16 Value)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <TIMER1_channelACOMPValue+0x6>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Value;
    23e8:	ea e4       	ldi	r30, 0x4A	; 74
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <TIMER1_SetChannelReading>:

void TIMER1_SetChannelReading(u16 Value)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <TIMER1_SetChannelReading+0x6>
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Value;
    240c:	ec e4       	ldi	r30, 0x4C	; 76
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	9a 81       	ldd	r25, Y+2	; 0x02
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <TIMER1_ReadChannelReading>:

u16 TIMER1_ReadChannelReading(void)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    242a:	ec e4       	ldi	r30, 0x4C	; 76
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	91 81       	ldd	r25, Z+1	; 0x01
}
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <ICU_voidInit>:

void ICU_voidInit(void)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	/*Set Input Capture Edge Select to Rising Edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    2440:	ae e4       	ldi	r26, 0x4E	; 78
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ee e4       	ldi	r30, 0x4E	; 78
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	80 64       	ori	r24, 0x40	; 64
    244c:	8c 93       	st	X, r24

	/*Enable Input Capture Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    244e:	a9 e5       	ldi	r26, 0x59	; 89
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e9 e5       	ldi	r30, 0x59	; 89
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 62       	ori	r24, 0x20	; 32
    245a:	8c 93       	st	X, r24
}
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <ICU_voidSetEdge>:


void ICU_voidSetEdge(u8 Edge)
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	00 d0       	rcall	.+0      	; 0x2468 <ICU_voidSetEdge+0x6>
    2468:	0f 92       	push	r0
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	89 83       	std	Y+1, r24	; 0x01
	switch(Edge)
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	3b 83       	std	Y+3, r19	; 0x03
    2478:	2a 83       	std	Y+2, r18	; 0x02
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	9b 81       	ldd	r25, Y+3	; 0x03
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	91 05       	cpc	r25, r1
    2482:	31 f0       	breq	.+12     	; 0x2490 <ICU_voidSetEdge+0x2e>
    2484:	2a 81       	ldd	r18, Y+2	; 0x02
    2486:	3b 81       	ldd	r19, Y+3	; 0x03
    2488:	22 30       	cpi	r18, 0x02	; 2
    248a:	31 05       	cpc	r19, r1
    248c:	49 f0       	breq	.+18     	; 0x24a0 <ICU_voidSetEdge+0x3e>
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <ICU_voidSetEdge+0x4c>
	{
	case FALLING :
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2490:	ae e4       	ldi	r26, 0x4E	; 78
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	ee e4       	ldi	r30, 0x4E	; 78
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	8f 7b       	andi	r24, 0xBF	; 191
    249c:	8c 93       	st	X, r24
    249e:	07 c0       	rjmp	.+14     	; 0x24ae <ICU_voidSetEdge+0x4c>
		break;
	case RISING :
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    24a0:	ae e4       	ldi	r26, 0x4E	; 78
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ee e4       	ldi	r30, 0x4E	; 78
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	80 64       	ori	r24, 0x40	; 64
    24ac:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <ICU_voidInterrupt>:

void ICU_voidInterrupt(u8 EN)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <ICU_voidInterrupt+0x6>
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	89 83       	std	Y+1, r24	; 0x01
	switch(EN)
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	3b 83       	std	Y+3, r19	; 0x03
    24d0:	2a 83       	std	Y+2, r18	; 0x02
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	9b 81       	ldd	r25, Y+3	; 0x03
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	91 05       	cpc	r25, r1
    24da:	31 f0       	breq	.+12     	; 0x24e8 <ICU_voidInterrupt+0x2e>
    24dc:	2a 81       	ldd	r18, Y+2	; 0x02
    24de:	3b 81       	ldd	r19, Y+3	; 0x03
    24e0:	22 30       	cpi	r18, 0x02	; 2
    24e2:	31 05       	cpc	r19, r1
    24e4:	49 f0       	breq	.+18     	; 0x24f8 <ICU_voidInterrupt+0x3e>
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <ICU_voidInterrupt+0x4c>
	{
	case ENABLE :
		SET_BIT(TIMSK,TIMSK_TICIE1);
    24e8:	a9 e5       	ldi	r26, 0x59	; 89
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e9 e5       	ldi	r30, 0x59	; 89
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	80 62       	ori	r24, 0x20	; 32
    24f4:	8c 93       	st	X, r24
    24f6:	07 c0       	rjmp	.+14     	; 0x2506 <ICU_voidInterrupt+0x4c>
		break;
	case DISABLE:
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    24f8:	a9 e5       	ldi	r26, 0x59	; 89
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e9 e5       	ldi	r30, 0x59	; 89
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	8f 7d       	andi	r24, 0xDF	; 223
    2504:	8c 93       	st	X, r24
	}
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <ICU_ReadChannelReading>:


u16 ICU_ReadChannelReading(void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    251a:	e6 e4       	ldi	r30, 0x46	; 70
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
}
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <ICU_voidSetCallBack>:


u8 ICU_voidSetCallBack(void (*pvCallBack)(void))
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <ICU_voidSetCallBack+0x6>
    252e:	0f 92       	push	r0
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	9b 83       	std	Y+3, r25	; 0x03
    2536:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ICUErrorState=0;
    2538:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBack!=NULL)
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	9b 81       	ldd	r25, Y+3	; 0x03
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	39 f0       	breq	.+14     	; 0x2550 <ICU_voidSetCallBack+0x28>
	{
		ICU_CallBack=pvCallBack;
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	9b 81       	ldd	r25, Y+3	; 0x03
    2546:	90 93 91 01 	sts	0x0191, r25
    254a:	80 93 90 01 	sts	0x0190, r24
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <ICU_voidSetCallBack+0x2c>
	}
	else
	{
		Local_u8ICUErrorState = P_NULL;
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ICUErrorState;
    2554:	89 81       	ldd	r24, Y+1	; 0x01
}
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <WDT_voidSleep>:

void WDT_voidSleep(u8 Value)
{
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	00 d0       	rcall	.+0      	; 0x2568 <WDT_voidSleep+0x6>
    2568:	0f 92       	push	r0
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(WDTCR,WDTCR_WDE);
    2570:	a1 e4       	ldi	r26, 0x41	; 65
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e1 e4       	ldi	r30, 0x41	; 65
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	88 60       	ori	r24, 0x08	; 8
    257c:	8c 93       	st	X, r24
	 * 3 	 For 0.13sec
	 * 4	 For 0.26sec
	 * 5 	 For 0.52sec
	 * 6 	 For 1sec
	 * 7	 For 2.1sec */
	switch(Value)
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	3b 83       	std	Y+3, r19	; 0x03
    2586:	2a 83       	std	Y+2, r18	; 0x02
    2588:	8a 81       	ldd	r24, Y+2	; 0x02
    258a:	9b 81       	ldd	r25, Y+3	; 0x03
    258c:	83 30       	cpi	r24, 0x03	; 3
    258e:	91 05       	cpc	r25, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <WDT_voidSleep+0x32>
    2592:	70 c0       	rjmp	.+224    	; 0x2674 <WDT_voidSleep+0x112>
    2594:	2a 81       	ldd	r18, Y+2	; 0x02
    2596:	3b 81       	ldd	r19, Y+3	; 0x03
    2598:	24 30       	cpi	r18, 0x04	; 4
    259a:	31 05       	cpc	r19, r1
    259c:	84 f4       	brge	.+32     	; 0x25be <WDT_voidSleep+0x5c>
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	91 05       	cpc	r25, r1
    25a6:	d1 f1       	breq	.+116    	; 0x261c <WDT_voidSleep+0xba>
    25a8:	2a 81       	ldd	r18, Y+2	; 0x02
    25aa:	3b 81       	ldd	r19, Y+3	; 0x03
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	0c f0       	brlt	.+2      	; 0x25b4 <WDT_voidSleep+0x52>
    25b2:	4a c0       	rjmp	.+148    	; 0x2648 <WDT_voidSleep+0xe6>
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	9b 81       	ldd	r25, Y+3	; 0x03
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	d1 f0       	breq	.+52     	; 0x25f0 <WDT_voidSleep+0x8e>
    25bc:	c8 c0       	rjmp	.+400    	; 0x274e <WDT_voidSleep+0x1ec>
    25be:	2a 81       	ldd	r18, Y+2	; 0x02
    25c0:	3b 81       	ldd	r19, Y+3	; 0x03
    25c2:	25 30       	cpi	r18, 0x05	; 5
    25c4:	31 05       	cpc	r19, r1
    25c6:	09 f4       	brne	.+2      	; 0x25ca <WDT_voidSleep+0x68>
    25c8:	81 c0       	rjmp	.+258    	; 0x26cc <WDT_voidSleep+0x16a>
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	85 30       	cpi	r24, 0x05	; 5
    25d0:	91 05       	cpc	r25, r1
    25d2:	0c f4       	brge	.+2      	; 0x25d6 <WDT_voidSleep+0x74>
    25d4:	65 c0       	rjmp	.+202    	; 0x26a0 <WDT_voidSleep+0x13e>
    25d6:	2a 81       	ldd	r18, Y+2	; 0x02
    25d8:	3b 81       	ldd	r19, Y+3	; 0x03
    25da:	26 30       	cpi	r18, 0x06	; 6
    25dc:	31 05       	cpc	r19, r1
    25de:	09 f4       	brne	.+2      	; 0x25e2 <WDT_voidSleep+0x80>
    25e0:	8b c0       	rjmp	.+278    	; 0x26f8 <WDT_voidSleep+0x196>
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	9b 81       	ldd	r25, Y+3	; 0x03
    25e6:	87 30       	cpi	r24, 0x07	; 7
    25e8:	91 05       	cpc	r25, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <WDT_voidSleep+0x8c>
    25ec:	9b c0       	rjmp	.+310    	; 0x2724 <WDT_voidSleep+0x1c2>
    25ee:	af c0       	rjmp	.+350    	; 0x274e <WDT_voidSleep+0x1ec>
	{
	case 0:
		CLR_BIT(WDTCR,WDTCR_WDP0);
    25f0:	a1 e4       	ldi	r26, 0x41	; 65
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e1 e4       	ldi	r30, 0x41	; 65
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8e 7f       	andi	r24, 0xFE	; 254
    25fc:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP1);
    25fe:	a1 e4       	ldi	r26, 0x41	; 65
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e1 e4       	ldi	r30, 0x41	; 65
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8d 7f       	andi	r24, 0xFD	; 253
    260a:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP2);
    260c:	a1 e4       	ldi	r26, 0x41	; 65
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	e1 e4       	ldi	r30, 0x41	; 65
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8b 7f       	andi	r24, 0xFB	; 251
    2618:	8c 93       	st	X, r24
    261a:	99 c0       	rjmp	.+306    	; 0x274e <WDT_voidSleep+0x1ec>
		break;
	case 1:
		SET_BIT(WDTCR,WDTCR_WDP0);
    261c:	a1 e4       	ldi	r26, 0x41	; 65
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e1 e4       	ldi	r30, 0x41	; 65
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	81 60       	ori	r24, 0x01	; 1
    2628:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP1);
    262a:	a1 e4       	ldi	r26, 0x41	; 65
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e1 e4       	ldi	r30, 0x41	; 65
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	8d 7f       	andi	r24, 0xFD	; 253
    2636:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP2);
    2638:	a1 e4       	ldi	r26, 0x41	; 65
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e1 e4       	ldi	r30, 0x41	; 65
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8b 7f       	andi	r24, 0xFB	; 251
    2644:	8c 93       	st	X, r24
    2646:	83 c0       	rjmp	.+262    	; 0x274e <WDT_voidSleep+0x1ec>
		break;
	case 2:
		CLR_BIT(WDTCR,WDTCR_WDP0);
    2648:	a1 e4       	ldi	r26, 0x41	; 65
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e1 e4       	ldi	r30, 0x41	; 65
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	8e 7f       	andi	r24, 0xFE	; 254
    2654:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP1);
    2656:	a1 e4       	ldi	r26, 0x41	; 65
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e1 e4       	ldi	r30, 0x41	; 65
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	82 60       	ori	r24, 0x02	; 2
    2662:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP2);
    2664:	a1 e4       	ldi	r26, 0x41	; 65
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e1 e4       	ldi	r30, 0x41	; 65
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	8b 7f       	andi	r24, 0xFB	; 251
    2670:	8c 93       	st	X, r24
    2672:	6d c0       	rjmp	.+218    	; 0x274e <WDT_voidSleep+0x1ec>
		break;
	case 3:
		SET_BIT(WDTCR,WDTCR_WDP0);
    2674:	a1 e4       	ldi	r26, 0x41	; 65
    2676:	b0 e0       	ldi	r27, 0x00	; 0
    2678:	e1 e4       	ldi	r30, 0x41	; 65
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	80 81       	ld	r24, Z
    267e:	81 60       	ori	r24, 0x01	; 1
    2680:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP1);
    2682:	a1 e4       	ldi	r26, 0x41	; 65
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	e1 e4       	ldi	r30, 0x41	; 65
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	82 60       	ori	r24, 0x02	; 2
    268e:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP2);
    2690:	a1 e4       	ldi	r26, 0x41	; 65
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e1 e4       	ldi	r30, 0x41	; 65
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	8b 7f       	andi	r24, 0xFB	; 251
    269c:	8c 93       	st	X, r24
    269e:	57 c0       	rjmp	.+174    	; 0x274e <WDT_voidSleep+0x1ec>
		break;
	case 4:
		CLR_BIT(WDTCR,WDTCR_WDP0);
    26a0:	a1 e4       	ldi	r26, 0x41	; 65
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
    26a4:	e1 e4       	ldi	r30, 0x41	; 65
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	8e 7f       	andi	r24, 0xFE	; 254
    26ac:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP1);
    26ae:	a1 e4       	ldi	r26, 0x41	; 65
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	e1 e4       	ldi	r30, 0x41	; 65
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	8d 7f       	andi	r24, 0xFD	; 253
    26ba:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP2);
    26bc:	a1 e4       	ldi	r26, 0x41	; 65
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e1 e4       	ldi	r30, 0x41	; 65
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	84 60       	ori	r24, 0x04	; 4
    26c8:	8c 93       	st	X, r24
    26ca:	41 c0       	rjmp	.+130    	; 0x274e <WDT_voidSleep+0x1ec>
		break;
	case 5:
		SET_BIT(WDTCR,WDTCR_WDP0);
    26cc:	a1 e4       	ldi	r26, 0x41	; 65
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e1 e4       	ldi	r30, 0x41	; 65
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	81 60       	ori	r24, 0x01	; 1
    26d8:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP1);
    26da:	a1 e4       	ldi	r26, 0x41	; 65
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e1 e4       	ldi	r30, 0x41	; 65
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	8d 7f       	andi	r24, 0xFD	; 253
    26e6:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP2);
    26e8:	a1 e4       	ldi	r26, 0x41	; 65
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e1 e4       	ldi	r30, 0x41	; 65
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	84 60       	ori	r24, 0x04	; 4
    26f4:	8c 93       	st	X, r24
    26f6:	2b c0       	rjmp	.+86     	; 0x274e <WDT_voidSleep+0x1ec>
		break;
	case 6:
		CLR_BIT(WDTCR,WDTCR_WDP0);
    26f8:	a1 e4       	ldi	r26, 0x41	; 65
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e1 e4       	ldi	r30, 0x41	; 65
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	8e 7f       	andi	r24, 0xFE	; 254
    2704:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP1);
    2706:	a1 e4       	ldi	r26, 0x41	; 65
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e1 e4       	ldi	r30, 0x41	; 65
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	82 60       	ori	r24, 0x02	; 2
    2712:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP2);
    2714:	a1 e4       	ldi	r26, 0x41	; 65
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e1 e4       	ldi	r30, 0x41	; 65
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	84 60       	ori	r24, 0x04	; 4
    2720:	8c 93       	st	X, r24
    2722:	15 c0       	rjmp	.+42     	; 0x274e <WDT_voidSleep+0x1ec>
		break;
	case 7:
		SET_BIT(WDTCR,WDTCR_WDP0);
    2724:	a1 e4       	ldi	r26, 0x41	; 65
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e1 e4       	ldi	r30, 0x41	; 65
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	81 60       	ori	r24, 0x01	; 1
    2730:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP1);
    2732:	a1 e4       	ldi	r26, 0x41	; 65
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e1 e4       	ldi	r30, 0x41	; 65
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	82 60       	ori	r24, 0x02	; 2
    273e:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP2);
    2740:	a1 e4       	ldi	r26, 0x41	; 65
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	e1 e4       	ldi	r30, 0x41	; 65
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	84 60       	ori	r24, 0x04	; 4
    274c:	8c 93       	st	X, r24
		break;

	}
}
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <WDT_voidDisable>:

void WDT_voidDisable(void)
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
	WDTCR=0b00011000;
    2762:	e1 e4       	ldi	r30, 0x41	; 65
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	88 e1       	ldi	r24, 0x18	; 24
    2768:	80 83       	st	Z, r24
	WDTCR=0;
    276a:	e1 e4       	ldi	r30, 0x41	; 65
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	10 82       	st	Z, r1
}
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <__vector_10>:



void __vector_10(void)      __attribute__((signal));
void __vector_10(void)
{
    2776:	1f 92       	push	r1
    2778:	0f 92       	push	r0
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	0f 92       	push	r0
    277e:	11 24       	eor	r1, r1
    2780:	2f 93       	push	r18
    2782:	3f 93       	push	r19
    2784:	4f 93       	push	r20
    2786:	5f 93       	push	r21
    2788:	6f 93       	push	r22
    278a:	7f 93       	push	r23
    278c:	8f 93       	push	r24
    278e:	9f 93       	push	r25
    2790:	af 93       	push	r26
    2792:	bf 93       	push	r27
    2794:	ef 93       	push	r30
    2796:	ff 93       	push	r31
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_COMPCallBack!=NULL)
    27a0:	80 91 8c 01 	lds	r24, 0x018C
    27a4:	90 91 8d 01 	lds	r25, 0x018D
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	29 f0       	breq	.+10     	; 0x27b6 <__vector_10+0x40>
	{
		TIMER0_COMPCallBack();
    27ac:	e0 91 8c 01 	lds	r30, 0x018C
    27b0:	f0 91 8d 01 	lds	r31, 0x018D
    27b4:	09 95       	icall
	}
}
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	ff 91       	pop	r31
    27bc:	ef 91       	pop	r30
    27be:	bf 91       	pop	r27
    27c0:	af 91       	pop	r26
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	7f 91       	pop	r23
    27c8:	6f 91       	pop	r22
    27ca:	5f 91       	pop	r21
    27cc:	4f 91       	pop	r20
    27ce:	3f 91       	pop	r19
    27d0:	2f 91       	pop	r18
    27d2:	0f 90       	pop	r0
    27d4:	0f be       	out	0x3f, r0	; 63
    27d6:	0f 90       	pop	r0
    27d8:	1f 90       	pop	r1
    27da:	18 95       	reti

000027dc <__vector_11>:

void __vector_11(void)      __attribute__((signal));
void __vector_11(void)
{
    27dc:	1f 92       	push	r1
    27de:	0f 92       	push	r0
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	0f 92       	push	r0
    27e4:	11 24       	eor	r1, r1
    27e6:	2f 93       	push	r18
    27e8:	3f 93       	push	r19
    27ea:	4f 93       	push	r20
    27ec:	5f 93       	push	r21
    27ee:	6f 93       	push	r22
    27f0:	7f 93       	push	r23
    27f2:	8f 93       	push	r24
    27f4:	9f 93       	push	r25
    27f6:	af 93       	push	r26
    27f8:	bf 93       	push	r27
    27fa:	ef 93       	push	r30
    27fc:	ff 93       	push	r31
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVFCallBack!=NULL)
    2806:	80 91 8e 01 	lds	r24, 0x018E
    280a:	90 91 8f 01 	lds	r25, 0x018F
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	29 f0       	breq	.+10     	; 0x281c <__vector_11+0x40>
	{
		TIMER0_OVFCallBack();
    2812:	e0 91 8e 01 	lds	r30, 0x018E
    2816:	f0 91 8f 01 	lds	r31, 0x018F
    281a:	09 95       	icall
	}
}
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	ff 91       	pop	r31
    2822:	ef 91       	pop	r30
    2824:	bf 91       	pop	r27
    2826:	af 91       	pop	r26
    2828:	9f 91       	pop	r25
    282a:	8f 91       	pop	r24
    282c:	7f 91       	pop	r23
    282e:	6f 91       	pop	r22
    2830:	5f 91       	pop	r21
    2832:	4f 91       	pop	r20
    2834:	3f 91       	pop	r19
    2836:	2f 91       	pop	r18
    2838:	0f 90       	pop	r0
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	0f 90       	pop	r0
    283e:	1f 90       	pop	r1
    2840:	18 95       	reti

00002842 <__vector_6>:


void __vector_6(void)		__attribute__((signal));
void __vector_6(void)
{
    2842:	1f 92       	push	r1
    2844:	0f 92       	push	r0
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	0f 92       	push	r0
    284a:	11 24       	eor	r1, r1
    284c:	2f 93       	push	r18
    284e:	3f 93       	push	r19
    2850:	4f 93       	push	r20
    2852:	5f 93       	push	r21
    2854:	6f 93       	push	r22
    2856:	7f 93       	push	r23
    2858:	8f 93       	push	r24
    285a:	9f 93       	push	r25
    285c:	af 93       	push	r26
    285e:	bf 93       	push	r27
    2860:	ef 93       	push	r30
    2862:	ff 93       	push	r31
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBack != NULL)
    286c:	80 91 90 01 	lds	r24, 0x0190
    2870:	90 91 91 01 	lds	r25, 0x0191
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	29 f0       	breq	.+10     	; 0x2882 <__vector_6+0x40>
	{
		ICU_CallBack();
    2878:	e0 91 90 01 	lds	r30, 0x0190
    287c:	f0 91 91 01 	lds	r31, 0x0191
    2880:	09 95       	icall
	}
}
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	ff 91       	pop	r31
    2888:	ef 91       	pop	r30
    288a:	bf 91       	pop	r27
    288c:	af 91       	pop	r26
    288e:	9f 91       	pop	r25
    2890:	8f 91       	pop	r24
    2892:	7f 91       	pop	r23
    2894:	6f 91       	pop	r22
    2896:	5f 91       	pop	r21
    2898:	4f 91       	pop	r20
    289a:	3f 91       	pop	r19
    289c:	2f 91       	pop	r18
    289e:	0f 90       	pop	r0
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	0f 90       	pop	r0
    28a4:	1f 90       	pop	r1
    28a6:	18 95       	reti

000028a8 <ADC_voidInit>:
static u8 ADC_u8CahinIndex;
static u8 ADC_u8ISRSource;
static u8 SingleChannelAsync=0;
static u8 ChainChannel=1;
void ADC_voidInit(void)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
    28b0:	a7 e2       	ldi	r26, 0x27	; 39
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	e7 e2       	ldi	r30, 0x27	; 39
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	80 64       	ori	r24, 0x40	; 64
    28bc:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    28be:	a7 e2       	ldi	r26, 0x27	; 39
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e7 e2       	ldi	r30, 0x27	; 39
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	8f 77       	andi	r24, 0x7F	; 127
    28ca:	8c 93       	st	X, r24

#if ADC_ADJUST == ENABLE
	/*ACTIVATE left adjust to 1*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
    28cc:	a7 e2       	ldi	r26, 0x27	; 39
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e7 e2       	ldi	r30, 0x27	; 39
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	80 62       	ori	r24, 0x20	; 32
    28d8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_ADLAR);

#endif

	/*Set Prescaler Bits*/
	ADCSRA &= 0b11111000;
    28da:	a6 e2       	ldi	r26, 0x26	; 38
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e6 e2       	ldi	r30, 0x26	; 38
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	88 7f       	andi	r24, 0xF8	; 248
    28e6:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC ;
    28e8:	a6 e2       	ldi	r26, 0x26	; 38
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e6 e2       	ldi	r30, 0x26	; 38
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	87 60       	ori	r24, 0x07	; 7
    28f4:	8c 93       	st	X, r24

	/*Enable ADC */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    28f6:	a6 e2       	ldi	r26, 0x26	; 38
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e6 e2       	ldi	r30, 0x26	; 38
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	80 68       	ori	r24, 0x80	; 128
    2902:	8c 93       	st	X, r24
}
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <ADC_u8StartConversionSync>:

u8 ADC_u8StartConversionSync(u8 Copy_u8Channel,u8* Copy_pu8Reading)
{
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	28 97       	sbiw	r28, 0x08	; 8
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	8e 83       	std	Y+6, r24	; 0x06
    2920:	78 87       	std	Y+8, r23	; 0x08
    2922:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_ErrorState=OK;
    2924:	1d 82       	std	Y+5, r1	; 0x05
	if(Local_u8BusyState==IDLE)
    2926:	80 91 9d 01 	lds	r24, 0x019D
    292a:	88 23       	and	r24, r24
    292c:	09 f0       	breq	.+2      	; 0x2930 <ADC_u8StartConversionSync+0x26>
    292e:	5f c0       	rjmp	.+190    	; 0x29ee <ADC_u8StartConversionSync+0xe4>
	{
		Local_u8BusyState = BUSY;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	80 93 9d 01 	sts	0x019D, r24
		u32 Local_u32Counter=0;
    2936:	19 82       	std	Y+1, r1	; 0x01
    2938:	1a 82       	std	Y+2, r1	; 0x02
    293a:	1b 82       	std	Y+3, r1	; 0x03
    293c:	1c 82       	std	Y+4, r1	; 0x04
		/*Clear MUX bits*/
		ADMUX &= 0b11100000;
    293e:	a7 e2       	ldi	r26, 0x27	; 39
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e7 e2       	ldi	r30, 0x27	; 39
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	80 7e       	andi	r24, 0xE0	; 224
    294a:	8c 93       	st	X, r24

		/*Set Channel on MUX*/
		ADMUX |= Copy_u8Channel;
    294c:	a7 e2       	ldi	r26, 0x27	; 39
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e7 e2       	ldi	r30, 0x27	; 39
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	90 81       	ld	r25, Z
    2956:	8e 81       	ldd	r24, Y+6	; 0x06
    2958:	89 2b       	or	r24, r25
    295a:	8c 93       	st	X, r24

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    295c:	a6 e2       	ldi	r26, 0x26	; 38
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e6 e2       	ldi	r30, 0x26	; 38
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	80 64       	ori	r24, 0x40	; 64
    2968:	8c 93       	st	X, r24
    296a:	0b c0       	rjmp	.+22     	; 0x2982 <ADC_u8StartConversionSync+0x78>

		/*Polling (busy waiting) until the conversion complete flag is set*/
		while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	ab 81       	ldd	r26, Y+3	; 0x03
    2972:	bc 81       	ldd	r27, Y+4	; 0x04
    2974:	01 96       	adiw	r24, 0x01	; 1
    2976:	a1 1d       	adc	r26, r1
    2978:	b1 1d       	adc	r27, r1
    297a:	89 83       	std	Y+1, r24	; 0x01
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	ab 83       	std	Y+3, r26	; 0x03
    2980:	bc 83       	std	Y+4, r27	; 0x04

		/*Start Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set*/
		while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter != ADC_u32TIMEOUT))
    2982:	e6 e2       	ldi	r30, 0x26	; 38
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	82 95       	swap	r24
    298a:	8f 70       	andi	r24, 0x0F	; 15
    298c:	88 2f       	mov	r24, r24
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	81 70       	andi	r24, 0x01	; 1
    2992:	90 70       	andi	r25, 0x00	; 0
    2994:	00 97       	sbiw	r24, 0x00	; 0
    2996:	61 f4       	brne	.+24     	; 0x29b0 <ADC_u8StartConversionSync+0xa6>
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	ab 81       	ldd	r26, Y+3	; 0x03
    299e:	bc 81       	ldd	r27, Y+4	; 0x04
    29a0:	80 35       	cpi	r24, 0x50	; 80
    29a2:	23 ec       	ldi	r18, 0xC3	; 195
    29a4:	92 07       	cpc	r25, r18
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	a2 07       	cpc	r26, r18
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	b2 07       	cpc	r27, r18
    29ae:	f1 f6       	brne	.-68     	; 0x296c <ADC_u8StartConversionSync+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	ab 81       	ldd	r26, Y+3	; 0x03
    29b6:	bc 81       	ldd	r27, Y+4	; 0x04
    29b8:	80 35       	cpi	r24, 0x50	; 80
    29ba:	23 ec       	ldi	r18, 0xC3	; 195
    29bc:	92 07       	cpc	r25, r18
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	a2 07       	cpc	r26, r18
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	b2 07       	cpc	r27, r18
    29c6:	19 f4       	brne	.+6      	; 0x29ce <ADC_u8StartConversionSync+0xc4>
		{
			//TIMEOUT
			Local_ErrorState=NOK;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	12 c0       	rjmp	.+36     	; 0x29f2 <ADC_u8StartConversionSync+0xe8>
		}

		else
		{
			/*Clear conversion Flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
    29ce:	a6 e2       	ldi	r26, 0x26	; 38
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e6 e2       	ldi	r30, 0x26	; 38
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	80 61       	ori	r24, 0x10	; 16
    29da:	8c 93       	st	X, r24
#if ADC_ADJUST==ENABLE
			/*Return The value*/
			*Copy_pu8Reading = ADCH;
    29dc:	e5 e2       	ldi	r30, 0x25	; 37
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	ef 81       	ldd	r30, Y+7	; 0x07
    29e4:	f8 85       	ldd	r31, Y+8	; 0x08
    29e6:	80 83       	st	Z, r24

			Local_ADCReading = (ADCL|(ADCH<<8));
			*Copy_pu8Reading=Local_ADCReading;

#endif
			Local_u8BusyState = IDLE;
    29e8:	10 92 9d 01 	sts	0x019D, r1
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <ADC_u8StartConversionSync+0xe8>
		}
	}
	else
	{
		Local_ErrorState= BUSY_ERROR;
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_ErrorState;
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    29f4:	28 96       	adiw	r28, 0x08	; 8
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <ADC_u8StartConversionAsync>:

u8 ADC_u8StartConversionAsync(u8 Copy_u8Channel,u8* Copy_pu8Reading ,void(*Copy_pvNot)(void))
{
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <ADC_u8StartConversionAsync+0x6>
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <ADC_u8StartConversionAsync+0x8>
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <ADC_u8StartConversionAsync+0xa>
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	8a 83       	std	Y+2, r24	; 0x02
    2a16:	7c 83       	std	Y+4, r23	; 0x04
    2a18:	6b 83       	std	Y+3, r22	; 0x03
    2a1a:	5e 83       	std	Y+6, r21	; 0x06
    2a1c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_ErrorState =OK;
    2a1e:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u8BusyState==IDLE)
    2a20:	80 91 9d 01 	lds	r24, 0x019D
    2a24:	88 23       	and	r24, r24
    2a26:	e1 f5       	brne	.+120    	; 0x2aa0 <ADC_u8StartConversionAsync+0x9a>
	{
		if((Copy_pvNot==NULL) || (Copy_pu8Reading ==NULL))
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	21 f0       	breq	.+8      	; 0x2a38 <ADC_u8StartConversionAsync+0x32>
    2a30:	8b 81       	ldd	r24, Y+3	; 0x03
    2a32:	9c 81       	ldd	r25, Y+4	; 0x04
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	19 f4       	brne	.+6      	; 0x2a3e <ADC_u8StartConversionAsync+0x38>
		{
			Local_ErrorState=NOK;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	33 c0       	rjmp	.+102    	; 0x2aa4 <ADC_u8StartConversionAsync+0x9e>
		}
		else
		{

			Local_u8BusyState = BUSY;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	80 93 9d 01 	sts	0x019D, r24

			ADC_u8ISRSource=SingleChannelAsync;
    2a44:	80 91 a2 01 	lds	r24, 0x01A2
    2a48:	80 93 a5 01 	sts	0x01A5, r24

			ADC_pvCallBack=Copy_pvNot;
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	90 93 9c 01 	sts	0x019C, r25
    2a54:	80 93 9b 01 	sts	0x019B, r24

			ADC_pu8Reading=Copy_pu8Reading;
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	90 93 9a 01 	sts	0x019A, r25
    2a60:	80 93 99 01 	sts	0x0199, r24

			/*Clear MUX bits*/
			ADMUX &= 0b11100000;
    2a64:	a7 e2       	ldi	r26, 0x27	; 39
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e7 e2       	ldi	r30, 0x27	; 39
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 7e       	andi	r24, 0xE0	; 224
    2a70:	8c 93       	st	X, r24

			/*Set Channel on MUX*/
			ADMUX |= Copy_u8Channel;
    2a72:	a7 e2       	ldi	r26, 0x27	; 39
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e7 e2       	ldi	r30, 0x27	; 39
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	90 81       	ld	r25, Z
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	89 2b       	or	r24, r25
    2a80:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    2a82:	a6 e2       	ldi	r26, 0x26	; 38
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e6 e2       	ldi	r30, 0x26	; 38
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	80 64       	ori	r24, 0x40	; 64
    2a8e:	8c 93       	st	X, r24

			/*Enable ADC INT*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    2a90:	a6 e2       	ldi	r26, 0x26	; 38
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e6 e2       	ldi	r30, 0x26	; 38
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	88 60       	ori	r24, 0x08	; 8
    2a9c:	8c 93       	st	X, r24
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <ADC_u8StartConversionAsync+0x9e>

		}
	}
	else
	{
		Local_ErrorState =BUSY_ERROR;
    2aa0:	82 e0       	ldi	r24, 0x02	; 2
    2aa2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa6:	26 96       	adiw	r28, 0x06	; 6
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <ADC_u8StartChainConversion>:


u8 ADC_u8StartChainConversion(Chain_t* Copy_Chain)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <ADC_u8StartChainConversion+0x6>
    2abe:	0f 92       	push	r0
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	9b 83       	std	Y+3, r25	; 0x03
    2ac6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2ac8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_Chain==NULL)
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	19 f4       	brne	.+6      	; 0x2ad8 <ADC_u8StartChainConversion+0x20>
	{
		Local_u8ErrorState=NOK;
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	56 c0       	rjmp	.+172    	; 0x2b84 <ADC_u8StartChainConversion+0xcc>
	}
	else
	{
		if(Local_u8BusyState==IDLE)
    2ad8:	80 91 9d 01 	lds	r24, 0x019D
    2adc:	88 23       	and	r24, r24
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <ADC_u8StartChainConversion+0x2a>
    2ae0:	4f c0       	rjmp	.+158    	; 0x2b80 <ADC_u8StartChainConversion+0xc8>
		{


			Local_u8BusyState=BUSY;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	80 93 9d 01 	sts	0x019D, r24

			ADC_u8ISRSource=ChainChannel;
    2ae8:	80 91 8b 01 	lds	r24, 0x018B
    2aec:	80 93 a5 01 	sts	0x01A5, r24

			ADC_pu8ChainCannelArr=Copy_Chain->Channel;
    2af0:	ea 81       	ldd	r30, Y+2	; 0x02
    2af2:	fb 81       	ldd	r31, Y+3	; 0x03
    2af4:	80 81       	ld	r24, Z
    2af6:	91 81       	ldd	r25, Z+1	; 0x01
    2af8:	90 93 9f 01 	sts	0x019F, r25
    2afc:	80 93 9e 01 	sts	0x019E, r24
			ADC_pu16ChainResultArr=Copy_Chain->Result;
    2b00:	ea 81       	ldd	r30, Y+2	; 0x02
    2b02:	fb 81       	ldd	r31, Y+3	; 0x03
    2b04:	82 81       	ldd	r24, Z+2	; 0x02
    2b06:	93 81       	ldd	r25, Z+3	; 0x03
    2b08:	90 93 a1 01 	sts	0x01A1, r25
    2b0c:	80 93 a0 01 	sts	0x01A0, r24
			ADC_u8ChainSize=Copy_Chain->Size;
    2b10:	ea 81       	ldd	r30, Y+2	; 0x02
    2b12:	fb 81       	ldd	r31, Y+3	; 0x03
    2b14:	84 81       	ldd	r24, Z+4	; 0x04
    2b16:	80 93 a3 01 	sts	0x01A3, r24
			ADC_pvCallBack=Copy_Chain->NotficationFunc;
    2b1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2b1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2b1e:	85 81       	ldd	r24, Z+5	; 0x05
    2b20:	96 81       	ldd	r25, Z+6	; 0x06
    2b22:	90 93 9c 01 	sts	0x019C, r25
    2b26:	80 93 9b 01 	sts	0x019B, r24
			ADC_u8CahinIndex=0;
    2b2a:	10 92 a4 01 	sts	0x01A4, r1

			/*Set Required Channel*/
			ADMUX &=0b11100000;
    2b2e:	a7 e2       	ldi	r26, 0x27	; 39
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e7 e2       	ldi	r30, 0x27	; 39
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	80 7e       	andi	r24, 0xE0	; 224
    2b3a:	8c 93       	st	X, r24
			ADMUX |=ADC_pu8ChainCannelArr[ADC_u8CahinIndex];
    2b3c:	a7 e2       	ldi	r26, 0x27	; 39
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e7 e2       	ldi	r30, 0x27	; 39
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	40 81       	ld	r20, Z
    2b46:	20 91 9e 01 	lds	r18, 0x019E
    2b4a:	30 91 9f 01 	lds	r19, 0x019F
    2b4e:	80 91 a4 01 	lds	r24, 0x01A4
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	f9 01       	movw	r30, r18
    2b58:	e8 0f       	add	r30, r24
    2b5a:	f9 1f       	adc	r31, r25
    2b5c:	80 81       	ld	r24, Z
    2b5e:	84 2b       	or	r24, r20
    2b60:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    2b62:	a6 e2       	ldi	r26, 0x26	; 38
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e6 e2       	ldi	r30, 0x26	; 38
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	80 64       	ori	r24, 0x40	; 64
    2b6e:	8c 93       	st	X, r24

			/*Enable INT*/
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    2b70:	a6 e2       	ldi	r26, 0x26	; 38
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	e6 e2       	ldi	r30, 0x26	; 38
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	88 60       	ori	r24, 0x08	; 8
    2b7c:	8c 93       	st	X, r24
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <ADC_u8StartChainConversion+0xcc>
		}
		else
		{
			Local_u8ErrorState=BUSY_ERROR;
    2b80:	82 e0       	ldi	r24, 0x02	; 2
    2b82:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <__vector_16>:


void __vector_16 (void) 	__attribute__((signal));
void __vector_16 (void)
{
    2b92:	1f 92       	push	r1
    2b94:	0f 92       	push	r0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	2f 93       	push	r18
    2b9e:	3f 93       	push	r19
    2ba0:	4f 93       	push	r20
    2ba2:	5f 93       	push	r21
    2ba4:	6f 93       	push	r22
    2ba6:	7f 93       	push	r23
    2ba8:	8f 93       	push	r24
    2baa:	9f 93       	push	r25
    2bac:	af 93       	push	r26
    2bae:	bf 93       	push	r27
    2bb0:	ef 93       	push	r30
    2bb2:	ff 93       	push	r31
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource==SingleChannelAsync)
    2bbc:	90 91 a5 01 	lds	r25, 0x01A5
    2bc0:	80 91 a2 01 	lds	r24, 0x01A2
    2bc4:	98 17       	cp	r25, r24
    2bc6:	b9 f4       	brne	.+46     	; 0x2bf6 <__vector_16+0x64>
	{
		/*Read ADC result*/
#if ADC_ADJUST == ENABLE
		*ADC_pu8Reading =ADCH;
    2bc8:	a0 91 99 01 	lds	r26, 0x0199
    2bcc:	b0 91 9a 01 	lds	r27, 0x019A
    2bd0:	e5 e2       	ldi	r30, 0x25	; 37
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	8c 93       	st	X, r24
		Local_ADCReading = (ADCL|(ADCH<<8));
		*ADC_pu8Reading=Local_ADCReading;

#endif

		Local_u8BusyState=IDLE;
    2bd8:	10 92 9d 01 	sts	0x019D, r1

		/*Call Back Notification FUNC*/
		ADC_pvCallBack();
    2bdc:	e0 91 9b 01 	lds	r30, 0x019B
    2be0:	f0 91 9c 01 	lds	r31, 0x019C
    2be4:	09 95       	icall

		/*Disable ADC INT*/
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2be6:	a6 e2       	ldi	r26, 0x26	; 38
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e6 e2       	ldi	r30, 0x26	; 38
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	87 7f       	andi	r24, 0xF7	; 247
    2bf2:	8c 93       	st	X, r24
    2bf4:	57 c0       	rjmp	.+174    	; 0x2ca4 <__vector_16+0x112>
	}
	else if(ADC_u8ISRSource==ChainChannel)
    2bf6:	90 91 a5 01 	lds	r25, 0x01A5
    2bfa:	80 91 8b 01 	lds	r24, 0x018B
    2bfe:	98 17       	cp	r25, r24
    2c00:	09 f0       	breq	.+2      	; 0x2c04 <__vector_16+0x72>
    2c02:	50 c0       	rjmp	.+160    	; 0x2ca4 <__vector_16+0x112>
	{
#if ADC_ADJUST == ENABLE
		/*Read The current conversion*/
		ADC_pu16ChainResultArr[ADC_u8CahinIndex]= ADCH;
    2c04:	20 91 a0 01 	lds	r18, 0x01A0
    2c08:	30 91 a1 01 	lds	r19, 0x01A1
    2c0c:	80 91 a4 01 	lds	r24, 0x01A4
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	d9 01       	movw	r26, r18
    2c1a:	a8 0f       	add	r26, r24
    2c1c:	b9 1f       	adc	r27, r25
    2c1e:	e5 e2       	ldi	r30, 0x25	; 37
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	88 2f       	mov	r24, r24
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	11 96       	adiw	r26, 0x01	; 1
    2c2a:	9c 93       	st	X, r25
    2c2c:	8e 93       	st	-X, r24

		/*Increment Index*/
		ADC_u8CahinIndex++;
    2c2e:	80 91 a4 01 	lds	r24, 0x01A4
    2c32:	8f 5f       	subi	r24, 0xFF	; 255
    2c34:	80 93 a4 01 	sts	0x01A4, r24

		/*Check Size*/
		if(ADC_u8CahinIndex==ADC_u8ChainSize)
    2c38:	90 91 a4 01 	lds	r25, 0x01A4
    2c3c:	80 91 a3 01 	lds	r24, 0x01A3
    2c40:	98 17       	cp	r25, r24
    2c42:	79 f4       	brne	.+30     	; 0x2c62 <__vector_16+0xd0>
		{
			/*Chain is Done*/
			/*Raise IDLE Flag*/
			Local_u8BusyState=IDLE;
    2c44:	10 92 9d 01 	sts	0x019D, r1

			/*Excute NotificationFunc*/
			ADC_pvCallBack();
    2c48:	e0 91 9b 01 	lds	r30, 0x019B
    2c4c:	f0 91 9c 01 	lds	r31, 0x019C
    2c50:	09 95       	icall

			/*Disable INT*/
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2c52:	a6 e2       	ldi	r26, 0x26	; 38
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	e6 e2       	ldi	r30, 0x26	; 38
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	87 7f       	andi	r24, 0xF7	; 247
    2c5e:	8c 93       	st	X, r24
    2c60:	21 c0       	rjmp	.+66     	; 0x2ca4 <__vector_16+0x112>
		}
		else
		{
			/*Chain is not Finished*/
			ADMUX &=0b11100000;
    2c62:	a7 e2       	ldi	r26, 0x27	; 39
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e7 e2       	ldi	r30, 0x27	; 39
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	80 7e       	andi	r24, 0xE0	; 224
    2c6e:	8c 93       	st	X, r24
			ADMUX |=ADC_pu8ChainCannelArr[ADC_u8CahinIndex];
    2c70:	a7 e2       	ldi	r26, 0x27	; 39
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	e7 e2       	ldi	r30, 0x27	; 39
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	40 81       	ld	r20, Z
    2c7a:	20 91 9e 01 	lds	r18, 0x019E
    2c7e:	30 91 9f 01 	lds	r19, 0x019F
    2c82:	80 91 a4 01 	lds	r24, 0x01A4
    2c86:	88 2f       	mov	r24, r24
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	f9 01       	movw	r30, r18
    2c8c:	e8 0f       	add	r30, r24
    2c8e:	f9 1f       	adc	r31, r25
    2c90:	80 81       	ld	r24, Z
    2c92:	84 2b       	or	r24, r20
    2c94:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    2c96:	a6 e2       	ldi	r26, 0x26	; 38
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e6 e2       	ldi	r30, 0x26	; 38
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 64       	ori	r24, 0x40	; 64
    2ca2:	8c 93       	st	X, r24
			/*Start Conversion*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);
		}
#endif
	}
}
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	ff 91       	pop	r31
    2caa:	ef 91       	pop	r30
    2cac:	bf 91       	pop	r27
    2cae:	af 91       	pop	r26
    2cb0:	9f 91       	pop	r25
    2cb2:	8f 91       	pop	r24
    2cb4:	7f 91       	pop	r23
    2cb6:	6f 91       	pop	r22
    2cb8:	5f 91       	pop	r21
    2cba:	4f 91       	pop	r20
    2cbc:	3f 91       	pop	r19
    2cbe:	2f 91       	pop	r18
    2cc0:	0f 90       	pop	r0
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	0f 90       	pop	r0
    2cc6:	1f 90       	pop	r1
    2cc8:	18 95       	reti

00002cca <GIE_voidEnable>:
/*********************************************************************************/
/*********************************************************************************/
#include "GIE_interface.h"

void GIE_voidEnable(void)
{
    2cca:	df 93       	push	r29
    2ccc:	cf 93       	push	r28
    2cce:	cd b7       	in	r28, 0x3d	; 61
    2cd0:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(SREG,SREG_I);
    2cd2:	af e5       	ldi	r26, 0x5F	; 95
    2cd4:	b0 e0       	ldi	r27, 0x00	; 0
    2cd6:	ef e5       	ldi	r30, 0x5F	; 95
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	80 68       	ori	r24, 0x80	; 128
    2cde:	8c 93       	st	X, r24
}
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(SREG,SREG_I);
    2cee:	af e5       	ldi	r26, 0x5F	; 95
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	ef e5       	ldi	r30, 0x5F	; 95
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8f 77       	andi	r24, 0x7F	; 127
    2cfa:	8c 93       	st	X, r24
}
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <EXTI_voidINT0Init>:
void (*Int0Function)(void)= NULL ;
void (*Int1Function)(void)= NULL ;
void (*Int2Function)(void)= NULL ;

void EXTI_voidINT0Init(void)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62


#if INT0_SENSE == FALLING_EDGE


	SET_BIT(MCUCR,MCUCR_ISC01);
    2d0a:	a5 e5       	ldi	r26, 0x55	; 85
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e5 e5       	ldi	r30, 0x55	; 85
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	82 60       	ori	r24, 0x02	; 2
    2d16:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
    2d18:	a5 e5       	ldi	r26, 0x55	; 85
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e5 e5       	ldi	r30, 0x55	; 85
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8e 7f       	andi	r24, 0xFE	; 254
    2d24:	8c 93       	st	X, r24

#error "Wrong INT0_SENSE configuration option"
#endif

#if INT0_INITIAL == ENABLE
	SET_BIT(GICR,GICR_INT0);
    2d26:	ab e5       	ldi	r26, 0x5B	; 91
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	eb e5       	ldi	r30, 0x5B	; 91
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	80 64       	ori	r24, 0x40	; 64
    2d32:	8c 93       	st	X, r24
#else

#error "Wrong INT0_INITIAL option"

#endif
}
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <EXTI_voidINT1Init>:
void EXTI_voidINT1Init(void)
{
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
	 *for any change   ISC10=1 , ISC11=0
	 *for rising edge  ISC10=1 , ISC11=1*/
#if INT1_SENSE == FALLING_EDGE


	SET_BIT(MCUCR,MCUCR_ISC11);
    2d42:	a5 e5       	ldi	r26, 0x55	; 85
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e5 e5       	ldi	r30, 0x55	; 85
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 60       	ori	r24, 0x08	; 8
    2d4e:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    2d50:	a5 e5       	ldi	r26, 0x55	; 85
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e5 e5       	ldi	r30, 0x55	; 85
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	8b 7f       	andi	r24, 0xFB	; 251
    2d5c:	8c 93       	st	X, r24
#error "Wrong INT1_SENSE configuration option"

#endif

#if INT1_INITIAL == ENABLE
	SET_BIT(GICR,GICR_INT1);
    2d5e:	ab e5       	ldi	r26, 0x5B	; 91
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	eb e5       	ldi	r30, 0x5B	; 91
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	80 68       	ori	r24, 0x80	; 128
    2d6a:	8c 93       	st	X, r24
#else

#error "Wrong INT1_INITIAL option"

#endif
}
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	08 95       	ret

00002d72 <EXTI_voidINT2Init>:
void EXTI_voidINT2Init(void)
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
	/*Set sense control for INT0*/
	/*for falling edge write 0 && for rising edge write 1*/
#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_INT2);
    2d7a:	a4 e5       	ldi	r26, 0x54	; 84
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e4 e5       	ldi	r30, 0x54	; 84
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	8f 7b       	andi	r24, 0xBF	; 191
    2d86:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,MCUCSR_INT2);
#else
#error "Wrong INT2_SENSE OPTION"
#endif
#if INT2_INITIAL == ENABLE
	SET_BIT(GICR,GICR_INT2);
    2d88:	ab e5       	ldi	r26, 0x5B	; 91
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	eb e5       	ldi	r30, 0x5B	; 91
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	80 62       	ori	r24, 0x20	; 32
    2d94:	8c 93       	st	X, r24
#else

#error "Wrong INT2_INITIAL option"

#endif
}
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <EXTI_u8IntSetSenseControl>:

u8 EXTI_u8IntSetSenseControl(u8 Copy_u8INT,u8 Copy_u8Sense)
{
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	29 97       	sbiw	r28, 0x09	; 9
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	f8 94       	cli
    2daa:	de bf       	out	0x3e, r29	; 62
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	cd bf       	out	0x3d, r28	; 61
    2db0:	8a 83       	std	Y+2, r24	; 0x02
    2db2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0 ;
    2db4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8INT==INT0)
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	09 f0       	breq	.+2      	; 0x2dbe <EXTI_u8IntSetSenseControl+0x22>
    2dbc:	5f c0       	rjmp	.+190    	; 0x2e7c <EXTI_u8IntSetSenseControl+0xe0>
	{
		switch(Copy_u8Sense)
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	28 2f       	mov	r18, r24
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	39 87       	std	Y+9, r19	; 0x09
    2dc6:	28 87       	std	Y+8, r18	; 0x08
    2dc8:	88 85       	ldd	r24, Y+8	; 0x08
    2dca:	99 85       	ldd	r25, Y+9	; 0x09
    2dcc:	82 30       	cpi	r24, 0x02	; 2
    2dce:	91 05       	cpc	r25, r1
    2dd0:	29 f1       	breq	.+74     	; 0x2e1c <EXTI_u8IntSetSenseControl+0x80>
    2dd2:	28 85       	ldd	r18, Y+8	; 0x08
    2dd4:	39 85       	ldd	r19, Y+9	; 0x09
    2dd6:	23 30       	cpi	r18, 0x03	; 3
    2dd8:	31 05       	cpc	r19, r1
    2dda:	34 f4       	brge	.+12     	; 0x2de8 <EXTI_u8IntSetSenseControl+0x4c>
    2ddc:	88 85       	ldd	r24, Y+8	; 0x08
    2dde:	99 85       	ldd	r25, Y+9	; 0x09
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	91 05       	cpc	r25, r1
    2de4:	61 f0       	breq	.+24     	; 0x2dfe <EXTI_u8IntSetSenseControl+0x62>
    2de6:	47 c0       	rjmp	.+142    	; 0x2e76 <EXTI_u8IntSetSenseControl+0xda>
    2de8:	28 85       	ldd	r18, Y+8	; 0x08
    2dea:	39 85       	ldd	r19, Y+9	; 0x09
    2dec:	23 30       	cpi	r18, 0x03	; 3
    2dee:	31 05       	cpc	r19, r1
    2df0:	99 f1       	breq	.+102    	; 0x2e58 <EXTI_u8IntSetSenseControl+0xbc>
    2df2:	88 85       	ldd	r24, Y+8	; 0x08
    2df4:	99 85       	ldd	r25, Y+9	; 0x09
    2df6:	84 30       	cpi	r24, 0x04	; 4
    2df8:	91 05       	cpc	r25, r1
    2dfa:	f9 f0       	breq	.+62     	; 0x2e3a <EXTI_u8IntSetSenseControl+0x9e>
    2dfc:	3c c0       	rjmp	.+120    	; 0x2e76 <EXTI_u8IntSetSenseControl+0xda>
		{
		case LOW_LEVEL :
			CLR_BIT(MCUCR,MCUCR_ISC01);
    2dfe:	a5 e5       	ldi	r26, 0x55	; 85
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	e5 e5       	ldi	r30, 0x55	; 85
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	8d 7f       	andi	r24, 0xFD	; 253
    2e0a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC00);
    2e0c:	a5 e5       	ldi	r26, 0x55	; 85
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e5 e5       	ldi	r30, 0x55	; 85
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	8e 7f       	andi	r24, 0xFE	; 254
    2e18:	8c 93       	st	X, r24
    2e1a:	ba c0       	rjmp	.+372    	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		case ON_CHANGE :
			CLR_BIT(MCUCR,MCUCR_ISC01);
    2e1c:	a5 e5       	ldi	r26, 0x55	; 85
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e5 e5       	ldi	r30, 0x55	; 85
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	8d 7f       	andi	r24, 0xFD	; 253
    2e28:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
    2e2a:	a5 e5       	ldi	r26, 0x55	; 85
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e5 e5       	ldi	r30, 0x55	; 85
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	81 60       	ori	r24, 0x01	; 1
    2e36:	8c 93       	st	X, r24
    2e38:	ab c0       	rjmp	.+342    	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		case RISING_EDGE :
			SET_BIT(MCUCR,MCUCR_ISC01);
    2e3a:	a5 e5       	ldi	r26, 0x55	; 85
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e5 e5       	ldi	r30, 0x55	; 85
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	82 60       	ori	r24, 0x02	; 2
    2e46:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC00);
    2e48:	a5 e5       	ldi	r26, 0x55	; 85
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e5 e5       	ldi	r30, 0x55	; 85
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	81 60       	ori	r24, 0x01	; 1
    2e54:	8c 93       	st	X, r24
    2e56:	9c c0       	rjmp	.+312    	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		case FALLING_EDGE :
			SET_BIT(MCUCR,MCUCR_ISC01);
    2e58:	a5 e5       	ldi	r26, 0x55	; 85
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e5 e5       	ldi	r30, 0x55	; 85
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	82 60       	ori	r24, 0x02	; 2
    2e64:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC00);
    2e66:	a5 e5       	ldi	r26, 0x55	; 85
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e5 e5       	ldi	r30, 0x55	; 85
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	8e 7f       	andi	r24, 0xFE	; 254
    2e72:	8c 93       	st	X, r24
    2e74:	8d c0       	rjmp	.+282    	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		default:
			Local_u8ErrorState = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	8a c0       	rjmp	.+276    	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;
		}
	}
	else if(Copy_u8INT==INT1)
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	82 30       	cpi	r24, 0x02	; 2
    2e80:	09 f0       	breq	.+2      	; 0x2e84 <EXTI_u8IntSetSenseControl+0xe8>
    2e82:	5f c0       	rjmp	.+190    	; 0x2f42 <EXTI_u8IntSetSenseControl+0x1a6>
	{
		switch(Copy_u8Sense)
    2e84:	8b 81       	ldd	r24, Y+3	; 0x03
    2e86:	28 2f       	mov	r18, r24
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	3f 83       	std	Y+7, r19	; 0x07
    2e8c:	2e 83       	std	Y+6, r18	; 0x06
    2e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e90:	9f 81       	ldd	r25, Y+7	; 0x07
    2e92:	82 30       	cpi	r24, 0x02	; 2
    2e94:	91 05       	cpc	r25, r1
    2e96:	29 f1       	breq	.+74     	; 0x2ee2 <EXTI_u8IntSetSenseControl+0x146>
    2e98:	2e 81       	ldd	r18, Y+6	; 0x06
    2e9a:	3f 81       	ldd	r19, Y+7	; 0x07
    2e9c:	23 30       	cpi	r18, 0x03	; 3
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	34 f4       	brge	.+12     	; 0x2eae <EXTI_u8IntSetSenseControl+0x112>
    2ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea6:	81 30       	cpi	r24, 0x01	; 1
    2ea8:	91 05       	cpc	r25, r1
    2eaa:	61 f0       	breq	.+24     	; 0x2ec4 <EXTI_u8IntSetSenseControl+0x128>
    2eac:	47 c0       	rjmp	.+142    	; 0x2f3c <EXTI_u8IntSetSenseControl+0x1a0>
    2eae:	2e 81       	ldd	r18, Y+6	; 0x06
    2eb0:	3f 81       	ldd	r19, Y+7	; 0x07
    2eb2:	23 30       	cpi	r18, 0x03	; 3
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	99 f1       	breq	.+102    	; 0x2f1e <EXTI_u8IntSetSenseControl+0x182>
    2eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eba:	9f 81       	ldd	r25, Y+7	; 0x07
    2ebc:	84 30       	cpi	r24, 0x04	; 4
    2ebe:	91 05       	cpc	r25, r1
    2ec0:	f9 f0       	breq	.+62     	; 0x2f00 <EXTI_u8IntSetSenseControl+0x164>
    2ec2:	3c c0       	rjmp	.+120    	; 0x2f3c <EXTI_u8IntSetSenseControl+0x1a0>
		{
		case LOW_LEVEL :
			CLR_BIT(MCUCR,MCUCR_ISC10);
    2ec4:	a5 e5       	ldi	r26, 0x55	; 85
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e5 e5       	ldi	r30, 0x55	; 85
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	8b 7f       	andi	r24, 0xFB	; 251
    2ed0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    2ed2:	a5 e5       	ldi	r26, 0x55	; 85
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e5 e5       	ldi	r30, 0x55	; 85
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	87 7f       	andi	r24, 0xF7	; 247
    2ede:	8c 93       	st	X, r24
    2ee0:	57 c0       	rjmp	.+174    	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		case ON_CHANGE :
			CLR_BIT(MCUCR,MCUCR_ISC11);
    2ee2:	a5 e5       	ldi	r26, 0x55	; 85
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	e5 e5       	ldi	r30, 0x55	; 85
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	87 7f       	andi	r24, 0xF7	; 247
    2eee:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC10);
    2ef0:	a5 e5       	ldi	r26, 0x55	; 85
    2ef2:	b0 e0       	ldi	r27, 0x00	; 0
    2ef4:	e5 e5       	ldi	r30, 0x55	; 85
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	84 60       	ori	r24, 0x04	; 4
    2efc:	8c 93       	st	X, r24
    2efe:	48 c0       	rjmp	.+144    	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		case RISING_EDGE :
			SET_BIT(MCUCR,MCUCR_ISC10);
    2f00:	a5 e5       	ldi	r26, 0x55	; 85
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e5 e5       	ldi	r30, 0x55	; 85
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	84 60       	ori	r24, 0x04	; 4
    2f0c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    2f0e:	a5 e5       	ldi	r26, 0x55	; 85
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e5 e5       	ldi	r30, 0x55	; 85
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	88 60       	ori	r24, 0x08	; 8
    2f1a:	8c 93       	st	X, r24
    2f1c:	39 c0       	rjmp	.+114    	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		case FALLING_EDGE :
			SET_BIT(MCUCR,MCUCR_ISC11);
    2f1e:	a5 e5       	ldi	r26, 0x55	; 85
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e5 e5       	ldi	r30, 0x55	; 85
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	88 60       	ori	r24, 0x08	; 8
    2f2a:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC10);
    2f2c:	a5 e5       	ldi	r26, 0x55	; 85
    2f2e:	b0 e0       	ldi	r27, 0x00	; 0
    2f30:	e5 e5       	ldi	r30, 0x55	; 85
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	80 81       	ld	r24, Z
    2f36:	8b 7f       	andi	r24, 0xFB	; 251
    2f38:	8c 93       	st	X, r24
    2f3a:	2a c0       	rjmp	.+84     	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		default:
			Local_u8ErrorState = 1;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	27 c0       	rjmp	.+78     	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;
		}


	}
	else if(Copy_u8INT==INT2)
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	83 30       	cpi	r24, 0x03	; 3
    2f46:	11 f5       	brne	.+68     	; 0x2f8c <EXTI_u8IntSetSenseControl+0x1f0>
	{
		switch(Copy_u8Sense)
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	28 2f       	mov	r18, r24
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	3d 83       	std	Y+5, r19	; 0x05
    2f50:	2c 83       	std	Y+4, r18	; 0x04
    2f52:	8c 81       	ldd	r24, Y+4	; 0x04
    2f54:	9d 81       	ldd	r25, Y+5	; 0x05
    2f56:	83 30       	cpi	r24, 0x03	; 3
    2f58:	91 05       	cpc	r25, r1
    2f5a:	69 f0       	breq	.+26     	; 0x2f76 <EXTI_u8IntSetSenseControl+0x1da>
    2f5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f60:	24 30       	cpi	r18, 0x04	; 4
    2f62:	31 05       	cpc	r19, r1
    2f64:	81 f4       	brne	.+32     	; 0x2f86 <EXTI_u8IntSetSenseControl+0x1ea>
		{
		case RISING_EDGE :
			SET_BIT(MCUCSR,MCUCSR_INT2);
    2f66:	a4 e5       	ldi	r26, 0x54	; 84
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	e4 e5       	ldi	r30, 0x54	; 84
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	80 64       	ori	r24, 0x40	; 64
    2f72:	8c 93       	st	X, r24
    2f74:	0d c0       	rjmp	.+26     	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		case FALLING_EDGE :
			CLR_BIT(MCUCSR,MCUCSR_INT2);
    2f76:	a4 e5       	ldi	r26, 0x54	; 84
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	e4 e5       	ldi	r30, 0x54	; 84
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	8f 7b       	andi	r24, 0xBF	; 191
    2f82:	8c 93       	st	X, r24
    2f84:	05 c0       	rjmp	.+10     	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;

		default:
			Local_u8ErrorState = 1;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	02 c0       	rjmp	.+4      	; 0x2f90 <EXTI_u8IntSetSenseControl+0x1f4>
			break;
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f92:	29 96       	adiw	r28, 0x09	; 9
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <EXTI_u8IntEnable>:

u8 EXTI_u8IntEnable(u8 Copy_u8INT,u8 Copy_u8E)
{
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	cd b7       	in	r28, 0x3d	; 61
    2faa:	de b7       	in	r29, 0x3e	; 62
    2fac:	29 97       	sbiw	r28, 0x09	; 9
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	8a 83       	std	Y+2, r24	; 0x02
    2fba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2fbc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8INT==INT0)
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	81 30       	cpi	r24, 0x01	; 1
    2fc2:	19 f5       	brne	.+70     	; 0x300a <EXTI_u8IntEnable+0x66>
	{
		switch(Copy_u8E)
    2fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	39 87       	std	Y+9, r19	; 0x09
    2fcc:	28 87       	std	Y+8, r18	; 0x08
    2fce:	88 85       	ldd	r24, Y+8	; 0x08
    2fd0:	99 85       	ldd	r25, Y+9	; 0x09
    2fd2:	81 30       	cpi	r24, 0x01	; 1
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	31 f0       	breq	.+12     	; 0x2fe4 <EXTI_u8IntEnable+0x40>
    2fd8:	28 85       	ldd	r18, Y+8	; 0x08
    2fda:	39 85       	ldd	r19, Y+9	; 0x09
    2fdc:	22 30       	cpi	r18, 0x02	; 2
    2fde:	31 05       	cpc	r19, r1
    2fe0:	49 f0       	breq	.+18     	; 0x2ff4 <EXTI_u8IntEnable+0x50>
    2fe2:	10 c0       	rjmp	.+32     	; 0x3004 <EXTI_u8IntEnable+0x60>
		{
		case ENABLE : SET_BIT(GICR,GICR_INT0);
    2fe4:	ab e5       	ldi	r26, 0x5B	; 91
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	eb e5       	ldi	r30, 0x5B	; 91
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	80 64       	ori	r24, 0x40	; 64
    2ff0:	8c 93       	st	X, r24
    2ff2:	59 c0       	rjmp	.+178    	; 0x30a6 <EXTI_u8IntEnable+0x102>
		break;
		case DISABLE: CLR_BIT(GICR,GICR_INT0);
    2ff4:	ab e5       	ldi	r26, 0x5B	; 91
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	eb e5       	ldi	r30, 0x5B	; 91
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	8f 7b       	andi	r24, 0xBF	; 191
    3000:	8c 93       	st	X, r24
    3002:	51 c0       	rjmp	.+162    	; 0x30a6 <EXTI_u8IntEnable+0x102>
		break;
		default :     Local_u8ErrorState=1;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	4e c0       	rjmp	.+156    	; 0x30a6 <EXTI_u8IntEnable+0x102>
		break;
		}
	}


	else if(Copy_u8INT==INT1)
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	82 30       	cpi	r24, 0x02	; 2
    300e:	19 f5       	brne	.+70     	; 0x3056 <EXTI_u8IntEnable+0xb2>
	{
		switch(Copy_u8E)
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	3f 83       	std	Y+7, r19	; 0x07
    3018:	2e 83       	std	Y+6, r18	; 0x06
    301a:	8e 81       	ldd	r24, Y+6	; 0x06
    301c:	9f 81       	ldd	r25, Y+7	; 0x07
    301e:	81 30       	cpi	r24, 0x01	; 1
    3020:	91 05       	cpc	r25, r1
    3022:	31 f0       	breq	.+12     	; 0x3030 <EXTI_u8IntEnable+0x8c>
    3024:	2e 81       	ldd	r18, Y+6	; 0x06
    3026:	3f 81       	ldd	r19, Y+7	; 0x07
    3028:	22 30       	cpi	r18, 0x02	; 2
    302a:	31 05       	cpc	r19, r1
    302c:	49 f0       	breq	.+18     	; 0x3040 <EXTI_u8IntEnable+0x9c>
    302e:	10 c0       	rjmp	.+32     	; 0x3050 <EXTI_u8IntEnable+0xac>
		{
		case ENABLE : SET_BIT(GICR,GICR_INT1);
    3030:	ab e5       	ldi	r26, 0x5B	; 91
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	eb e5       	ldi	r30, 0x5B	; 91
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	80 68       	ori	r24, 0x80	; 128
    303c:	8c 93       	st	X, r24
    303e:	33 c0       	rjmp	.+102    	; 0x30a6 <EXTI_u8IntEnable+0x102>
		break;
		case DISABLE: CLR_BIT(GICR,GICR_INT1);
    3040:	ab e5       	ldi	r26, 0x5B	; 91
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	eb e5       	ldi	r30, 0x5B	; 91
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	8f 77       	andi	r24, 0x7F	; 127
    304c:	8c 93       	st	X, r24
    304e:	2b c0       	rjmp	.+86     	; 0x30a6 <EXTI_u8IntEnable+0x102>
		break;
		default : Local_u8ErrorState=1;
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	89 83       	std	Y+1, r24	; 0x01
    3054:	28 c0       	rjmp	.+80     	; 0x30a6 <EXTI_u8IntEnable+0x102>
		break;
		}
	}


	else if(Copy_u8INT==INT2)
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	83 30       	cpi	r24, 0x03	; 3
    305a:	19 f5       	brne	.+70     	; 0x30a2 <EXTI_u8IntEnable+0xfe>
	{
		switch(Copy_u8E)
    305c:	8b 81       	ldd	r24, Y+3	; 0x03
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	3d 83       	std	Y+5, r19	; 0x05
    3064:	2c 83       	std	Y+4, r18	; 0x04
    3066:	8c 81       	ldd	r24, Y+4	; 0x04
    3068:	9d 81       	ldd	r25, Y+5	; 0x05
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	91 05       	cpc	r25, r1
    306e:	31 f0       	breq	.+12     	; 0x307c <EXTI_u8IntEnable+0xd8>
    3070:	2c 81       	ldd	r18, Y+4	; 0x04
    3072:	3d 81       	ldd	r19, Y+5	; 0x05
    3074:	22 30       	cpi	r18, 0x02	; 2
    3076:	31 05       	cpc	r19, r1
    3078:	49 f0       	breq	.+18     	; 0x308c <EXTI_u8IntEnable+0xe8>
    307a:	10 c0       	rjmp	.+32     	; 0x309c <EXTI_u8IntEnable+0xf8>
		{
		case ENABLE : SET_BIT(GICR,GICR_INT2);
    307c:	ab e5       	ldi	r26, 0x5B	; 91
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	eb e5       	ldi	r30, 0x5B	; 91
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	80 62       	ori	r24, 0x20	; 32
    3088:	8c 93       	st	X, r24
    308a:	0d c0       	rjmp	.+26     	; 0x30a6 <EXTI_u8IntEnable+0x102>
		break;
		case DISABLE: CLR_BIT(GICR,GICR_INT2);
    308c:	ab e5       	ldi	r26, 0x5B	; 91
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	eb e5       	ldi	r30, 0x5B	; 91
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8f 7d       	andi	r24, 0xDF	; 223
    3098:	8c 93       	st	X, r24
    309a:	05 c0       	rjmp	.+10     	; 0x30a6 <EXTI_u8IntEnable+0x102>
		break;
		default :     Local_u8ErrorState=1;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <EXTI_u8IntEnable+0x102>
		}
	}

	else
	{
		Local_u8ErrorState=1;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30a8:	29 96       	adiw	r28, 0x09	; 9
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <EXTI_u8Int0ISR>:

u8 EXTI_u8Int0ISR(void (*Int0ISR) (void))
{
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <EXTI_u8Int0ISR+0x6>
    30c0:	0f 92       	push	r0
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	9b 83       	std	Y+3, r25	; 0x03
    30c8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus =0;
    30ca:	19 82       	std	Y+1, r1	; 0x01

	if(Int0ISR != NULL)
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	9b 81       	ldd	r25, Y+3	; 0x03
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	39 f0       	breq	.+14     	; 0x30e2 <EXTI_u8Int0ISR+0x28>
	{
		Int0Function=Int0ISR;
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	9b 81       	ldd	r25, Y+3	; 0x03
    30d8:	90 93 a7 01 	sts	0x01A7, r25
    30dc:	80 93 a6 01 	sts	0x01A6, r24
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <EXTI_u8Int0ISR+0x2c>

	}
	else
	{
		Local_u8ErrorStatus = 2;
    30e2:	82 e0       	ldi	r24, 0x02	; 2
    30e4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	cf 91       	pop	r28
    30f0:	df 91       	pop	r29
    30f2:	08 95       	ret

000030f4 <EXTI_u8Int1ISR>:
u8 EXTI_u8Int1ISR(void (*Int1ISR) (void))
{
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	00 d0       	rcall	.+0      	; 0x30fa <EXTI_u8Int1ISR+0x6>
    30fa:	0f 92       	push	r0
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	9b 83       	std	Y+3, r25	; 0x03
    3102:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8 Local_u8ErrorStatus =0;
    3104:	19 82       	std	Y+1, r1	; 0x01

		if(Int1ISR != NULL)
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	9b 81       	ldd	r25, Y+3	; 0x03
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	39 f0       	breq	.+14     	; 0x311c <EXTI_u8Int1ISR+0x28>
		{
			Int1Function=Int1ISR;
    310e:	8a 81       	ldd	r24, Y+2	; 0x02
    3110:	9b 81       	ldd	r25, Y+3	; 0x03
    3112:	90 93 a9 01 	sts	0x01A9, r25
    3116:	80 93 a8 01 	sts	0x01A8, r24
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <EXTI_u8Int1ISR+0x2c>

		}
		else
		{
			Local_u8ErrorStatus = 2;
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8ErrorStatus;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
	}


}
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	08 95       	ret

0000312e <EXTI_u8Int2ISR>:
u8 EXTI_u8Int2ISR(void (*Int2ISR) (void))
{
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	00 d0       	rcall	.+0      	; 0x3134 <EXTI_u8Int2ISR+0x6>
    3134:	0f 92       	push	r0
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	9b 83       	std	Y+3, r25	; 0x03
    313c:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8 Local_u8ErrorStatus =0;
    313e:	19 82       	std	Y+1, r1	; 0x01

		if(Int2ISR != NULL)
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	9b 81       	ldd	r25, Y+3	; 0x03
    3144:	00 97       	sbiw	r24, 0x00	; 0
    3146:	39 f0       	breq	.+14     	; 0x3156 <EXTI_u8Int2ISR+0x28>
		{
			Int2Function=Int2ISR;
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	9b 81       	ldd	r25, Y+3	; 0x03
    314c:	90 93 ab 01 	sts	0x01AB, r25
    3150:	80 93 aa 01 	sts	0x01AA, r24
    3154:	02 c0       	rjmp	.+4      	; 0x315a <EXTI_u8Int2ISR+0x2c>

		}
		else
		{
			Local_u8ErrorStatus = 2;
    3156:	82 e0       	ldi	r24, 0x02	; 2
    3158:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8ErrorStatus;
    315a:	89 81       	ldd	r24, Y+1	; 0x01
	}


}
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	08 95       	ret

00003168 <__vector_1>:


void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
    3168:	1f 92       	push	r1
    316a:	0f 92       	push	r0
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	0f 92       	push	r0
    3170:	11 24       	eor	r1, r1
    3172:	2f 93       	push	r18
    3174:	3f 93       	push	r19
    3176:	4f 93       	push	r20
    3178:	5f 93       	push	r21
    317a:	6f 93       	push	r22
    317c:	7f 93       	push	r23
    317e:	8f 93       	push	r24
    3180:	9f 93       	push	r25
    3182:	af 93       	push	r26
    3184:	bf 93       	push	r27
    3186:	ef 93       	push	r30
    3188:	ff 93       	push	r31
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
	if(Int0Function!= NULL)
    3192:	80 91 a6 01 	lds	r24, 0x01A6
    3196:	90 91 a7 01 	lds	r25, 0x01A7
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	29 f0       	breq	.+10     	; 0x31a8 <__vector_1+0x40>
	{
		Int0Function();
    319e:	e0 91 a6 01 	lds	r30, 0x01A6
    31a2:	f0 91 a7 01 	lds	r31, 0x01A7
    31a6:	09 95       	icall
	}
	else
	{
		/*DO NOTHING*/
	}
}
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	ff 91       	pop	r31
    31ae:	ef 91       	pop	r30
    31b0:	bf 91       	pop	r27
    31b2:	af 91       	pop	r26
    31b4:	9f 91       	pop	r25
    31b6:	8f 91       	pop	r24
    31b8:	7f 91       	pop	r23
    31ba:	6f 91       	pop	r22
    31bc:	5f 91       	pop	r21
    31be:	4f 91       	pop	r20
    31c0:	3f 91       	pop	r19
    31c2:	2f 91       	pop	r18
    31c4:	0f 90       	pop	r0
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	0f 90       	pop	r0
    31ca:	1f 90       	pop	r1
    31cc:	18 95       	reti

000031ce <__vector_2>:

void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
    31ce:	1f 92       	push	r1
    31d0:	0f 92       	push	r0
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	0f 92       	push	r0
    31d6:	11 24       	eor	r1, r1
    31d8:	2f 93       	push	r18
    31da:	3f 93       	push	r19
    31dc:	4f 93       	push	r20
    31de:	5f 93       	push	r21
    31e0:	6f 93       	push	r22
    31e2:	7f 93       	push	r23
    31e4:	8f 93       	push	r24
    31e6:	9f 93       	push	r25
    31e8:	af 93       	push	r26
    31ea:	bf 93       	push	r27
    31ec:	ef 93       	push	r30
    31ee:	ff 93       	push	r31
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
	if(Int1Function!=NULL)
    31f8:	80 91 a8 01 	lds	r24, 0x01A8
    31fc:	90 91 a9 01 	lds	r25, 0x01A9
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	29 f0       	breq	.+10     	; 0x320e <__vector_2+0x40>
	{
		Int1Function();
    3204:	e0 91 a8 01 	lds	r30, 0x01A8
    3208:	f0 91 a9 01 	lds	r31, 0x01A9
    320c:	09 95       	icall
	}
	else
	{
		/*DO NOTHING*/
	}
}
    320e:	cf 91       	pop	r28
    3210:	df 91       	pop	r29
    3212:	ff 91       	pop	r31
    3214:	ef 91       	pop	r30
    3216:	bf 91       	pop	r27
    3218:	af 91       	pop	r26
    321a:	9f 91       	pop	r25
    321c:	8f 91       	pop	r24
    321e:	7f 91       	pop	r23
    3220:	6f 91       	pop	r22
    3222:	5f 91       	pop	r21
    3224:	4f 91       	pop	r20
    3226:	3f 91       	pop	r19
    3228:	2f 91       	pop	r18
    322a:	0f 90       	pop	r0
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	0f 90       	pop	r0
    3230:	1f 90       	pop	r1
    3232:	18 95       	reti

00003234 <__vector_3>:

void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    3234:	1f 92       	push	r1
    3236:	0f 92       	push	r0
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	0f 92       	push	r0
    323c:	11 24       	eor	r1, r1
    323e:	2f 93       	push	r18
    3240:	3f 93       	push	r19
    3242:	4f 93       	push	r20
    3244:	5f 93       	push	r21
    3246:	6f 93       	push	r22
    3248:	7f 93       	push	r23
    324a:	8f 93       	push	r24
    324c:	9f 93       	push	r25
    324e:	af 93       	push	r26
    3250:	bf 93       	push	r27
    3252:	ef 93       	push	r30
    3254:	ff 93       	push	r31
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
	if(Int2Function!=NULL)
    325e:	80 91 aa 01 	lds	r24, 0x01AA
    3262:	90 91 ab 01 	lds	r25, 0x01AB
    3266:	00 97       	sbiw	r24, 0x00	; 0
    3268:	29 f0       	breq	.+10     	; 0x3274 <__vector_3+0x40>
	{
		Int2Function();
    326a:	e0 91 aa 01 	lds	r30, 0x01AA
    326e:	f0 91 ab 01 	lds	r31, 0x01AB
    3272:	09 95       	icall
	}
	else
	{
		/*DO NOTHING*/
	}
}
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	ff 91       	pop	r31
    327a:	ef 91       	pop	r30
    327c:	bf 91       	pop	r27
    327e:	af 91       	pop	r26
    3280:	9f 91       	pop	r25
    3282:	8f 91       	pop	r24
    3284:	7f 91       	pop	r23
    3286:	6f 91       	pop	r22
    3288:	5f 91       	pop	r21
    328a:	4f 91       	pop	r20
    328c:	3f 91       	pop	r19
    328e:	2f 91       	pop	r18
    3290:	0f 90       	pop	r0
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	0f 90       	pop	r0
    3296:	1f 90       	pop	r1
    3298:	18 95       	reti

0000329a <DIO_u8SetPinDirection>:
/*********************************************************************************/

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Direction)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	28 97       	sbiw	r28, 0x08	; 8
    32a4:	0f b6       	in	r0, 0x3f	; 63
    32a6:	f8 94       	cli
    32a8:	de bf       	out	0x3e, r29	; 62
    32aa:	0f be       	out	0x3f, r0	; 63
    32ac:	cd bf       	out	0x3d, r28	; 61
    32ae:	8a 83       	std	Y+2, r24	; 0x02
    32b0:	6b 83       	std	Y+3, r22	; 0x03
    32b2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    32b4:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7)
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	88 30       	cpi	r24, 0x08	; 8
    32ba:	10 f0       	brcs	.+4      	; 0x32c0 <DIO_u8SetPinDirection+0x26>
		Local_u8ErrorState = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == INPUT)
    32c0:	8c 81       	ldd	r24, Y+4	; 0x04
    32c2:	88 23       	and	r24, r24
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <DIO_u8SetPinDirection+0x2e>
    32c6:	78 c0       	rjmp	.+240    	; 0x33b8 <DIO_u8SetPinDirection+0x11e>
	{
		switch (Copy_u8Port)
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	28 2f       	mov	r18, r24
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	38 87       	std	Y+8, r19	; 0x08
    32d0:	2f 83       	std	Y+7, r18	; 0x07
    32d2:	8f 81       	ldd	r24, Y+7	; 0x07
    32d4:	98 85       	ldd	r25, Y+8	; 0x08
    32d6:	82 30       	cpi	r24, 0x02	; 2
    32d8:	91 05       	cpc	r25, r1
    32da:	61 f1       	breq	.+88     	; 0x3334 <DIO_u8SetPinDirection+0x9a>
    32dc:	2f 81       	ldd	r18, Y+7	; 0x07
    32de:	38 85       	ldd	r19, Y+8	; 0x08
    32e0:	23 30       	cpi	r18, 0x03	; 3
    32e2:	31 05       	cpc	r19, r1
    32e4:	34 f4       	brge	.+12     	; 0x32f2 <DIO_u8SetPinDirection+0x58>
    32e6:	8f 81       	ldd	r24, Y+7	; 0x07
    32e8:	98 85       	ldd	r25, Y+8	; 0x08
    32ea:	81 30       	cpi	r24, 0x01	; 1
    32ec:	91 05       	cpc	r25, r1
    32ee:	69 f0       	breq	.+26     	; 0x330a <DIO_u8SetPinDirection+0x70>
    32f0:	60 c0       	rjmp	.+192    	; 0x33b2 <DIO_u8SetPinDirection+0x118>
    32f2:	2f 81       	ldd	r18, Y+7	; 0x07
    32f4:	38 85       	ldd	r19, Y+8	; 0x08
    32f6:	23 30       	cpi	r18, 0x03	; 3
    32f8:	31 05       	cpc	r19, r1
    32fa:	89 f1       	breq	.+98     	; 0x335e <DIO_u8SetPinDirection+0xc4>
    32fc:	8f 81       	ldd	r24, Y+7	; 0x07
    32fe:	98 85       	ldd	r25, Y+8	; 0x08
    3300:	84 30       	cpi	r24, 0x04	; 4
    3302:	91 05       	cpc	r25, r1
    3304:	09 f4       	brne	.+2      	; 0x3308 <DIO_u8SetPinDirection+0x6e>
    3306:	40 c0       	rjmp	.+128    	; 0x3388 <DIO_u8SetPinDirection+0xee>
    3308:	54 c0       	rjmp	.+168    	; 0x33b2 <DIO_u8SetPinDirection+0x118>
		{
		case PORT_A :
			CLR_BIT(DDRA,Copy_u8Pin);
    330a:	aa e3       	ldi	r26, 0x3A	; 58
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	ea e3       	ldi	r30, 0x3A	; 58
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	48 2f       	mov	r20, r24
    3316:	8b 81       	ldd	r24, Y+3	; 0x03
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	02 2e       	mov	r0, r18
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <DIO_u8SetPinDirection+0x8e>
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	0a 94       	dec	r0
    332a:	e2 f7       	brpl	.-8      	; 0x3324 <DIO_u8SetPinDirection+0x8a>
    332c:	80 95       	com	r24
    332e:	84 23       	and	r24, r20
    3330:	8c 93       	st	X, r24
    3332:	bb c0       	rjmp	.+374    	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_B :
			CLR_BIT(DDRB,Copy_u8Pin);
    3334:	a7 e3       	ldi	r26, 0x37	; 55
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	e7 e3       	ldi	r30, 0x37	; 55
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	48 2f       	mov	r20, r24
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	28 2f       	mov	r18, r24
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	02 2e       	mov	r0, r18
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <DIO_u8SetPinDirection+0xb8>
    334e:	88 0f       	add	r24, r24
    3350:	99 1f       	adc	r25, r25
    3352:	0a 94       	dec	r0
    3354:	e2 f7       	brpl	.-8      	; 0x334e <DIO_u8SetPinDirection+0xb4>
    3356:	80 95       	com	r24
    3358:	84 23       	and	r24, r20
    335a:	8c 93       	st	X, r24
    335c:	a6 c0       	rjmp	.+332    	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_C :
			CLR_BIT(DDRC,Copy_u8Pin);
    335e:	a4 e3       	ldi	r26, 0x34	; 52
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e4 e3       	ldi	r30, 0x34	; 52
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	48 2f       	mov	r20, r24
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	02 2e       	mov	r0, r18
    3376:	02 c0       	rjmp	.+4      	; 0x337c <DIO_u8SetPinDirection+0xe2>
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	0a 94       	dec	r0
    337e:	e2 f7       	brpl	.-8      	; 0x3378 <DIO_u8SetPinDirection+0xde>
    3380:	80 95       	com	r24
    3382:	84 23       	and	r24, r20
    3384:	8c 93       	st	X, r24
    3386:	91 c0       	rjmp	.+290    	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_D :
			CLR_BIT(DDRD,Copy_u8Pin);
    3388:	a1 e3       	ldi	r26, 0x31	; 49
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	e1 e3       	ldi	r30, 0x31	; 49
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	48 2f       	mov	r20, r24
    3394:	8b 81       	ldd	r24, Y+3	; 0x03
    3396:	28 2f       	mov	r18, r24
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	02 2e       	mov	r0, r18
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <DIO_u8SetPinDirection+0x10c>
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	0a 94       	dec	r0
    33a8:	e2 f7       	brpl	.-8      	; 0x33a2 <DIO_u8SetPinDirection+0x108>
    33aa:	80 95       	com	r24
    33ac:	84 23       	and	r24, r20
    33ae:	8c 93       	st	X, r24
    33b0:	7c c0       	rjmp	.+248    	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	79 c0       	rjmp	.+242    	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		}
	}
	else if(Copy_u8Direction == OUTPUT)
    33b8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ba:	81 30       	cpi	r24, 0x01	; 1
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <DIO_u8SetPinDirection+0x126>
    33be:	73 c0       	rjmp	.+230    	; 0x34a6 <DIO_u8SetPinDirection+0x20c>
	{
		switch (Copy_u8Port)
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	28 2f       	mov	r18, r24
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	3e 83       	std	Y+6, r19	; 0x06
    33c8:	2d 83       	std	Y+5, r18	; 0x05
    33ca:	8d 81       	ldd	r24, Y+5	; 0x05
    33cc:	9e 81       	ldd	r25, Y+6	; 0x06
    33ce:	82 30       	cpi	r24, 0x02	; 2
    33d0:	91 05       	cpc	r25, r1
    33d2:	51 f1       	breq	.+84     	; 0x3428 <DIO_u8SetPinDirection+0x18e>
    33d4:	2d 81       	ldd	r18, Y+5	; 0x05
    33d6:	3e 81       	ldd	r19, Y+6	; 0x06
    33d8:	23 30       	cpi	r18, 0x03	; 3
    33da:	31 05       	cpc	r19, r1
    33dc:	34 f4       	brge	.+12     	; 0x33ea <DIO_u8SetPinDirection+0x150>
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	9e 81       	ldd	r25, Y+6	; 0x06
    33e2:	81 30       	cpi	r24, 0x01	; 1
    33e4:	91 05       	cpc	r25, r1
    33e6:	61 f0       	breq	.+24     	; 0x3400 <DIO_u8SetPinDirection+0x166>
    33e8:	5b c0       	rjmp	.+182    	; 0x34a0 <DIO_u8SetPinDirection+0x206>
    33ea:	2d 81       	ldd	r18, Y+5	; 0x05
    33ec:	3e 81       	ldd	r19, Y+6	; 0x06
    33ee:	23 30       	cpi	r18, 0x03	; 3
    33f0:	31 05       	cpc	r19, r1
    33f2:	71 f1       	breq	.+92     	; 0x3450 <DIO_u8SetPinDirection+0x1b6>
    33f4:	8d 81       	ldd	r24, Y+5	; 0x05
    33f6:	9e 81       	ldd	r25, Y+6	; 0x06
    33f8:	84 30       	cpi	r24, 0x04	; 4
    33fa:	91 05       	cpc	r25, r1
    33fc:	e9 f1       	breq	.+122    	; 0x3478 <DIO_u8SetPinDirection+0x1de>
    33fe:	50 c0       	rjmp	.+160    	; 0x34a0 <DIO_u8SetPinDirection+0x206>
		{
		case PORT_A :
			SET_BIT(DDRA,Copy_u8Pin);
    3400:	aa e3       	ldi	r26, 0x3A	; 58
    3402:	b0 e0       	ldi	r27, 0x00	; 0
    3404:	ea e3       	ldi	r30, 0x3A	; 58
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	80 81       	ld	r24, Z
    340a:	48 2f       	mov	r20, r24
    340c:	8b 81       	ldd	r24, Y+3	; 0x03
    340e:	28 2f       	mov	r18, r24
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	02 2e       	mov	r0, r18
    3418:	02 c0       	rjmp	.+4      	; 0x341e <DIO_u8SetPinDirection+0x184>
    341a:	88 0f       	add	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	0a 94       	dec	r0
    3420:	e2 f7       	brpl	.-8      	; 0x341a <DIO_u8SetPinDirection+0x180>
    3422:	84 2b       	or	r24, r20
    3424:	8c 93       	st	X, r24
    3426:	41 c0       	rjmp	.+130    	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_B :
			SET_BIT(DDRB,Copy_u8Pin);
    3428:	a7 e3       	ldi	r26, 0x37	; 55
    342a:	b0 e0       	ldi	r27, 0x00	; 0
    342c:	e7 e3       	ldi	r30, 0x37	; 55
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	48 2f       	mov	r20, r24
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	28 2f       	mov	r18, r24
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	02 2e       	mov	r0, r18
    3440:	02 c0       	rjmp	.+4      	; 0x3446 <DIO_u8SetPinDirection+0x1ac>
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	0a 94       	dec	r0
    3448:	e2 f7       	brpl	.-8      	; 0x3442 <DIO_u8SetPinDirection+0x1a8>
    344a:	84 2b       	or	r24, r20
    344c:	8c 93       	st	X, r24
    344e:	2d c0       	rjmp	.+90     	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_C :
			SET_BIT(DDRC,Copy_u8Pin);
    3450:	a4 e3       	ldi	r26, 0x34	; 52
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	e4 e3       	ldi	r30, 0x34	; 52
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	80 81       	ld	r24, Z
    345a:	48 2f       	mov	r20, r24
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	28 2f       	mov	r18, r24
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	02 2e       	mov	r0, r18
    3468:	02 c0       	rjmp	.+4      	; 0x346e <DIO_u8SetPinDirection+0x1d4>
    346a:	88 0f       	add	r24, r24
    346c:	99 1f       	adc	r25, r25
    346e:	0a 94       	dec	r0
    3470:	e2 f7       	brpl	.-8      	; 0x346a <DIO_u8SetPinDirection+0x1d0>
    3472:	84 2b       	or	r24, r20
    3474:	8c 93       	st	X, r24
    3476:	19 c0       	rjmp	.+50     	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_D :
			SET_BIT(DDRD,Copy_u8Pin);
    3478:	a1 e3       	ldi	r26, 0x31	; 49
    347a:	b0 e0       	ldi	r27, 0x00	; 0
    347c:	e1 e3       	ldi	r30, 0x31	; 49
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	80 81       	ld	r24, Z
    3482:	48 2f       	mov	r20, r24
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	28 2f       	mov	r18, r24
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	02 2e       	mov	r0, r18
    3490:	02 c0       	rjmp	.+4      	; 0x3496 <DIO_u8SetPinDirection+0x1fc>
    3492:	88 0f       	add	r24, r24
    3494:	99 1f       	adc	r25, r25
    3496:	0a 94       	dec	r0
    3498:	e2 f7       	brpl	.-8      	; 0x3492 <DIO_u8SetPinDirection+0x1f8>
    349a:	84 2b       	or	r24, r20
    349c:	8c 93       	st	X, r24
    349e:	05 c0       	rjmp	.+10     	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	02 c0       	rjmp	.+4      	; 0x34aa <DIO_u8SetPinDirection+0x210>
			break;
		}
	}
	else
	{
		Local_u8ErrorState =1;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    34ac:	28 96       	adiw	r28, 0x08	; 8
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <DIO_u8SetPortDirection+0x6>
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <DIO_u8SetPortDirection+0x8>
    34c6:	0f 92       	push	r0
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	8a 83       	std	Y+2, r24	; 0x02
    34ce:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    34d0:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	28 2f       	mov	r18, r24
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	3d 83       	std	Y+5, r19	; 0x05
    34da:	2c 83       	std	Y+4, r18	; 0x04
    34dc:	8c 81       	ldd	r24, Y+4	; 0x04
    34de:	9d 81       	ldd	r25, Y+5	; 0x05
    34e0:	82 30       	cpi	r24, 0x02	; 2
    34e2:	91 05       	cpc	r25, r1
    34e4:	d9 f0       	breq	.+54     	; 0x351c <DIO_u8SetPortDirection+0x5e>
    34e6:	2c 81       	ldd	r18, Y+4	; 0x04
    34e8:	3d 81       	ldd	r19, Y+5	; 0x05
    34ea:	23 30       	cpi	r18, 0x03	; 3
    34ec:	31 05       	cpc	r19, r1
    34ee:	34 f4       	brge	.+12     	; 0x34fc <DIO_u8SetPortDirection+0x3e>
    34f0:	8c 81       	ldd	r24, Y+4	; 0x04
    34f2:	9d 81       	ldd	r25, Y+5	; 0x05
    34f4:	81 30       	cpi	r24, 0x01	; 1
    34f6:	91 05       	cpc	r25, r1
    34f8:	61 f0       	breq	.+24     	; 0x3512 <DIO_u8SetPortDirection+0x54>
    34fa:	1f c0       	rjmp	.+62     	; 0x353a <DIO_u8SetPortDirection+0x7c>
    34fc:	2c 81       	ldd	r18, Y+4	; 0x04
    34fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3500:	23 30       	cpi	r18, 0x03	; 3
    3502:	31 05       	cpc	r19, r1
    3504:	81 f0       	breq	.+32     	; 0x3526 <DIO_u8SetPortDirection+0x68>
    3506:	8c 81       	ldd	r24, Y+4	; 0x04
    3508:	9d 81       	ldd	r25, Y+5	; 0x05
    350a:	84 30       	cpi	r24, 0x04	; 4
    350c:	91 05       	cpc	r25, r1
    350e:	81 f0       	breq	.+32     	; 0x3530 <DIO_u8SetPortDirection+0x72>
    3510:	14 c0       	rjmp	.+40     	; 0x353a <DIO_u8SetPortDirection+0x7c>
	{
	case PORT_A :
		DDRA = Copy_u8Direction;
    3512:	ea e3       	ldi	r30, 0x3A	; 58
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	8b 81       	ldd	r24, Y+3	; 0x03
    3518:	80 83       	st	Z, r24
    351a:	11 c0       	rjmp	.+34     	; 0x353e <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_B :
		DDRB = Copy_u8Direction;
    351c:	e7 e3       	ldi	r30, 0x37	; 55
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	80 83       	st	Z, r24
    3524:	0c c0       	rjmp	.+24     	; 0x353e <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_C :
		DDRC = Copy_u8Direction;
    3526:	e4 e3       	ldi	r30, 0x34	; 52
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	8b 81       	ldd	r24, Y+3	; 0x03
    352c:	80 83       	st	Z, r24
    352e:	07 c0       	rjmp	.+14     	; 0x353e <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_D :
		DDRD = Copy_u8Direction;
    3530:	e1 e3       	ldi	r30, 0x31	; 49
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	80 83       	st	Z, r24
    3538:	02 c0       	rjmp	.+4      	; 0x353e <DIO_u8SetPortDirection+0x80>
		break;
	default :
		Local_u8ErrorState =1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    353e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	28 97       	sbiw	r28, 0x08	; 8
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	8a 83       	std	Y+2, r24	; 0x02
    3566:	6b 83       	std	Y+3, r22	; 0x03
    3568:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    356a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin>7)
    356c:	8b 81       	ldd	r24, Y+3	; 0x03
    356e:	88 30       	cpi	r24, 0x08	; 8
    3570:	10 f0       	brcs	.+4      	; 0x3576 <DIO_u8SetPinValue+0x26>
		Local_u8ErrorState =1;
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Value == LOW)
    3576:	8c 81       	ldd	r24, Y+4	; 0x04
    3578:	88 23       	and	r24, r24
    357a:	09 f0       	breq	.+2      	; 0x357e <DIO_u8SetPinValue+0x2e>
    357c:	78 c0       	rjmp	.+240    	; 0x366e <DIO_u8SetPinValue+0x11e>
	{
		switch (Copy_u8Port)
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	28 2f       	mov	r18, r24
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	38 87       	std	Y+8, r19	; 0x08
    3586:	2f 83       	std	Y+7, r18	; 0x07
    3588:	8f 81       	ldd	r24, Y+7	; 0x07
    358a:	98 85       	ldd	r25, Y+8	; 0x08
    358c:	82 30       	cpi	r24, 0x02	; 2
    358e:	91 05       	cpc	r25, r1
    3590:	61 f1       	breq	.+88     	; 0x35ea <DIO_u8SetPinValue+0x9a>
    3592:	2f 81       	ldd	r18, Y+7	; 0x07
    3594:	38 85       	ldd	r19, Y+8	; 0x08
    3596:	23 30       	cpi	r18, 0x03	; 3
    3598:	31 05       	cpc	r19, r1
    359a:	34 f4       	brge	.+12     	; 0x35a8 <DIO_u8SetPinValue+0x58>
    359c:	8f 81       	ldd	r24, Y+7	; 0x07
    359e:	98 85       	ldd	r25, Y+8	; 0x08
    35a0:	81 30       	cpi	r24, 0x01	; 1
    35a2:	91 05       	cpc	r25, r1
    35a4:	69 f0       	breq	.+26     	; 0x35c0 <DIO_u8SetPinValue+0x70>
    35a6:	60 c0       	rjmp	.+192    	; 0x3668 <DIO_u8SetPinValue+0x118>
    35a8:	2f 81       	ldd	r18, Y+7	; 0x07
    35aa:	38 85       	ldd	r19, Y+8	; 0x08
    35ac:	23 30       	cpi	r18, 0x03	; 3
    35ae:	31 05       	cpc	r19, r1
    35b0:	89 f1       	breq	.+98     	; 0x3614 <DIO_u8SetPinValue+0xc4>
    35b2:	8f 81       	ldd	r24, Y+7	; 0x07
    35b4:	98 85       	ldd	r25, Y+8	; 0x08
    35b6:	84 30       	cpi	r24, 0x04	; 4
    35b8:	91 05       	cpc	r25, r1
    35ba:	09 f4       	brne	.+2      	; 0x35be <DIO_u8SetPinValue+0x6e>
    35bc:	40 c0       	rjmp	.+128    	; 0x363e <DIO_u8SetPinValue+0xee>
    35be:	54 c0       	rjmp	.+168    	; 0x3668 <DIO_u8SetPinValue+0x118>
		{
		case PORT_A :
			CLR_BIT(PORTA,Copy_u8Pin);
    35c0:	ab e3       	ldi	r26, 0x3B	; 59
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	eb e3       	ldi	r30, 0x3B	; 59
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	80 81       	ld	r24, Z
    35ca:	48 2f       	mov	r20, r24
    35cc:	8b 81       	ldd	r24, Y+3	; 0x03
    35ce:	28 2f       	mov	r18, r24
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	02 2e       	mov	r0, r18
    35d8:	02 c0       	rjmp	.+4      	; 0x35de <DIO_u8SetPinValue+0x8e>
    35da:	88 0f       	add	r24, r24
    35dc:	99 1f       	adc	r25, r25
    35de:	0a 94       	dec	r0
    35e0:	e2 f7       	brpl	.-8      	; 0x35da <DIO_u8SetPinValue+0x8a>
    35e2:	80 95       	com	r24
    35e4:	84 23       	and	r24, r20
    35e6:	8c 93       	st	X, r24
    35e8:	bb c0       	rjmp	.+374    	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_B :
			CLR_BIT(PORTB,Copy_u8Pin);
    35ea:	a8 e3       	ldi	r26, 0x38	; 56
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e8 e3       	ldi	r30, 0x38	; 56
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	48 2f       	mov	r20, r24
    35f6:	8b 81       	ldd	r24, Y+3	; 0x03
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	02 2e       	mov	r0, r18
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <DIO_u8SetPinValue+0xb8>
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	0a 94       	dec	r0
    360a:	e2 f7       	brpl	.-8      	; 0x3604 <DIO_u8SetPinValue+0xb4>
    360c:	80 95       	com	r24
    360e:	84 23       	and	r24, r20
    3610:	8c 93       	st	X, r24
    3612:	a6 c0       	rjmp	.+332    	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_C :
			CLR_BIT(PORTC,Copy_u8Pin);
    3614:	a5 e3       	ldi	r26, 0x35	; 53
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	e5 e3       	ldi	r30, 0x35	; 53
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	80 81       	ld	r24, Z
    361e:	48 2f       	mov	r20, r24
    3620:	8b 81       	ldd	r24, Y+3	; 0x03
    3622:	28 2f       	mov	r18, r24
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	02 2e       	mov	r0, r18
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <DIO_u8SetPinValue+0xe2>
    362e:	88 0f       	add	r24, r24
    3630:	99 1f       	adc	r25, r25
    3632:	0a 94       	dec	r0
    3634:	e2 f7       	brpl	.-8      	; 0x362e <DIO_u8SetPinValue+0xde>
    3636:	80 95       	com	r24
    3638:	84 23       	and	r24, r20
    363a:	8c 93       	st	X, r24
    363c:	91 c0       	rjmp	.+290    	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_D :
			CLR_BIT(PORTD,Copy_u8Pin);
    363e:	a2 e3       	ldi	r26, 0x32	; 50
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e2 e3       	ldi	r30, 0x32	; 50
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	48 2f       	mov	r20, r24
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	28 2f       	mov	r18, r24
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	02 2e       	mov	r0, r18
    3656:	02 c0       	rjmp	.+4      	; 0x365c <DIO_u8SetPinValue+0x10c>
    3658:	88 0f       	add	r24, r24
    365a:	99 1f       	adc	r25, r25
    365c:	0a 94       	dec	r0
    365e:	e2 f7       	brpl	.-8      	; 0x3658 <DIO_u8SetPinValue+0x108>
    3660:	80 95       	com	r24
    3662:	84 23       	and	r24, r20
    3664:	8c 93       	st	X, r24
    3666:	7c c0       	rjmp	.+248    	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	89 83       	std	Y+1, r24	; 0x01
    366c:	79 c0       	rjmp	.+242    	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		}
	}
	else if(Copy_u8Value == HIGH)
    366e:	8c 81       	ldd	r24, Y+4	; 0x04
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	09 f0       	breq	.+2      	; 0x3676 <DIO_u8SetPinValue+0x126>
    3674:	73 c0       	rjmp	.+230    	; 0x375c <DIO_u8SetPinValue+0x20c>
	{
		switch (Copy_u8Port)
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	28 2f       	mov	r18, r24
    367a:	30 e0       	ldi	r19, 0x00	; 0
    367c:	3e 83       	std	Y+6, r19	; 0x06
    367e:	2d 83       	std	Y+5, r18	; 0x05
    3680:	8d 81       	ldd	r24, Y+5	; 0x05
    3682:	9e 81       	ldd	r25, Y+6	; 0x06
    3684:	82 30       	cpi	r24, 0x02	; 2
    3686:	91 05       	cpc	r25, r1
    3688:	51 f1       	breq	.+84     	; 0x36de <DIO_u8SetPinValue+0x18e>
    368a:	2d 81       	ldd	r18, Y+5	; 0x05
    368c:	3e 81       	ldd	r19, Y+6	; 0x06
    368e:	23 30       	cpi	r18, 0x03	; 3
    3690:	31 05       	cpc	r19, r1
    3692:	34 f4       	brge	.+12     	; 0x36a0 <DIO_u8SetPinValue+0x150>
    3694:	8d 81       	ldd	r24, Y+5	; 0x05
    3696:	9e 81       	ldd	r25, Y+6	; 0x06
    3698:	81 30       	cpi	r24, 0x01	; 1
    369a:	91 05       	cpc	r25, r1
    369c:	61 f0       	breq	.+24     	; 0x36b6 <DIO_u8SetPinValue+0x166>
    369e:	5b c0       	rjmp	.+182    	; 0x3756 <DIO_u8SetPinValue+0x206>
    36a0:	2d 81       	ldd	r18, Y+5	; 0x05
    36a2:	3e 81       	ldd	r19, Y+6	; 0x06
    36a4:	23 30       	cpi	r18, 0x03	; 3
    36a6:	31 05       	cpc	r19, r1
    36a8:	71 f1       	breq	.+92     	; 0x3706 <DIO_u8SetPinValue+0x1b6>
    36aa:	8d 81       	ldd	r24, Y+5	; 0x05
    36ac:	9e 81       	ldd	r25, Y+6	; 0x06
    36ae:	84 30       	cpi	r24, 0x04	; 4
    36b0:	91 05       	cpc	r25, r1
    36b2:	e9 f1       	breq	.+122    	; 0x372e <DIO_u8SetPinValue+0x1de>
    36b4:	50 c0       	rjmp	.+160    	; 0x3756 <DIO_u8SetPinValue+0x206>
		{
		case PORT_A :
			SET_BIT(PORTA,Copy_u8Pin);
    36b6:	ab e3       	ldi	r26, 0x3B	; 59
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	eb e3       	ldi	r30, 0x3B	; 59
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	48 2f       	mov	r20, r24
    36c2:	8b 81       	ldd	r24, Y+3	; 0x03
    36c4:	28 2f       	mov	r18, r24
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	02 2e       	mov	r0, r18
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <DIO_u8SetPinValue+0x184>
    36d0:	88 0f       	add	r24, r24
    36d2:	99 1f       	adc	r25, r25
    36d4:	0a 94       	dec	r0
    36d6:	e2 f7       	brpl	.-8      	; 0x36d0 <DIO_u8SetPinValue+0x180>
    36d8:	84 2b       	or	r24, r20
    36da:	8c 93       	st	X, r24
    36dc:	41 c0       	rjmp	.+130    	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_B :
			SET_BIT(PORTB,Copy_u8Pin);
    36de:	a8 e3       	ldi	r26, 0x38	; 56
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	e8 e3       	ldi	r30, 0x38	; 56
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	48 2f       	mov	r20, r24
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	28 2f       	mov	r18, r24
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	02 2e       	mov	r0, r18
    36f6:	02 c0       	rjmp	.+4      	; 0x36fc <DIO_u8SetPinValue+0x1ac>
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	0a 94       	dec	r0
    36fe:	e2 f7       	brpl	.-8      	; 0x36f8 <DIO_u8SetPinValue+0x1a8>
    3700:	84 2b       	or	r24, r20
    3702:	8c 93       	st	X, r24
    3704:	2d c0       	rjmp	.+90     	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_C :
			SET_BIT(PORTC,Copy_u8Pin);
    3706:	a5 e3       	ldi	r26, 0x35	; 53
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	e5 e3       	ldi	r30, 0x35	; 53
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	80 81       	ld	r24, Z
    3710:	48 2f       	mov	r20, r24
    3712:	8b 81       	ldd	r24, Y+3	; 0x03
    3714:	28 2f       	mov	r18, r24
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	02 2e       	mov	r0, r18
    371e:	02 c0       	rjmp	.+4      	; 0x3724 <DIO_u8SetPinValue+0x1d4>
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	0a 94       	dec	r0
    3726:	e2 f7       	brpl	.-8      	; 0x3720 <DIO_u8SetPinValue+0x1d0>
    3728:	84 2b       	or	r24, r20
    372a:	8c 93       	st	X, r24
    372c:	19 c0       	rjmp	.+50     	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		case PORT_D :
			SET_BIT(PORTD,Copy_u8Pin);
    372e:	a2 e3       	ldi	r26, 0x32	; 50
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	e2 e3       	ldi	r30, 0x32	; 50
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	48 2f       	mov	r20, r24
    373a:	8b 81       	ldd	r24, Y+3	; 0x03
    373c:	28 2f       	mov	r18, r24
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	02 2e       	mov	r0, r18
    3746:	02 c0       	rjmp	.+4      	; 0x374c <DIO_u8SetPinValue+0x1fc>
    3748:	88 0f       	add	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	0a 94       	dec	r0
    374e:	e2 f7       	brpl	.-8      	; 0x3748 <DIO_u8SetPinValue+0x1f8>
    3750:	84 2b       	or	r24, r20
    3752:	8c 93       	st	X, r24
    3754:	05 c0       	rjmp	.+10     	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <DIO_u8SetPinValue+0x210>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3760:	89 81       	ldd	r24, Y+1	; 0x01
}
    3762:	28 96       	adiw	r28, 0x08	; 8
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	00 d0       	rcall	.+0      	; 0x377a <DIO_u8SetPortValue+0x6>
    377a:	00 d0       	rcall	.+0      	; 0x377c <DIO_u8SetPortValue+0x8>
    377c:	0f 92       	push	r0
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	8a 83       	std	Y+2, r24	; 0x02
    3784:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    3786:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	3d 83       	std	Y+5, r19	; 0x05
    3790:	2c 83       	std	Y+4, r18	; 0x04
    3792:	8c 81       	ldd	r24, Y+4	; 0x04
    3794:	9d 81       	ldd	r25, Y+5	; 0x05
    3796:	82 30       	cpi	r24, 0x02	; 2
    3798:	91 05       	cpc	r25, r1
    379a:	d9 f0       	breq	.+54     	; 0x37d2 <DIO_u8SetPortValue+0x5e>
    379c:	2c 81       	ldd	r18, Y+4	; 0x04
    379e:	3d 81       	ldd	r19, Y+5	; 0x05
    37a0:	23 30       	cpi	r18, 0x03	; 3
    37a2:	31 05       	cpc	r19, r1
    37a4:	34 f4       	brge	.+12     	; 0x37b2 <DIO_u8SetPortValue+0x3e>
    37a6:	8c 81       	ldd	r24, Y+4	; 0x04
    37a8:	9d 81       	ldd	r25, Y+5	; 0x05
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	91 05       	cpc	r25, r1
    37ae:	61 f0       	breq	.+24     	; 0x37c8 <DIO_u8SetPortValue+0x54>
    37b0:	1f c0       	rjmp	.+62     	; 0x37f0 <DIO_u8SetPortValue+0x7c>
    37b2:	2c 81       	ldd	r18, Y+4	; 0x04
    37b4:	3d 81       	ldd	r19, Y+5	; 0x05
    37b6:	23 30       	cpi	r18, 0x03	; 3
    37b8:	31 05       	cpc	r19, r1
    37ba:	81 f0       	breq	.+32     	; 0x37dc <DIO_u8SetPortValue+0x68>
    37bc:	8c 81       	ldd	r24, Y+4	; 0x04
    37be:	9d 81       	ldd	r25, Y+5	; 0x05
    37c0:	84 30       	cpi	r24, 0x04	; 4
    37c2:	91 05       	cpc	r25, r1
    37c4:	81 f0       	breq	.+32     	; 0x37e6 <DIO_u8SetPortValue+0x72>
    37c6:	14 c0       	rjmp	.+40     	; 0x37f0 <DIO_u8SetPortValue+0x7c>
	{
	case PORT_A :
		PORTA = Copy_u8Value;
    37c8:	eb e3       	ldi	r30, 0x3B	; 59
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	8b 81       	ldd	r24, Y+3	; 0x03
    37ce:	80 83       	st	Z, r24
    37d0:	11 c0       	rjmp	.+34     	; 0x37f4 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_B :
		PORTB = Copy_u8Value ;
    37d2:	e8 e3       	ldi	r30, 0x38	; 56
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	8b 81       	ldd	r24, Y+3	; 0x03
    37d8:	80 83       	st	Z, r24
    37da:	0c c0       	rjmp	.+24     	; 0x37f4 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_C :
		PORTC = Copy_u8Value ;
    37dc:	e5 e3       	ldi	r30, 0x35	; 53
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	80 83       	st	Z, r24
    37e4:	07 c0       	rjmp	.+14     	; 0x37f4 <DIO_u8SetPortValue+0x80>
		break;

	case PORT_D :
		PORTD = Copy_u8Value ;
    37e6:	e2 e3       	ldi	r30, 0x32	; 50
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	8b 81       	ldd	r24, Y+3	; 0x03
    37ec:	80 83       	st	Z, r24
    37ee:	02 c0       	rjmp	.+4      	; 0x37f4 <DIO_u8SetPortValue+0x80>
		break;

	default :

		Local_u8ErrorState =1;
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0
    37fa:	0f 90       	pop	r0
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)
{
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	27 97       	sbiw	r28, 0x07	; 7
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	8a 83       	std	Y+2, r24	; 0x02
    381c:	6b 83       	std	Y+3, r22	; 0x03
    381e:	5d 83       	std	Y+5, r21	; 0x05
    3820:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    3822:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Value == NULL) || (Copy_u8Pin > 7))
    3824:	8c 81       	ldd	r24, Y+4	; 0x04
    3826:	9d 81       	ldd	r25, Y+5	; 0x05
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	19 f0       	breq	.+6      	; 0x3832 <DIO_u8GetPinValue+0x2c>
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	88 30       	cpi	r24, 0x08	; 8
    3830:	10 f0       	brcs	.+4      	; 0x3836 <DIO_u8GetPinValue+0x30>
		Local_u8ErrorState =1;
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Port)
    3836:	8a 81       	ldd	r24, Y+2	; 0x02
    3838:	28 2f       	mov	r18, r24
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	3f 83       	std	Y+7, r19	; 0x07
    383e:	2e 83       	std	Y+6, r18	; 0x06
    3840:	4e 81       	ldd	r20, Y+6	; 0x06
    3842:	5f 81       	ldd	r21, Y+7	; 0x07
    3844:	42 30       	cpi	r20, 0x02	; 2
    3846:	51 05       	cpc	r21, r1
    3848:	59 f1       	breq	.+86     	; 0x38a0 <DIO_u8GetPinValue+0x9a>
    384a:	8e 81       	ldd	r24, Y+6	; 0x06
    384c:	9f 81       	ldd	r25, Y+7	; 0x07
    384e:	83 30       	cpi	r24, 0x03	; 3
    3850:	91 05       	cpc	r25, r1
    3852:	34 f4       	brge	.+12     	; 0x3860 <DIO_u8GetPinValue+0x5a>
    3854:	2e 81       	ldd	r18, Y+6	; 0x06
    3856:	3f 81       	ldd	r19, Y+7	; 0x07
    3858:	21 30       	cpi	r18, 0x01	; 1
    385a:	31 05       	cpc	r19, r1
    385c:	69 f0       	breq	.+26     	; 0x3878 <DIO_u8GetPinValue+0x72>
    385e:	5c c0       	rjmp	.+184    	; 0x3918 <DIO_u8GetPinValue+0x112>
    3860:	4e 81       	ldd	r20, Y+6	; 0x06
    3862:	5f 81       	ldd	r21, Y+7	; 0x07
    3864:	43 30       	cpi	r20, 0x03	; 3
    3866:	51 05       	cpc	r21, r1
    3868:	79 f1       	breq	.+94     	; 0x38c8 <DIO_u8GetPinValue+0xc2>
    386a:	8e 81       	ldd	r24, Y+6	; 0x06
    386c:	9f 81       	ldd	r25, Y+7	; 0x07
    386e:	84 30       	cpi	r24, 0x04	; 4
    3870:	91 05       	cpc	r25, r1
    3872:	09 f4       	brne	.+2      	; 0x3876 <DIO_u8GetPinValue+0x70>
    3874:	3d c0       	rjmp	.+122    	; 0x38f0 <DIO_u8GetPinValue+0xea>
    3876:	50 c0       	rjmp	.+160    	; 0x3918 <DIO_u8GetPinValue+0x112>
	{
	case PORT_A :
		*Copy_u8Value = GET_BIT(PINA,Copy_u8Pin);
    3878:	e9 e3       	ldi	r30, 0x39	; 57
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	28 2f       	mov	r18, r24
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	8b 81       	ldd	r24, Y+3	; 0x03
    3884:	88 2f       	mov	r24, r24
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	a9 01       	movw	r20, r18
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <DIO_u8GetPinValue+0x8a>
    388c:	55 95       	asr	r21
    388e:	47 95       	ror	r20
    3890:	8a 95       	dec	r24
    3892:	e2 f7       	brpl	.-8      	; 0x388c <DIO_u8GetPinValue+0x86>
    3894:	ca 01       	movw	r24, r20
    3896:	81 70       	andi	r24, 0x01	; 1
    3898:	ec 81       	ldd	r30, Y+4	; 0x04
    389a:	fd 81       	ldd	r31, Y+5	; 0x05
    389c:	80 83       	st	Z, r24
    389e:	3e c0       	rjmp	.+124    	; 0x391c <DIO_u8GetPinValue+0x116>
		break;
	case PORT_B :
		*Copy_u8Value = GET_BIT(PINB,Copy_u8Pin);
    38a0:	e6 e3       	ldi	r30, 0x36	; 54
    38a2:	f0 e0       	ldi	r31, 0x00	; 0
    38a4:	80 81       	ld	r24, Z
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	8b 81       	ldd	r24, Y+3	; 0x03
    38ac:	88 2f       	mov	r24, r24
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	a9 01       	movw	r20, r18
    38b2:	02 c0       	rjmp	.+4      	; 0x38b8 <DIO_u8GetPinValue+0xb2>
    38b4:	55 95       	asr	r21
    38b6:	47 95       	ror	r20
    38b8:	8a 95       	dec	r24
    38ba:	e2 f7       	brpl	.-8      	; 0x38b4 <DIO_u8GetPinValue+0xae>
    38bc:	ca 01       	movw	r24, r20
    38be:	81 70       	andi	r24, 0x01	; 1
    38c0:	ec 81       	ldd	r30, Y+4	; 0x04
    38c2:	fd 81       	ldd	r31, Y+5	; 0x05
    38c4:	80 83       	st	Z, r24
    38c6:	2a c0       	rjmp	.+84     	; 0x391c <DIO_u8GetPinValue+0x116>
		break;
	case PORT_C :
		*Copy_u8Value = GET_BIT(PINC,Copy_u8Pin);
    38c8:	e3 e3       	ldi	r30, 0x33	; 51
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	28 2f       	mov	r18, r24
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	88 2f       	mov	r24, r24
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	a9 01       	movw	r20, r18
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <DIO_u8GetPinValue+0xda>
    38dc:	55 95       	asr	r21
    38de:	47 95       	ror	r20
    38e0:	8a 95       	dec	r24
    38e2:	e2 f7       	brpl	.-8      	; 0x38dc <DIO_u8GetPinValue+0xd6>
    38e4:	ca 01       	movw	r24, r20
    38e6:	81 70       	andi	r24, 0x01	; 1
    38e8:	ec 81       	ldd	r30, Y+4	; 0x04
    38ea:	fd 81       	ldd	r31, Y+5	; 0x05
    38ec:	80 83       	st	Z, r24
    38ee:	16 c0       	rjmp	.+44     	; 0x391c <DIO_u8GetPinValue+0x116>
		break;
	case PORT_D :
		*Copy_u8Value = GET_BIT(PIND,Copy_u8Pin);
    38f0:	e0 e3       	ldi	r30, 0x30	; 48
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	80 81       	ld	r24, Z
    38f6:	28 2f       	mov	r18, r24
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	8b 81       	ldd	r24, Y+3	; 0x03
    38fc:	88 2f       	mov	r24, r24
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	a9 01       	movw	r20, r18
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <DIO_u8GetPinValue+0x102>
    3904:	55 95       	asr	r21
    3906:	47 95       	ror	r20
    3908:	8a 95       	dec	r24
    390a:	e2 f7       	brpl	.-8      	; 0x3904 <DIO_u8GetPinValue+0xfe>
    390c:	ca 01       	movw	r24, r20
    390e:	81 70       	andi	r24, 0x01	; 1
    3910:	ec 81       	ldd	r30, Y+4	; 0x04
    3912:	fd 81       	ldd	r31, Y+5	; 0x05
    3914:	80 83       	st	Z, r24
    3916:	02 c0       	rjmp	.+4      	; 0x391c <DIO_u8GetPinValue+0x116>
		break;
	default:
		Local_u8ErrorState =1;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    391c:	89 81       	ldd	r24, Y+1	; 0x01
}
    391e:	27 96       	adiw	r28, 0x07	; 7
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	cf 91       	pop	r28
    392c:	df 91       	pop	r29
    392e:	08 95       	ret

00003930 <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8* Copy_u8Value)
{
    3930:	df 93       	push	r29
    3932:	cf 93       	push	r28
    3934:	00 d0       	rcall	.+0      	; 0x3936 <DIO_u8GetPortValue+0x6>
    3936:	00 d0       	rcall	.+0      	; 0x3938 <DIO_u8GetPortValue+0x8>
    3938:	00 d0       	rcall	.+0      	; 0x393a <DIO_u8GetPortValue+0xa>
    393a:	cd b7       	in	r28, 0x3d	; 61
    393c:	de b7       	in	r29, 0x3e	; 62
    393e:	8a 83       	std	Y+2, r24	; 0x02
    3940:	7c 83       	std	Y+4, r23	; 0x04
    3942:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    3944:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	28 2f       	mov	r18, r24
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	3e 83       	std	Y+6, r19	; 0x06
    394e:	2d 83       	std	Y+5, r18	; 0x05
    3950:	8d 81       	ldd	r24, Y+5	; 0x05
    3952:	9e 81       	ldd	r25, Y+6	; 0x06
    3954:	82 30       	cpi	r24, 0x02	; 2
    3956:	91 05       	cpc	r25, r1
    3958:	e9 f0       	breq	.+58     	; 0x3994 <DIO_u8GetPortValue+0x64>
    395a:	2d 81       	ldd	r18, Y+5	; 0x05
    395c:	3e 81       	ldd	r19, Y+6	; 0x06
    395e:	23 30       	cpi	r18, 0x03	; 3
    3960:	31 05       	cpc	r19, r1
    3962:	34 f4       	brge	.+12     	; 0x3970 <DIO_u8GetPortValue+0x40>
    3964:	8d 81       	ldd	r24, Y+5	; 0x05
    3966:	9e 81       	ldd	r25, Y+6	; 0x06
    3968:	81 30       	cpi	r24, 0x01	; 1
    396a:	91 05       	cpc	r25, r1
    396c:	61 f0       	breq	.+24     	; 0x3986 <DIO_u8GetPortValue+0x56>
    396e:	27 c0       	rjmp	.+78     	; 0x39be <DIO_u8GetPortValue+0x8e>
    3970:	2d 81       	ldd	r18, Y+5	; 0x05
    3972:	3e 81       	ldd	r19, Y+6	; 0x06
    3974:	23 30       	cpi	r18, 0x03	; 3
    3976:	31 05       	cpc	r19, r1
    3978:	a1 f0       	breq	.+40     	; 0x39a2 <DIO_u8GetPortValue+0x72>
    397a:	8d 81       	ldd	r24, Y+5	; 0x05
    397c:	9e 81       	ldd	r25, Y+6	; 0x06
    397e:	84 30       	cpi	r24, 0x04	; 4
    3980:	91 05       	cpc	r25, r1
    3982:	b1 f0       	breq	.+44     	; 0x39b0 <DIO_u8GetPortValue+0x80>
    3984:	1c c0       	rjmp	.+56     	; 0x39be <DIO_u8GetPortValue+0x8e>
	{
	case PORT_A :
		*Copy_u8Value = PINA ;
    3986:	e9 e3       	ldi	r30, 0x39	; 57
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	eb 81       	ldd	r30, Y+3	; 0x03
    398e:	fc 81       	ldd	r31, Y+4	; 0x04
    3990:	80 83       	st	Z, r24
    3992:	17 c0       	rjmp	.+46     	; 0x39c2 <DIO_u8GetPortValue+0x92>
		break;
	case PORT_B :
		*Copy_u8Value = PINB ;
    3994:	e6 e3       	ldi	r30, 0x36	; 54
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	eb 81       	ldd	r30, Y+3	; 0x03
    399c:	fc 81       	ldd	r31, Y+4	; 0x04
    399e:	80 83       	st	Z, r24
    39a0:	10 c0       	rjmp	.+32     	; 0x39c2 <DIO_u8GetPortValue+0x92>
		break;
	case PORT_C :
		*Copy_u8Value = PINC ;
    39a2:	e3 e3       	ldi	r30, 0x33	; 51
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	80 81       	ld	r24, Z
    39a8:	eb 81       	ldd	r30, Y+3	; 0x03
    39aa:	fc 81       	ldd	r31, Y+4	; 0x04
    39ac:	80 83       	st	Z, r24
    39ae:	09 c0       	rjmp	.+18     	; 0x39c2 <DIO_u8GetPortValue+0x92>
		break;
	case PORT_D :
		*Copy_u8Value = PIND ;
    39b0:	e0 e3       	ldi	r30, 0x30	; 48
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	eb 81       	ldd	r30, Y+3	; 0x03
    39b8:	fc 81       	ldd	r31, Y+4	; 0x04
    39ba:	80 83       	st	Z, r24
    39bc:	02 c0       	rjmp	.+4      	; 0x39c2 <DIO_u8GetPortValue+0x92>
		break;
	default :
		Local_u8ErrorState =1;
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState ;
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    39c4:	26 96       	adiw	r28, 0x06	; 6
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	08 95       	ret

000039d6 <Map>:

f32 Map(s32 InputValue,s32 InputMin,s32 InputMax,s32 OutMin,s32 OutMax)
{
    39d6:	af 92       	push	r10
    39d8:	bf 92       	push	r11
    39da:	cf 92       	push	r12
    39dc:	df 92       	push	r13
    39de:	ef 92       	push	r14
    39e0:	ff 92       	push	r15
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	df 93       	push	r29
    39e8:	cf 93       	push	r28
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62
    39ee:	68 97       	sbiw	r28, 0x18	; 24
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	69 87       	std	Y+9, r22	; 0x09
    39fc:	7a 87       	std	Y+10, r23	; 0x0a
    39fe:	8b 87       	std	Y+11, r24	; 0x0b
    3a00:	9c 87       	std	Y+12, r25	; 0x0c
    3a02:	2d 87       	std	Y+13, r18	; 0x0d
    3a04:	3e 87       	std	Y+14, r19	; 0x0e
    3a06:	4f 87       	std	Y+15, r20	; 0x0f
    3a08:	58 8b       	std	Y+16, r21	; 0x10
    3a0a:	e9 8a       	std	Y+17, r14	; 0x11
    3a0c:	fa 8a       	std	Y+18, r15	; 0x12
    3a0e:	0b 8b       	std	Y+19, r16	; 0x13
    3a10:	1c 8b       	std	Y+20, r17	; 0x14
    3a12:	ad 8a       	std	Y+21, r10	; 0x15
    3a14:	be 8a       	std	Y+22, r11	; 0x16
    3a16:	cf 8a       	std	Y+23, r12	; 0x17
    3a18:	d8 8e       	std	Y+24, r13	; 0x18
	f32 Result =(((OutMax-OutMin)*(InputValue-InputMin))/(InputMax-InputMin));
    3a1a:	2d a1       	ldd	r18, Y+37	; 0x25
    3a1c:	3e a1       	ldd	r19, Y+38	; 0x26
    3a1e:	4f a1       	ldd	r20, Y+39	; 0x27
    3a20:	58 a5       	ldd	r21, Y+40	; 0x28
    3a22:	8d 89       	ldd	r24, Y+21	; 0x15
    3a24:	9e 89       	ldd	r25, Y+22	; 0x16
    3a26:	af 89       	ldd	r26, Y+23	; 0x17
    3a28:	b8 8d       	ldd	r27, Y+24	; 0x18
    3a2a:	79 01       	movw	r14, r18
    3a2c:	8a 01       	movw	r16, r20
    3a2e:	e8 1a       	sub	r14, r24
    3a30:	f9 0a       	sbc	r15, r25
    3a32:	0a 0b       	sbc	r16, r26
    3a34:	1b 0b       	sbc	r17, r27
    3a36:	29 85       	ldd	r18, Y+9	; 0x09
    3a38:	3a 85       	ldd	r19, Y+10	; 0x0a
    3a3a:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a3c:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a42:	af 85       	ldd	r26, Y+15	; 0x0f
    3a44:	b8 89       	ldd	r27, Y+16	; 0x10
    3a46:	28 1b       	sub	r18, r24
    3a48:	39 0b       	sbc	r19, r25
    3a4a:	4a 0b       	sbc	r20, r26
    3a4c:	5b 0b       	sbc	r21, r27
    3a4e:	c8 01       	movw	r24, r16
    3a50:	b7 01       	movw	r22, r14
    3a52:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <__mulsi3>
    3a56:	7b 01       	movw	r14, r22
    3a58:	8c 01       	movw	r16, r24
    3a5a:	29 89       	ldd	r18, Y+17	; 0x11
    3a5c:	3a 89       	ldd	r19, Y+18	; 0x12
    3a5e:	4b 89       	ldd	r20, Y+19	; 0x13
    3a60:	5c 89       	ldd	r21, Y+20	; 0x14
    3a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a66:	af 85       	ldd	r26, Y+15	; 0x0f
    3a68:	b8 89       	ldd	r27, Y+16	; 0x10
    3a6a:	28 1b       	sub	r18, r24
    3a6c:	39 0b       	sbc	r19, r25
    3a6e:	4a 0b       	sbc	r20, r26
    3a70:	5b 0b       	sbc	r21, r27
    3a72:	c8 01       	movw	r24, r16
    3a74:	b7 01       	movw	r22, r14
    3a76:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__divmodsi4>
    3a7a:	da 01       	movw	r26, r20
    3a7c:	c9 01       	movw	r24, r18
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	8d 83       	std	Y+5, r24	; 0x05
    3a8c:	9e 83       	std	Y+6, r25	; 0x06
    3a8e:	af 83       	std	Y+7, r26	; 0x07
    3a90:	b8 87       	std	Y+8, r27	; 0x08
	f32 OutValue =Result+OutMin;
    3a92:	6d 89       	ldd	r22, Y+21	; 0x15
    3a94:	7e 89       	ldd	r23, Y+22	; 0x16
    3a96:	8f 89       	ldd	r24, Y+23	; 0x17
    3a98:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9a:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	2d 81       	ldd	r18, Y+5	; 0x05
    3aa8:	3e 81       	ldd	r19, Y+6	; 0x06
    3aaa:	4f 81       	ldd	r20, Y+7	; 0x07
    3aac:	58 85       	ldd	r21, Y+8	; 0x08
    3aae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	89 83       	std	Y+1, r24	; 0x01
    3ab8:	9a 83       	std	Y+2, r25	; 0x02
    3aba:	ab 83       	std	Y+3, r26	; 0x03
    3abc:	bc 83       	std	Y+4, r27	; 0x04
	return OutValue ;
    3abe:	89 81       	ldd	r24, Y+1	; 0x01
    3ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ac4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	cd 01       	movw	r24, r26
    3aca:	68 96       	adiw	r28, 0x18	; 24
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	cd bf       	out	0x3d, r28	; 61
    3ad6:	cf 91       	pop	r28
    3ad8:	df 91       	pop	r29
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	ff 90       	pop	r15
    3ae0:	ef 90       	pop	r14
    3ae2:	df 90       	pop	r13
    3ae4:	cf 90       	pop	r12
    3ae6:	bf 90       	pop	r11
    3ae8:	af 90       	pop	r10
    3aea:	08 95       	ret

00003aec <main>:
#include "COTS/1-MCAL/8-SPI/SPI_interface.h"
#include "COTS/1-MCAL/6-PORT/PORT_interface.h"
#include <util/delay.h>

void main (void)
{
    3aec:	df 93       	push	r29
    3aee:	cf 93       	push	r28
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	2e 97       	sbiw	r28, 0x0e	; 14
    3af6:	0f b6       	in	r0, 0x3f	; 63
    3af8:	f8 94       	cli
    3afa:	de bf       	out	0x3e, r29	; 62
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    3b00:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <PORT_voidInit>
	SPI_voidMasterInit();
    3b04:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <SPI_voidMasterInit>
	while(1)
	{
		SPI_u8TransCeive(10);
    3b08:	8a e0       	ldi	r24, 0x0A	; 10
    3b0a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <SPI_u8TransCeive>
    3b0e:	80 e0       	ldi	r24, 0x00	; 0
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	a0 e2       	ldi	r26, 0x20	; 32
    3b14:	b1 e4       	ldi	r27, 0x41	; 65
    3b16:	8b 87       	std	Y+11, r24	; 0x0b
    3b18:	9c 87       	std	Y+12, r25	; 0x0c
    3b1a:	ad 87       	std	Y+13, r26	; 0x0d
    3b1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	4a ef       	ldi	r20, 0xFA	; 250
    3b2c:	54 e4       	ldi	r21, 0x44	; 68
    3b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	8f 83       	std	Y+7, r24	; 0x07
    3b38:	98 87       	std	Y+8, r25	; 0x08
    3b3a:	a9 87       	std	Y+9, r26	; 0x09
    3b3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b40:	78 85       	ldd	r23, Y+8	; 0x08
    3b42:	89 85       	ldd	r24, Y+9	; 0x09
    3b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e8       	ldi	r20, 0x80	; 128
    3b4c:	5f e3       	ldi	r21, 0x3F	; 63
    3b4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b52:	88 23       	and	r24, r24
    3b54:	2c f4       	brge	.+10     	; 0x3b60 <main+0x74>
		__ticks = 1;
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	9e 83       	std	Y+6, r25	; 0x06
    3b5c:	8d 83       	std	Y+5, r24	; 0x05
    3b5e:	3f c0       	rjmp	.+126    	; 0x3bde <main+0xf2>
	else if (__tmp > 65535)
    3b60:	6f 81       	ldd	r22, Y+7	; 0x07
    3b62:	78 85       	ldd	r23, Y+8	; 0x08
    3b64:	89 85       	ldd	r24, Y+9	; 0x09
    3b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	3f ef       	ldi	r19, 0xFF	; 255
    3b6c:	4f e7       	ldi	r20, 0x7F	; 127
    3b6e:	57 e4       	ldi	r21, 0x47	; 71
    3b70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b74:	18 16       	cp	r1, r24
    3b76:	4c f5       	brge	.+82     	; 0x3bca <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	40 e2       	ldi	r20, 0x20	; 32
    3b86:	51 e4       	ldi	r21, 0x41	; 65
    3b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	bc 01       	movw	r22, r24
    3b92:	cd 01       	movw	r24, r26
    3b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	9e 83       	std	Y+6, r25	; 0x06
    3b9e:	8d 83       	std	Y+5, r24	; 0x05
    3ba0:	0f c0       	rjmp	.+30     	; 0x3bc0 <main+0xd4>
    3ba2:	88 ec       	ldi	r24, 0xC8	; 200
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	9c 83       	std	Y+4, r25	; 0x04
    3ba8:	8b 83       	std	Y+3, r24	; 0x03
    3baa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bac:	9c 81       	ldd	r25, Y+4	; 0x04
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <main+0xc2>
    3bb2:	9c 83       	std	Y+4, r25	; 0x04
    3bb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bba:	01 97       	sbiw	r24, 0x01	; 1
    3bbc:	9e 83       	std	Y+6, r25	; 0x06
    3bbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc4:	00 97       	sbiw	r24, 0x00	; 0
    3bc6:	69 f7       	brne	.-38     	; 0x3ba2 <main+0xb6>
    3bc8:	9f cf       	rjmp	.-194    	; 0x3b08 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bca:	6f 81       	ldd	r22, Y+7	; 0x07
    3bcc:	78 85       	ldd	r23, Y+8	; 0x08
    3bce:	89 85       	ldd	r24, Y+9	; 0x09
    3bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	9e 83       	std	Y+6, r25	; 0x06
    3bdc:	8d 83       	std	Y+5, r24	; 0x05
    3bde:	8d 81       	ldd	r24, Y+5	; 0x05
    3be0:	9e 81       	ldd	r25, Y+6	; 0x06
    3be2:	9a 83       	std	Y+2, r25	; 0x02
    3be4:	89 83       	std	Y+1, r24	; 0x01
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
    3be8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bea:	01 97       	sbiw	r24, 0x01	; 1
    3bec:	f1 f7       	brne	.-4      	; 0x3bea <main+0xfe>
    3bee:	9a 83       	std	Y+2, r25	; 0x02
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	8a cf       	rjmp	.-236    	; 0x3b08 <main+0x1c>

00003bf4 <__mulsi3>:
    3bf4:	62 9f       	mul	r22, r18
    3bf6:	d0 01       	movw	r26, r0
    3bf8:	73 9f       	mul	r23, r19
    3bfa:	f0 01       	movw	r30, r0
    3bfc:	82 9f       	mul	r24, r18
    3bfe:	e0 0d       	add	r30, r0
    3c00:	f1 1d       	adc	r31, r1
    3c02:	64 9f       	mul	r22, r20
    3c04:	e0 0d       	add	r30, r0
    3c06:	f1 1d       	adc	r31, r1
    3c08:	92 9f       	mul	r25, r18
    3c0a:	f0 0d       	add	r31, r0
    3c0c:	83 9f       	mul	r24, r19
    3c0e:	f0 0d       	add	r31, r0
    3c10:	74 9f       	mul	r23, r20
    3c12:	f0 0d       	add	r31, r0
    3c14:	65 9f       	mul	r22, r21
    3c16:	f0 0d       	add	r31, r0
    3c18:	99 27       	eor	r25, r25
    3c1a:	72 9f       	mul	r23, r18
    3c1c:	b0 0d       	add	r27, r0
    3c1e:	e1 1d       	adc	r30, r1
    3c20:	f9 1f       	adc	r31, r25
    3c22:	63 9f       	mul	r22, r19
    3c24:	b0 0d       	add	r27, r0
    3c26:	e1 1d       	adc	r30, r1
    3c28:	f9 1f       	adc	r31, r25
    3c2a:	bd 01       	movw	r22, r26
    3c2c:	cf 01       	movw	r24, r30
    3c2e:	11 24       	eor	r1, r1
    3c30:	08 95       	ret

00003c32 <__udivmodsi4>:
    3c32:	a1 e2       	ldi	r26, 0x21	; 33
    3c34:	1a 2e       	mov	r1, r26
    3c36:	aa 1b       	sub	r26, r26
    3c38:	bb 1b       	sub	r27, r27
    3c3a:	fd 01       	movw	r30, r26
    3c3c:	0d c0       	rjmp	.+26     	; 0x3c58 <__udivmodsi4_ep>

00003c3e <__udivmodsi4_loop>:
    3c3e:	aa 1f       	adc	r26, r26
    3c40:	bb 1f       	adc	r27, r27
    3c42:	ee 1f       	adc	r30, r30
    3c44:	ff 1f       	adc	r31, r31
    3c46:	a2 17       	cp	r26, r18
    3c48:	b3 07       	cpc	r27, r19
    3c4a:	e4 07       	cpc	r30, r20
    3c4c:	f5 07       	cpc	r31, r21
    3c4e:	20 f0       	brcs	.+8      	; 0x3c58 <__udivmodsi4_ep>
    3c50:	a2 1b       	sub	r26, r18
    3c52:	b3 0b       	sbc	r27, r19
    3c54:	e4 0b       	sbc	r30, r20
    3c56:	f5 0b       	sbc	r31, r21

00003c58 <__udivmodsi4_ep>:
    3c58:	66 1f       	adc	r22, r22
    3c5a:	77 1f       	adc	r23, r23
    3c5c:	88 1f       	adc	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	1a 94       	dec	r1
    3c62:	69 f7       	brne	.-38     	; 0x3c3e <__udivmodsi4_loop>
    3c64:	60 95       	com	r22
    3c66:	70 95       	com	r23
    3c68:	80 95       	com	r24
    3c6a:	90 95       	com	r25
    3c6c:	9b 01       	movw	r18, r22
    3c6e:	ac 01       	movw	r20, r24
    3c70:	bd 01       	movw	r22, r26
    3c72:	cf 01       	movw	r24, r30
    3c74:	08 95       	ret

00003c76 <__divmodsi4>:
    3c76:	97 fb       	bst	r25, 7
    3c78:	09 2e       	mov	r0, r25
    3c7a:	05 26       	eor	r0, r21
    3c7c:	0e d0       	rcall	.+28     	; 0x3c9a <__divmodsi4_neg1>
    3c7e:	57 fd       	sbrc	r21, 7
    3c80:	04 d0       	rcall	.+8      	; 0x3c8a <__divmodsi4_neg2>
    3c82:	d7 df       	rcall	.-82     	; 0x3c32 <__udivmodsi4>
    3c84:	0a d0       	rcall	.+20     	; 0x3c9a <__divmodsi4_neg1>
    3c86:	00 1c       	adc	r0, r0
    3c88:	38 f4       	brcc	.+14     	; 0x3c98 <__divmodsi4_exit>

00003c8a <__divmodsi4_neg2>:
    3c8a:	50 95       	com	r21
    3c8c:	40 95       	com	r20
    3c8e:	30 95       	com	r19
    3c90:	21 95       	neg	r18
    3c92:	3f 4f       	sbci	r19, 0xFF	; 255
    3c94:	4f 4f       	sbci	r20, 0xFF	; 255
    3c96:	5f 4f       	sbci	r21, 0xFF	; 255

00003c98 <__divmodsi4_exit>:
    3c98:	08 95       	ret

00003c9a <__divmodsi4_neg1>:
    3c9a:	f6 f7       	brtc	.-4      	; 0x3c98 <__divmodsi4_exit>
    3c9c:	90 95       	com	r25
    3c9e:	80 95       	com	r24
    3ca0:	70 95       	com	r23
    3ca2:	61 95       	neg	r22
    3ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    3caa:	08 95       	ret

00003cac <__prologue_saves__>:
    3cac:	2f 92       	push	r2
    3cae:	3f 92       	push	r3
    3cb0:	4f 92       	push	r4
    3cb2:	5f 92       	push	r5
    3cb4:	6f 92       	push	r6
    3cb6:	7f 92       	push	r7
    3cb8:	8f 92       	push	r8
    3cba:	9f 92       	push	r9
    3cbc:	af 92       	push	r10
    3cbe:	bf 92       	push	r11
    3cc0:	cf 92       	push	r12
    3cc2:	df 92       	push	r13
    3cc4:	ef 92       	push	r14
    3cc6:	ff 92       	push	r15
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	ca 1b       	sub	r28, r26
    3cd6:	db 0b       	sbc	r29, r27
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	09 94       	ijmp

00003ce4 <__epilogue_restores__>:
    3ce4:	2a 88       	ldd	r2, Y+18	; 0x12
    3ce6:	39 88       	ldd	r3, Y+17	; 0x11
    3ce8:	48 88       	ldd	r4, Y+16	; 0x10
    3cea:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cec:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cee:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cf0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cf2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cf4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cf6:	b9 84       	ldd	r11, Y+9	; 0x09
    3cf8:	c8 84       	ldd	r12, Y+8	; 0x08
    3cfa:	df 80       	ldd	r13, Y+7	; 0x07
    3cfc:	ee 80       	ldd	r14, Y+6	; 0x06
    3cfe:	fd 80       	ldd	r15, Y+5	; 0x05
    3d00:	0c 81       	ldd	r16, Y+4	; 0x04
    3d02:	1b 81       	ldd	r17, Y+3	; 0x03
    3d04:	aa 81       	ldd	r26, Y+2	; 0x02
    3d06:	b9 81       	ldd	r27, Y+1	; 0x01
    3d08:	ce 0f       	add	r28, r30
    3d0a:	d1 1d       	adc	r29, r1
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	ed 01       	movw	r28, r26
    3d18:	08 95       	ret

00003d1a <_exit>:
    3d1a:	f8 94       	cli

00003d1c <__stop_program>:
    3d1c:	ff cf       	rjmp	.-2      	; 0x3d1c <__stop_program>
