
Gas_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000025dc  00002670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080016a  0080016a  0000277a  2**0
                  ALLOC
  3 .stab         00001d34  00000000  00000000  0000277c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa9  00000000  00000000  000044b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005459  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000055d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  000057aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  000077ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000891b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009920  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00009ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  00009d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a68c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_10>
      2c:	0c 94 54 0c 	jmp	0x18a8	; 0x18a8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 11 	call	0x2272	; 0x2272 <main>
      8a:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 be 12 	jmp	0x257c	; 0x257c <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <PORT_voidInit>:
/*********************************************************************************/
/*********************************************************************************/
#include "Port_interface.h"

void PORT_voidInit(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR ;
     ca8:	ea e3       	ldi	r30, 0x3A	; 58
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	80 83       	st	Z, r24
	DDRB = PORTB_DIR ;
     cb0:	e7 e3       	ldi	r30, 0x37	; 55
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	10 82       	st	Z, r1
	DDRC = PORTC_DIR ;
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	10 82       	st	Z, r1
	DDRD = PORTD_DIR ;
     cbc:	e1 e3       	ldi	r30, 0x31	; 49
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1

	PORTA = PORTA_INT;
     cc2:	eb e3       	ldi	r30, 0x3B	; 59
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
	PORTB = PORTB_INT;
     cc8:	e8 e3       	ldi	r30, 0x38	; 56
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
	PORTC = PORTC_INT;
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	10 82       	st	Z, r1
	PORTD = PORTD_INT;
     cd4:	e2 e3       	ldi	r30, 0x32	; 50
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	10 82       	st	Z, r1
}
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <DELAY_NonBlockHelper>:
static u8 Init_F=NOT_INITIALIZED;
static u16 Copy_u8Time=0;
static u8 Period=0;

void DELAY_NonBlockHelper(void)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
	static u16 counter_ms=0;
	static u8 counter_us=0;
	counter_us++;
     ce8:	80 91 74 01 	lds	r24, 0x0174
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	80 93 74 01 	sts	0x0174, r24
	if(Period==PERIODIC)
     cf2:	80 91 73 01 	lds	r24, 0x0173
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	21 f5       	brne	.+72     	; 0xd42 <DELAY_NonBlockHelper+0x62>
	{
		if(counter_us==4)
     cfa:	80 91 74 01 	lds	r24, 0x0174
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	59 f4       	brne	.+22     	; 0xd18 <DELAY_NonBlockHelper+0x38>
		{
			counter_ms++;
     d02:	80 91 75 01 	lds	r24, 0x0175
     d06:	90 91 76 01 	lds	r25, 0x0176
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	90 93 76 01 	sts	0x0176, r25
     d10:	80 93 75 01 	sts	0x0175, r24
			counter_us=0;
     d14:	10 92 74 01 	sts	0x0174, r1
		}
		if(counter_ms==Copy_u8Time)
     d18:	20 91 75 01 	lds	r18, 0x0175
     d1c:	30 91 76 01 	lds	r19, 0x0176
     d20:	80 91 71 01 	lds	r24, 0x0171
     d24:	90 91 72 01 	lds	r25, 0x0172
     d28:	28 17       	cp	r18, r24
     d2a:	39 07       	cpc	r19, r25
     d2c:	a1 f5       	brne	.+104    	; 0xd96 <DELAY_NonBlockHelper+0xb6>
		{
			TIMER0_COMPCallBack();
     d2e:	e0 91 6a 01 	lds	r30, 0x016A
     d32:	f0 91 6b 01 	lds	r31, 0x016B
     d36:	09 95       	icall
			counter_ms=0;
     d38:	10 92 76 01 	sts	0x0176, r1
     d3c:	10 92 75 01 	sts	0x0175, r1
     d40:	2a c0       	rjmp	.+84     	; 0xd96 <DELAY_NonBlockHelper+0xb6>
		}
	}
	else if (Period==NON_PERIODIC)
     d42:	80 91 73 01 	lds	r24, 0x0173
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	31 f5       	brne	.+76     	; 0xd96 <DELAY_NonBlockHelper+0xb6>
	{
		if(counter_us==4)
     d4a:	80 91 74 01 	lds	r24, 0x0174
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	59 f4       	brne	.+22     	; 0xd68 <DELAY_NonBlockHelper+0x88>
		{
			counter_ms++;
     d52:	80 91 75 01 	lds	r24, 0x0175
     d56:	90 91 76 01 	lds	r25, 0x0176
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	90 93 76 01 	sts	0x0176, r25
     d60:	80 93 75 01 	sts	0x0175, r24
			counter_us=0;
     d64:	10 92 74 01 	sts	0x0174, r1
		}
		if(counter_ms==Copy_u8Time)
     d68:	20 91 75 01 	lds	r18, 0x0175
     d6c:	30 91 76 01 	lds	r19, 0x0176
     d70:	80 91 71 01 	lds	r24, 0x0171
     d74:	90 91 72 01 	lds	r25, 0x0172
     d78:	28 17       	cp	r18, r24
     d7a:	39 07       	cpc	r19, r25
     d7c:	61 f4       	brne	.+24     	; 0xd96 <DELAY_NonBlockHelper+0xb6>
		{
			TIMER0_COMPCallBack();
     d7e:	e0 91 6a 01 	lds	r30, 0x016A
     d82:	f0 91 6b 01 	lds	r31, 0x016B
     d86:	09 95       	icall
			counter_ms=0;
     d88:	10 92 76 01 	sts	0x0176, r1
     d8c:	10 92 75 01 	sts	0x0175, r1
			TIMER0_COMPIntE(DISABLE);
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	0e 94 3f 09 	call	0x127e	; 0x127e <TIMER0_COMPIntE>
		}
	}
}
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <TIMER0_voidINIT>:

void TIMER0_voidINIT(u8 Copy_u8Mode,u8 Copy_u8Prescaler)
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <TIMER0_voidINIT+0x6>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <TIMER0_voidINIT+0x8>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <TIMER0_voidINIT+0xa>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
	Mode=Copy_u8Mode;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	80 93 70 01 	sts	0x0170, r24
	/*Select TIMER0 Mode
	 * ->Normal
	 * ->PWM
	 * ->CTC
	 * ->Fast_PWM */
	switch(Copy_u8Mode)
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	3e 83       	std	Y+6, r19	; 0x06
     dbc:	2d 83       	std	Y+5, r18	; 0x05
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	91 05       	cpc	r25, r1
     dc6:	29 f1       	breq	.+74     	; 0xe12 <TIMER0_voidINIT+0x76>
     dc8:	2d 81       	ldd	r18, Y+5	; 0x05
     dca:	3e 81       	ldd	r19, Y+6	; 0x06
     dcc:	23 30       	cpi	r18, 0x03	; 3
     dce:	31 05       	cpc	r19, r1
     dd0:	34 f4       	brge	.+12     	; 0xdde <TIMER0_voidINIT+0x42>
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	9e 81       	ldd	r25, Y+6	; 0x06
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 05       	cpc	r25, r1
     dda:	61 f0       	breq	.+24     	; 0xdf4 <TIMER0_voidINIT+0x58>
     ddc:	46 c0       	rjmp	.+140    	; 0xe6a <TIMER0_voidINIT+0xce>
     dde:	2d 81       	ldd	r18, Y+5	; 0x05
     de0:	3e 81       	ldd	r19, Y+6	; 0x06
     de2:	23 30       	cpi	r18, 0x03	; 3
     de4:	31 05       	cpc	r19, r1
     de6:	21 f1       	breq	.+72     	; 0xe30 <TIMER0_voidINIT+0x94>
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	84 30       	cpi	r24, 0x04	; 4
     dee:	91 05       	cpc	r25, r1
     df0:	71 f1       	breq	.+92     	; 0xe4e <TIMER0_voidINIT+0xb2>
     df2:	3b c0       	rjmp	.+118    	; 0xe6a <TIMER0_voidINIT+0xce>
	{
	case NORMAL :
		CLR_BIT(TCCR0,TCCR0_WGM00);
     df4:	a3 e5       	ldi	r26, 0x53	; 83
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e3 e5       	ldi	r30, 0x53	; 83
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 7b       	andi	r24, 0xBF	; 191
     e00:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
     e02:	a3 e5       	ldi	r26, 0x53	; 83
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e3 e5       	ldi	r30, 0x53	; 83
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	87 7f       	andi	r24, 0xF7	; 247
     e0e:	8c 93       	st	X, r24
     e10:	2c c0       	rjmp	.+88     	; 0xe6a <TIMER0_voidINIT+0xce>
		break;
	case PWM :
		SET_BIT(TCCR0,TCCR0_WGM00);
     e12:	a3 e5       	ldi	r26, 0x53	; 83
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e3 e5       	ldi	r30, 0x53	; 83
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	80 64       	ori	r24, 0x40	; 64
     e1e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
     e20:	a3 e5       	ldi	r26, 0x53	; 83
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e3 e5       	ldi	r30, 0x53	; 83
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	87 7f       	andi	r24, 0xF7	; 247
     e2c:	8c 93       	st	X, r24
     e2e:	1d c0       	rjmp	.+58     	; 0xe6a <TIMER0_voidINIT+0xce>
		break;
	case CTC :
		CLR_BIT(TCCR0,TCCR0_WGM00);
     e30:	a3 e5       	ldi	r26, 0x53	; 83
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e3 e5       	ldi	r30, 0x53	; 83
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8f 7b       	andi	r24, 0xBF	; 191
     e3c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
     e3e:	a3 e5       	ldi	r26, 0x53	; 83
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e3 e5       	ldi	r30, 0x53	; 83
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 60       	ori	r24, 0x08	; 8
     e4a:	8c 93       	st	X, r24
     e4c:	0e c0       	rjmp	.+28     	; 0xe6a <TIMER0_voidINIT+0xce>
		break;
	case FAST_PWM :
		SET_BIT(TCCR0,TCCR0_WGM00);
     e4e:	a3 e5       	ldi	r26, 0x53	; 83
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e3 e5       	ldi	r30, 0x53	; 83
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
     e5c:	a3 e5       	ldi	r26, 0x53	; 83
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e3 e5       	ldi	r30, 0x53	; 83
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	88 60       	ori	r24, 0x08	; 8
     e68:	8c 93       	st	X, r24
	 * ->DIV_64
	 * ->DIV_256
	 * ->DIV_1024
	 * ->EXT_T0_FALLING
	 * ->EXT_T0_RISING*/
	switch(Copy_u8Prescaler)
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	3c 83       	std	Y+4, r19	; 0x04
     e72:	2b 83       	std	Y+3, r18	; 0x03
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	84 30       	cpi	r24, 0x04	; 4
     e7a:	91 05       	cpc	r25, r1
     e7c:	09 f4       	brne	.+2      	; 0xe80 <TIMER0_voidINIT+0xe4>
     e7e:	71 c0       	rjmp	.+226    	; 0xf62 <TIMER0_voidINIT+0x1c6>
     e80:	2b 81       	ldd	r18, Y+3	; 0x03
     e82:	3c 81       	ldd	r19, Y+4	; 0x04
     e84:	25 30       	cpi	r18, 0x05	; 5
     e86:	31 05       	cpc	r19, r1
     e88:	8c f4       	brge	.+34     	; 0xeac <TIMER0_voidINIT+0x110>
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	91 05       	cpc	r25, r1
     e92:	d9 f1       	breq	.+118    	; 0xf0a <TIMER0_voidINIT+0x16e>
     e94:	2b 81       	ldd	r18, Y+3	; 0x03
     e96:	3c 81       	ldd	r19, Y+4	; 0x04
     e98:	23 30       	cpi	r18, 0x03	; 3
     e9a:	31 05       	cpc	r19, r1
     e9c:	0c f0       	brlt	.+2      	; 0xea0 <TIMER0_voidINIT+0x104>
     e9e:	4b c0       	rjmp	.+150    	; 0xf36 <TIMER0_voidINIT+0x19a>
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	91 05       	cpc	r25, r1
     ea8:	d1 f0       	breq	.+52     	; 0xede <TIMER0_voidINIT+0x142>
     eaa:	c8 c0       	rjmp	.+400    	; 0x103c <TIMER0_voidINIT+0x2a0>
     eac:	2b 81       	ldd	r18, Y+3	; 0x03
     eae:	3c 81       	ldd	r19, Y+4	; 0x04
     eb0:	26 30       	cpi	r18, 0x06	; 6
     eb2:	31 05       	cpc	r19, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <TIMER0_voidINIT+0x11c>
     eb6:	81 c0       	rjmp	.+258    	; 0xfba <TIMER0_voidINIT+0x21e>
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	86 30       	cpi	r24, 0x06	; 6
     ebe:	91 05       	cpc	r25, r1
     ec0:	0c f4       	brge	.+2      	; 0xec4 <TIMER0_voidINIT+0x128>
     ec2:	65 c0       	rjmp	.+202    	; 0xf8e <TIMER0_voidINIT+0x1f2>
     ec4:	2b 81       	ldd	r18, Y+3	; 0x03
     ec6:	3c 81       	ldd	r19, Y+4	; 0x04
     ec8:	27 30       	cpi	r18, 0x07	; 7
     eca:	31 05       	cpc	r19, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <TIMER0_voidINIT+0x134>
     ece:	8b c0       	rjmp	.+278    	; 0xfe6 <TIMER0_voidINIT+0x24a>
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	88 30       	cpi	r24, 0x08	; 8
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <TIMER0_voidINIT+0x140>
     eda:	9b c0       	rjmp	.+310    	; 0x1012 <TIMER0_voidINIT+0x276>
     edc:	af c0       	rjmp	.+350    	; 0x103c <TIMER0_voidINIT+0x2a0>
	{
	case NO_CLOCK :
		CLR_BIT(TCCR0,TCCR0_CS00);
     ede:	a3 e5       	ldi	r26, 0x53	; 83
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e3 e5       	ldi	r30, 0x53	; 83
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8e 7f       	andi	r24, 0xFE	; 254
     eea:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
     eec:	a3 e5       	ldi	r26, 0x53	; 83
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e3 e5       	ldi	r30, 0x53	; 83
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8d 7f       	andi	r24, 0xFD	; 253
     ef8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
     efa:	a3 e5       	ldi	r26, 0x53	; 83
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e3 e5       	ldi	r30, 0x53	; 83
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8b 7f       	andi	r24, 0xFB	; 251
     f06:	8c 93       	st	X, r24
     f08:	99 c0       	rjmp	.+306    	; 0x103c <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_1 :
		SET_BIT(TCCR0,TCCR0_CS00);
     f0a:	a3 e5       	ldi	r26, 0x53	; 83
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e3 e5       	ldi	r30, 0x53	; 83
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	81 60       	ori	r24, 0x01	; 1
     f16:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
     f18:	a3 e5       	ldi	r26, 0x53	; 83
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8d 7f       	andi	r24, 0xFD	; 253
     f24:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
     f26:	a3 e5       	ldi	r26, 0x53	; 83
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e3 e5       	ldi	r30, 0x53	; 83
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8b 7f       	andi	r24, 0xFB	; 251
     f32:	8c 93       	st	X, r24
     f34:	83 c0       	rjmp	.+262    	; 0x103c <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_8 :
		CLR_BIT(TCCR0,TCCR0_CS00);
     f36:	a3 e5       	ldi	r26, 0x53	; 83
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e3 e5       	ldi	r30, 0x53	; 83
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8e 7f       	andi	r24, 0xFE	; 254
     f42:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
     f44:	a3 e5       	ldi	r26, 0x53	; 83
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e3 e5       	ldi	r30, 0x53	; 83
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
     f52:	a3 e5       	ldi	r26, 0x53	; 83
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8b 7f       	andi	r24, 0xFB	; 251
     f5e:	8c 93       	st	X, r24
     f60:	6d c0       	rjmp	.+218    	; 0x103c <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_64 :
		SET_BIT(TCCR0,TCCR0_CS00);
     f62:	a3 e5       	ldi	r26, 0x53	; 83
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e3 e5       	ldi	r30, 0x53	; 83
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	81 60       	ori	r24, 0x01	; 1
     f6e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
     f70:	a3 e5       	ldi	r26, 0x53	; 83
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e3 e5       	ldi	r30, 0x53	; 83
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	82 60       	ori	r24, 0x02	; 2
     f7c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
     f7e:	a3 e5       	ldi	r26, 0x53	; 83
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e3 e5       	ldi	r30, 0x53	; 83
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8b 7f       	andi	r24, 0xFB	; 251
     f8a:	8c 93       	st	X, r24
     f8c:	57 c0       	rjmp	.+174    	; 0x103c <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_256 :
		CLR_BIT(TCCR0,TCCR0_CS00);
     f8e:	a3 e5       	ldi	r26, 0x53	; 83
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e3 e5       	ldi	r30, 0x53	; 83
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8e 7f       	andi	r24, 0xFE	; 254
     f9a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
     f9c:	a3 e5       	ldi	r26, 0x53	; 83
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e3 e5       	ldi	r30, 0x53	; 83
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8d 7f       	andi	r24, 0xFD	; 253
     fa8:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
     faa:	a3 e5       	ldi	r26, 0x53	; 83
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e3 e5       	ldi	r30, 0x53	; 83
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	84 60       	ori	r24, 0x04	; 4
     fb6:	8c 93       	st	X, r24
     fb8:	41 c0       	rjmp	.+130    	; 0x103c <TIMER0_voidINIT+0x2a0>
		break;
	case DIV_1024 :
		SET_BIT(TCCR0,TCCR0_CS00);
     fba:	a3 e5       	ldi	r26, 0x53	; 83
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e3 e5       	ldi	r30, 0x53	; 83
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS01);
     fc8:	a3 e5       	ldi	r26, 0x53	; 83
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8d 7f       	andi	r24, 0xFD	; 253
     fd4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
     fd6:	a3 e5       	ldi	r26, 0x53	; 83
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e3 e5       	ldi	r30, 0x53	; 83
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	84 60       	ori	r24, 0x04	; 4
     fe2:	8c 93       	st	X, r24
     fe4:	2b c0       	rjmp	.+86     	; 0x103c <TIMER0_voidINIT+0x2a0>
		break;
	case EXT_T0_FALLING :
		CLR_BIT(TCCR0,TCCR0_CS00);
     fe6:	a3 e5       	ldi	r26, 0x53	; 83
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e3 e5       	ldi	r30, 0x53	; 83
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8e 7f       	andi	r24, 0xFE	; 254
     ff2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
     ff4:	a3 e5       	ldi	r26, 0x53	; 83
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e3 e5       	ldi	r30, 0x53	; 83
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	82 60       	ori	r24, 0x02	; 2
    1000:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
    1002:	a3 e5       	ldi	r26, 0x53	; 83
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e3 e5       	ldi	r30, 0x53	; 83
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	84 60       	ori	r24, 0x04	; 4
    100e:	8c 93       	st	X, r24
    1010:	15 c0       	rjmp	.+42     	; 0x103c <TIMER0_voidINIT+0x2a0>
		break;
	case EXT_T0_RISING :
		SET_BIT(TCCR0,TCCR0_CS00);
    1012:	a3 e5       	ldi	r26, 0x53	; 83
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e3 e5       	ldi	r30, 0x53	; 83
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	81 60       	ori	r24, 0x01	; 1
    101e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
    1020:	a3 e5       	ldi	r26, 0x53	; 83
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e3 e5       	ldi	r30, 0x53	; 83
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS02);
    102e:	a3 e5       	ldi	r26, 0x53	; 83
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e3 e5       	ldi	r30, 0x53	; 83
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	84 60       	ori	r24, 0x04	; 4
    103a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    103c:	26 96       	adiw	r28, 0x06	; 6
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <TIMER0_SetCOMPValue>:


void TIMER0_SetCOMPValue(u8 Value)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Value;
    105a:	ec e5       	ldi	r30, 0x5C	; 92
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 83       	st	Z, r24
}
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <TIMER0_SetOutMode>:

void TIMER0_SetOutMode(u8 Copy_u8OutMode)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	29 97       	sbiw	r28, 0x09	; 9
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	89 83       	std	Y+1, r24	; 0x01
	/*Copy_Mode ranges from 1-->4*/
	switch (Mode)
    1080:	80 91 70 01 	lds	r24, 0x0170
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	39 87       	std	Y+9, r19	; 0x09
    108a:	28 87       	std	Y+8, r18	; 0x08
    108c:	88 85       	ldd	r24, Y+8	; 0x08
    108e:	99 85       	ldd	r25, Y+9	; 0x09
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	91 05       	cpc	r25, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <TIMER0_SetOutMode+0x2e>
    1096:	68 c0       	rjmp	.+208    	; 0x1168 <TIMER0_SetOutMode+0xfe>
    1098:	28 85       	ldd	r18, Y+8	; 0x08
    109a:	39 85       	ldd	r19, Y+9	; 0x09
    109c:	24 30       	cpi	r18, 0x04	; 4
    109e:	31 05       	cpc	r19, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <TIMER0_SetOutMode+0x3a>
    10a2:	a4 c0       	rjmp	.+328    	; 0x11ec <TIMER0_SetOutMode+0x182>
    10a4:	88 85       	ldd	r24, Y+8	; 0x08
    10a6:	99 85       	ldd	r25, Y+9	; 0x09
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <TIMER0_SetOutMode+0x46>
    10ae:	de c0       	rjmp	.+444    	; 0x126c <TIMER0_SetOutMode+0x202>
	case NORMAL :
		/* 1-OC0 disconnected
		 * 2-Toggle OC0 on Compare
		 * 3-Clear OC0 on Compare
		 * 4-Set OC0 on Compare*/
		switch(Copy_u8OutMode)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3f 83       	std	Y+7, r19	; 0x07
    10b8:	2e 83       	std	Y+6, r18	; 0x06
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	91 05       	cpc	r25, r1
    10c2:	29 f1       	breq	.+74     	; 0x110e <TIMER0_SetOutMode+0xa4>
    10c4:	2e 81       	ldd	r18, Y+6	; 0x06
    10c6:	3f 81       	ldd	r19, Y+7	; 0x07
    10c8:	23 30       	cpi	r18, 0x03	; 3
    10ca:	31 05       	cpc	r19, r1
    10cc:	34 f4       	brge	.+12     	; 0x10da <TIMER0_SetOutMode+0x70>
    10ce:	8e 81       	ldd	r24, Y+6	; 0x06
    10d0:	9f 81       	ldd	r25, Y+7	; 0x07
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	91 05       	cpc	r25, r1
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <TIMER0_SetOutMode+0x86>
    10d8:	c9 c0       	rjmp	.+402    	; 0x126c <TIMER0_SetOutMode+0x202>
    10da:	2e 81       	ldd	r18, Y+6	; 0x06
    10dc:	3f 81       	ldd	r19, Y+7	; 0x07
    10de:	23 30       	cpi	r18, 0x03	; 3
    10e0:	31 05       	cpc	r19, r1
    10e2:	21 f1       	breq	.+72     	; 0x112c <TIMER0_SetOutMode+0xc2>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	9f 81       	ldd	r25, Y+7	; 0x07
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	91 05       	cpc	r25, r1
    10ec:	71 f1       	breq	.+92     	; 0x114a <TIMER0_SetOutMode+0xe0>
    10ee:	be c0       	rjmp	.+380    	; 0x126c <TIMER0_SetOutMode+0x202>
		{
		case DISC:
			CLR_BIT(TCCR0,TCCR0_COM00);
    10f0:	a3 e5       	ldi	r26, 0x53	; 83
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e3 e5       	ldi	r30, 0x53	; 83
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 7e       	andi	r24, 0xEF	; 239
    10fc:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM01);
    10fe:	a3 e5       	ldi	r26, 0x53	; 83
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e3 e5       	ldi	r30, 0x53	; 83
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7d       	andi	r24, 0xDF	; 223
    110a:	8c 93       	st	X, r24
    110c:	af c0       	rjmp	.+350    	; 0x126c <TIMER0_SetOutMode+0x202>
			break;
		case TOGGLE:
			SET_BIT(TCCR0,TCCR0_COM00);
    110e:	a3 e5       	ldi	r26, 0x53	; 83
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e3 e5       	ldi	r30, 0x53	; 83
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM01);
    111c:	a3 e5       	ldi	r26, 0x53	; 83
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e3 e5       	ldi	r30, 0x53	; 83
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 7d       	andi	r24, 0xDF	; 223
    1128:	8c 93       	st	X, r24
    112a:	a0 c0       	rjmp	.+320    	; 0x126c <TIMER0_SetOutMode+0x202>
			break;
		case CLEAR:
			CLR_BIT(TCCR0,TCCR0_COM00);
    112c:	a3 e5       	ldi	r26, 0x53	; 83
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e3 e5       	ldi	r30, 0x53	; 83
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8f 7e       	andi	r24, 0xEF	; 239
    1138:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    113a:	a3 e5       	ldi	r26, 0x53	; 83
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 e5       	ldi	r30, 0x53	; 83
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 62       	ori	r24, 0x20	; 32
    1146:	8c 93       	st	X, r24
    1148:	91 c0       	rjmp	.+290    	; 0x126c <TIMER0_SetOutMode+0x202>
			break;
		case SET:
			SET_BIT(TCCR0,TCCR0_COM00);
    114a:	a3 e5       	ldi	r26, 0x53	; 83
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e3 e5       	ldi	r30, 0x53	; 83
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 61       	ori	r24, 0x10	; 16
    1156:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    1158:	a3 e5       	ldi	r26, 0x53	; 83
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e3 e5       	ldi	r30, 0x53	; 83
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 62       	ori	r24, 0x20	; 32
    1164:	8c 93       	st	X, r24
    1166:	82 c0       	rjmp	.+260    	; 0x126c <TIMER0_SetOutMode+0x202>
		case PWM :
			/* 1-OC0 DISCONNECTED
			 * 2-RESERVED
			 * 3-Clear OC0 on compare when UP-Counting && Set OC0 on compare when DOWN-COUNTING
			 * 4-Set OC0 on compare when UP-Counting && Clear OC0 on compare when DOWN-COUNTING*/
			switch(Copy_u8OutMode)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3d 83       	std	Y+5, r19	; 0x05
    1170:	2c 83       	std	Y+4, r18	; 0x04
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	d1 f0       	breq	.+52     	; 0x11b0 <TIMER0_SetOutMode+0x146>
    117c:	2c 81       	ldd	r18, Y+4	; 0x04
    117e:	3d 81       	ldd	r19, Y+5	; 0x05
    1180:	24 30       	cpi	r18, 0x04	; 4
    1182:	31 05       	cpc	r19, r1
    1184:	21 f1       	breq	.+72     	; 0x11ce <TIMER0_SetOutMode+0x164>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	91 05       	cpc	r25, r1
    118e:	09 f0       	breq	.+2      	; 0x1192 <TIMER0_SetOutMode+0x128>
    1190:	6d c0       	rjmp	.+218    	; 0x126c <TIMER0_SetOutMode+0x202>
			{
			case PWM_DISC :
				CLR_BIT(TCCR0,TCCR0_COM00);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	8f 7e       	andi	r24, 0xEF	; 239
    119e:	8c 93       	st	X, r24
				CLR_BIT(TCCR0,TCCR0_COM01);
    11a0:	a3 e5       	ldi	r26, 0x53	; 83
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e3 e5       	ldi	r30, 0x53	; 83
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8f 7d       	andi	r24, 0xDF	; 223
    11ac:	8c 93       	st	X, r24
    11ae:	5e c0       	rjmp	.+188    	; 0x126c <TIMER0_SetOutMode+0x202>
				break;
			case PWM_CLR_UP :
				CLR_BIT(TCCR0,TCCR0_COM00);
    11b0:	a3 e5       	ldi	r26, 0x53	; 83
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e3 e5       	ldi	r30, 0x53	; 83
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 7e       	andi	r24, 0xEF	; 239
    11bc:	8c 93       	st	X, r24
				SET_BIT(TCCR0,TCCR0_COM01);
    11be:	a3 e5       	ldi	r26, 0x53	; 83
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e3 e5       	ldi	r30, 0x53	; 83
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 62       	ori	r24, 0x20	; 32
    11ca:	8c 93       	st	X, r24
    11cc:	4f c0       	rjmp	.+158    	; 0x126c <TIMER0_SetOutMode+0x202>
				break;
			case PWM_SET_UP :
				SET_BIT(TCCR0,TCCR0_COM00);
    11ce:	a3 e5       	ldi	r26, 0x53	; 83
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e3 e5       	ldi	r30, 0x53	; 83
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 61       	ori	r24, 0x10	; 16
    11da:	8c 93       	st	X, r24
				SET_BIT(TCCR0,TCCR0_COM01);
    11dc:	a3 e5       	ldi	r26, 0x53	; 83
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e3 e5       	ldi	r30, 0x53	; 83
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 62       	ori	r24, 0x20	; 32
    11e8:	8c 93       	st	X, r24
    11ea:	40 c0       	rjmp	.+128    	; 0x126c <TIMER0_SetOutMode+0x202>
			case FAST_PWM :
				/* 1-OC0 DISCONNECTED
				 * 2-RESERVED
				 * 3-Clear on compare && Set on Top
				 * 4-Set on Compare && clear on Top*/
				switch(Copy_u8OutMode)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3b 83       	std	Y+3, r19	; 0x03
    11f4:	2a 83       	std	Y+2, r18	; 0x02
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	9b 81       	ldd	r25, Y+3	; 0x03
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	c9 f0       	breq	.+50     	; 0x1232 <TIMER0_SetOutMode+0x1c8>
    1200:	2a 81       	ldd	r18, Y+2	; 0x02
    1202:	3b 81       	ldd	r19, Y+3	; 0x03
    1204:	24 30       	cpi	r18, 0x04	; 4
    1206:	31 05       	cpc	r19, r1
    1208:	19 f1       	breq	.+70     	; 0x1250 <TIMER0_SetOutMode+0x1e6>
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	9b 81       	ldd	r25, Y+3	; 0x03
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	61 f5       	brne	.+88     	; 0x126c <TIMER0_SetOutMode+0x202>
				{
				case FAST_PWM_DISC :
					CLR_BIT(TCCR0,TCCR0_COM00);
    1214:	a3 e5       	ldi	r26, 0x53	; 83
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e3 e5       	ldi	r30, 0x53	; 83
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	8f 7e       	andi	r24, 0xEF	; 239
    1220:	8c 93       	st	X, r24
					CLR_BIT(TCCR0,TCCR0_COM01);
    1222:	a3 e5       	ldi	r26, 0x53	; 83
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e3 e5       	ldi	r30, 0x53	; 83
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8f 7d       	andi	r24, 0xDF	; 223
    122e:	8c 93       	st	X, r24
    1230:	1d c0       	rjmp	.+58     	; 0x126c <TIMER0_SetOutMode+0x202>
					break;
				case FAST_PWM_CLR_COMP :
					CLR_BIT(TCCR0,TCCR0_COM00);
    1232:	a3 e5       	ldi	r26, 0x53	; 83
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e3 e5       	ldi	r30, 0x53	; 83
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8f 7e       	andi	r24, 0xEF	; 239
    123e:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_COM01);
    1240:	a3 e5       	ldi	r26, 0x53	; 83
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e3 e5       	ldi	r30, 0x53	; 83
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 62       	ori	r24, 0x20	; 32
    124c:	8c 93       	st	X, r24
    124e:	0e c0       	rjmp	.+28     	; 0x126c <TIMER0_SetOutMode+0x202>
					break;
				case FAST_PWM_SET_COMP :
					SET_BIT(TCCR0,TCCR0_COM00);
    1250:	a3 e5       	ldi	r26, 0x53	; 83
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e3 e5       	ldi	r30, 0x53	; 83
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	80 61       	ori	r24, 0x10	; 16
    125c:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_COM01);
    125e:	a3 e5       	ldi	r26, 0x53	; 83
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e3 e5       	ldi	r30, 0x53	; 83
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 62       	ori	r24, 0x20	; 32
    126a:	8c 93       	st	X, r24
				break;
				default:
					break;
	}

}
    126c:	29 96       	adiw	r28, 0x09	; 9
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <TIMER0_COMPIntE>:

void TIMER0_COMPIntE(u8 Copy_u8Enable)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <TIMER0_COMPIntE+0x6>
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Enable)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3b 83       	std	Y+3, r19	; 0x03
    1294:	2a 83       	std	Y+2, r18	; 0x02
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	31 f0       	breq	.+12     	; 0x12ac <TIMER0_COMPIntE+0x2e>
    12a0:	2a 81       	ldd	r18, Y+2	; 0x02
    12a2:	3b 81       	ldd	r19, Y+3	; 0x03
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	49 f0       	breq	.+18     	; 0x12bc <TIMER0_COMPIntE+0x3e>
    12aa:	0f c0       	rjmp	.+30     	; 0x12ca <TIMER0_COMPIntE+0x4c>
	{
	case ENABLE :
		SET_BIT(TIMSK,TIMSK_OCIE0);
    12ac:	a9 e5       	ldi	r26, 0x59	; 89
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e9 e5       	ldi	r30, 0x59	; 89
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	82 60       	ori	r24, 0x02	; 2
    12b8:	8c 93       	st	X, r24
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <TIMER0_COMPIntE+0x4c>
		break;
	case DISABLE :
		CLR_BIT(TIMSK,TIMSK_OCIE0);
    12bc:	a9 e5       	ldi	r26, 0x59	; 89
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e9 e5       	ldi	r30, 0x59	; 89
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8d 7f       	andi	r24, 0xFD	; 253
    12c8:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <TIMER0_OVFIntE>:

void TIMER0_OVFIntE(u8 Copy_u8Enable)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <TIMER0_OVFIntE+0x6>
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Enable)
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3b 83       	std	Y+3, r19	; 0x03
    12ec:	2a 83       	std	Y+2, r18	; 0x02
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	91 05       	cpc	r25, r1
    12f6:	31 f0       	breq	.+12     	; 0x1304 <TIMER0_OVFIntE+0x2e>
    12f8:	2a 81       	ldd	r18, Y+2	; 0x02
    12fa:	3b 81       	ldd	r19, Y+3	; 0x03
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	49 f0       	breq	.+18     	; 0x1314 <TIMER0_OVFIntE+0x3e>
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <TIMER0_OVFIntE+0x4c>
	{
	case ENABLE :
		SET_BIT(TIMSK,TIMSK_TOIE0);
    1304:	a9 e5       	ldi	r26, 0x59	; 89
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e9 e5       	ldi	r30, 0x59	; 89
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	81 60       	ori	r24, 0x01	; 1
    1310:	8c 93       	st	X, r24
    1312:	07 c0       	rjmp	.+14     	; 0x1322 <TIMER0_OVFIntE+0x4c>
		break;
	case DISABLE :
		CLR_BIT(TIMSK,TIMSK_TOIE0);
    1314:	a9 e5       	ldi	r26, 0x59	; 89
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e9 e5       	ldi	r30, 0x59	; 89
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <TIMER0_u8COMPCallBackFunc>:

u8 TIMER0_u8COMPCallBackFunc(void(*pvNotfication)(void))
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <TIMER0_u8COMPCallBackFunc+0x6>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	9b 83       	std	Y+3, r25	; 0x03
    133c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    133e:	19 82       	std	Y+1, r1	; 0x01
	if(pvNotfication!=NULL)
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	9b 81       	ldd	r25, Y+3	; 0x03
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	39 f0       	breq	.+14     	; 0x1356 <TIMER0_u8COMPCallBackFunc+0x28>
	{
		TIMER0_COMPCallBack = pvNotfication;
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	9b 81       	ldd	r25, Y+3	; 0x03
    134c:	90 93 6b 01 	sts	0x016B, r25
    1350:	80 93 6a 01 	sts	0x016A, r24
    1354:	02 c0       	rjmp	.+4      	; 0x135a <TIMER0_u8COMPCallBackFunc+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = P_NULL;
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <TIMER0_u8OVFCallBackFunc>:

u8 TIMER0_u8OVFCallBackFunc(void(*pvNotfication)(void))
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <TIMER0_u8OVFCallBackFunc+0x6>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9b 83       	std	Y+3, r25	; 0x03
    1376:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1378:	19 82       	std	Y+1, r1	; 0x01
	if(pvNotfication!=NULL)
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	39 f0       	breq	.+14     	; 0x1390 <TIMER0_u8OVFCallBackFunc+0x28>
	{
		TIMER0_OVFCallBack = pvNotfication;
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	90 93 6d 01 	sts	0x016D, r25
    138a:	80 93 6c 01 	sts	0x016C, r24
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <TIMER0_u8OVFCallBackFunc+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = P_NULL;
    1390:	83 e0       	ldi	r24, 0x03	; 3
    1392:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1394:	89 81       	ldd	r24, Y+1	; 0x01
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <DELYA_voidNonBlockDelay>:


void DELYA_voidNonBlockDelay(u16 Copy_ms, void(*pvFunc)(void) ,u8 Copy_u8Periodic)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <DELYA_voidNonBlockDelay+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <DELYA_voidNonBlockDelay+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	7c 83       	std	Y+4, r23	; 0x04
    13b6:	6b 83       	std	Y+3, r22	; 0x03
    13b8:	4d 83       	std	Y+5, r20	; 0x05
	if(Init_F==NOT_INITIALIZED)
    13ba:	80 91 68 01 	lds	r24, 0x0168
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	e1 f4       	brne	.+56     	; 0x13fa <DELYA_voidNonBlockDelay+0x58>
	{
		TIMER0_voidINIT(CTC,DIV_8);
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	63 e0       	ldi	r22, 0x03	; 3
    13c6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <TIMER0_voidINIT>

		/*Set Comp value to 250 us*/
		TIMER0_SetCOMPValue(250);
    13ca:	8a ef       	ldi	r24, 0xFA	; 250
    13cc:	0e 94 27 08 	call	0x104e	; 0x104e <TIMER0_SetCOMPValue>

		/*Enable COMP INT*/
		TIMER0_COMPIntE(ENABLE);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	0e 94 3f 09 	call	0x127e	; 0x127e <TIMER0_COMPIntE>

		Period=Copy_u8Periodic;
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	80 93 73 01 	sts	0x0173, r24
		Copy_u8Time=Copy_ms;
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	90 93 72 01 	sts	0x0172, r25
    13e4:	80 93 71 01 	sts	0x0171, r24
		TIMER0_COMPCallBack=pvFunc;
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	90 93 6b 01 	sts	0x016B, r25
    13f0:	80 93 6a 01 	sts	0x016A, r24

		Init_F=INITIALIZED;
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	80 93 68 01 	sts	0x0168, r24
	}
	TIMER0_u8COMPCallBackFunc(&DELAY_NonBlockHelper);
    13fa:	80 e7       	ldi	r24, 0x70	; 112
    13fc:	96 e0       	ldi	r25, 0x06	; 6
    13fe:	0e 94 97 09 	call	0x132e	; 0x132e <TIMER0_u8COMPCallBackFunc>
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
	SET_BIT(TCCR1A,TCCR1A_COM1A1);*/


	/*Select NORMAL mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    141a:	af e4       	ldi	r26, 0x4F	; 79
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ef e4       	ldi	r30, 0x4F	; 79
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8e 7f       	andi	r24, 0xFE	; 254
    1426:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1428:	af e4       	ldi	r26, 0x4F	; 79
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ef e4       	ldi	r30, 0x4F	; 79
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8d 7f       	andi	r24, 0xFD	; 253
    1434:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1436:	ae e4       	ldi	r26, 0x4E	; 78
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ee e4       	ldi	r30, 0x4E	; 78
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	87 7f       	andi	r24, 0xF7	; 247
    1442:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1444:	ae e4       	ldi	r26, 0x4E	; 78
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ee e4       	ldi	r30, 0x4E	; 78
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8f 7e       	andi	r24, 0xEF	; 239
    1450:	8c 93       	st	X, r24

	/*Set Prescaler DIV by 8*/
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1452:	ae e4       	ldi	r26, 0x4E	; 78
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ee e4       	ldi	r30, 0x4E	; 78
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	82 60       	ori	r24, 0x02	; 2
    145e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1460:	ae e4       	ldi	r26, 0x4E	; 78
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	ee e4       	ldi	r30, 0x4E	; 78
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    146e:	ae e4       	ldi	r26, 0x4E	; 78
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ee e4       	ldi	r30, 0x4E	; 78
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8b 7f       	andi	r24, 0xFB	; 251
    147a:	8c 93       	st	X, r24
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <TIMER1_TopValue>:


void TIMER1_TopValue(u16 Value)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <TIMER1_TopValue+0x6>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Value;
    1490:	e6 e4       	ldi	r30, 0x46	; 70
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	80 83       	st	Z, r24
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <TIMER1_channelACOMPValue>:

void TIMER1_channelACOMPValue(u16 Value)
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <TIMER1_channelACOMPValue+0x6>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	9a 83       	std	Y+2, r25	; 0x02
    14b2:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Value;
    14b4:	ea e4       	ldi	r30, 0x4A	; 74
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	91 83       	std	Z+1, r25	; 0x01
    14be:	80 83       	st	Z, r24
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <TIMER1_SetChannelReading>:

void TIMER1_SetChannelReading(u16 Value)
{
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <TIMER1_SetChannelReading+0x6>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Value;
    14d8:	ec e4       	ldi	r30, 0x4C	; 76
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <TIMER1_ReadChannelReading>:

u16 TIMER1_ReadChannelReading(void)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    14f6:	ec e4       	ldi	r30, 0x4C	; 76
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
}
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <ICU_voidInit>:

void ICU_voidInit(void)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	/*Set Input Capture Edge Select to Rising Edge*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    150c:	ae e4       	ldi	r26, 0x4E	; 78
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ee e4       	ldi	r30, 0x4E	; 78
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 64       	ori	r24, 0x40	; 64
    1518:	8c 93       	st	X, r24

	/*Enable Input Capture Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    151a:	a9 e5       	ldi	r26, 0x59	; 89
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e9 e5       	ldi	r30, 0x59	; 89
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 62       	ori	r24, 0x20	; 32
    1526:	8c 93       	st	X, r24
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <ICU_voidSetEdge>:


void ICU_voidSetEdge(u8 Edge)
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <ICU_voidSetEdge+0x6>
    1534:	0f 92       	push	r0
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	89 83       	std	Y+1, r24	; 0x01
	switch(Edge)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	3b 83       	std	Y+3, r19	; 0x03
    1544:	2a 83       	std	Y+2, r18	; 0x02
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	91 05       	cpc	r25, r1
    154e:	31 f0       	breq	.+12     	; 0x155c <ICU_voidSetEdge+0x2e>
    1550:	2a 81       	ldd	r18, Y+2	; 0x02
    1552:	3b 81       	ldd	r19, Y+3	; 0x03
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	49 f0       	breq	.+18     	; 0x156c <ICU_voidSetEdge+0x3e>
    155a:	0f c0       	rjmp	.+30     	; 0x157a <ICU_voidSetEdge+0x4c>
	{
	case FALLING :
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    155c:	ae e4       	ldi	r26, 0x4E	; 78
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	ee e4       	ldi	r30, 0x4E	; 78
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	8f 7b       	andi	r24, 0xBF	; 191
    1568:	8c 93       	st	X, r24
    156a:	07 c0       	rjmp	.+14     	; 0x157a <ICU_voidSetEdge+0x4c>
		break;
	case RISING :
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    156c:	ae e4       	ldi	r26, 0x4E	; 78
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ee e4       	ldi	r30, 0x4E	; 78
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	80 64       	ori	r24, 0x40	; 64
    1578:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <ICU_voidInterrupt>:

void ICU_voidInterrupt(u8 EN)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <ICU_voidInterrupt+0x6>
    158c:	0f 92       	push	r0
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	89 83       	std	Y+1, r24	; 0x01
	switch(EN)
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3b 83       	std	Y+3, r19	; 0x03
    159c:	2a 83       	std	Y+2, r18	; 0x02
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	91 05       	cpc	r25, r1
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <ICU_voidInterrupt+0x2e>
    15a8:	2a 81       	ldd	r18, Y+2	; 0x02
    15aa:	3b 81       	ldd	r19, Y+3	; 0x03
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	49 f0       	breq	.+18     	; 0x15c4 <ICU_voidInterrupt+0x3e>
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <ICU_voidInterrupt+0x4c>
	{
	case ENABLE :
		SET_BIT(TIMSK,TIMSK_TICIE1);
    15b4:	a9 e5       	ldi	r26, 0x59	; 89
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e9 e5       	ldi	r30, 0x59	; 89
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	80 62       	ori	r24, 0x20	; 32
    15c0:	8c 93       	st	X, r24
    15c2:	07 c0       	rjmp	.+14     	; 0x15d2 <ICU_voidInterrupt+0x4c>
		break;
	case DISABLE:
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    15c4:	a9 e5       	ldi	r26, 0x59	; 89
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e9 e5       	ldi	r30, 0x59	; 89
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8f 7d       	andi	r24, 0xDF	; 223
    15d0:	8c 93       	st	X, r24
	}
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <ICU_ReadChannelReading>:


u16 ICU_ReadChannelReading(void)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    15e6:	e6 e4       	ldi	r30, 0x46	; 70
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
}
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <ICU_voidSetCallBack>:


u8 ICU_voidSetCallBack(void (*pvCallBack)(void))
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <ICU_voidSetCallBack+0x6>
    15fa:	0f 92       	push	r0
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	9b 83       	std	Y+3, r25	; 0x03
    1602:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ICUErrorState=0;
    1604:	19 82       	std	Y+1, r1	; 0x01
	if(pvCallBack!=NULL)
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	39 f0       	breq	.+14     	; 0x161c <ICU_voidSetCallBack+0x28>
	{
		ICU_CallBack=pvCallBack;
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	90 93 6f 01 	sts	0x016F, r25
    1616:	80 93 6e 01 	sts	0x016E, r24
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <ICU_voidSetCallBack+0x2c>
	}
	else
	{
		Local_u8ICUErrorState = P_NULL;
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ICUErrorState;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
}
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <WDT_voidSleep>:

void WDT_voidSleep(u8 Value)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <WDT_voidSleep+0x6>
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(WDTCR,WDTCR_WDE);
    163c:	a1 e4       	ldi	r26, 0x41	; 65
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e1 e4       	ldi	r30, 0x41	; 65
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	88 60       	ori	r24, 0x08	; 8
    1648:	8c 93       	st	X, r24
	 * 3 	 For 0.13sec
	 * 4	 For 0.26sec
	 * 5 	 For 0.52sec
	 * 6 	 For 1sec
	 * 7	 For 2.1sec */
	switch(Value)
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3b 83       	std	Y+3, r19	; 0x03
    1652:	2a 83       	std	Y+2, r18	; 0x02
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	91 05       	cpc	r25, r1
    165c:	09 f4       	brne	.+2      	; 0x1660 <WDT_voidSleep+0x32>
    165e:	70 c0       	rjmp	.+224    	; 0x1740 <WDT_voidSleep+0x112>
    1660:	2a 81       	ldd	r18, Y+2	; 0x02
    1662:	3b 81       	ldd	r19, Y+3	; 0x03
    1664:	24 30       	cpi	r18, 0x04	; 4
    1666:	31 05       	cpc	r19, r1
    1668:	84 f4       	brge	.+32     	; 0x168a <WDT_voidSleep+0x5c>
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	9b 81       	ldd	r25, Y+3	; 0x03
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	d1 f1       	breq	.+116    	; 0x16e8 <WDT_voidSleep+0xba>
    1674:	2a 81       	ldd	r18, Y+2	; 0x02
    1676:	3b 81       	ldd	r19, Y+3	; 0x03
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	0c f0       	brlt	.+2      	; 0x1680 <WDT_voidSleep+0x52>
    167e:	4a c0       	rjmp	.+148    	; 0x1714 <WDT_voidSleep+0xe6>
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	d1 f0       	breq	.+52     	; 0x16bc <WDT_voidSleep+0x8e>
    1688:	c8 c0       	rjmp	.+400    	; 0x181a <WDT_voidSleep+0x1ec>
    168a:	2a 81       	ldd	r18, Y+2	; 0x02
    168c:	3b 81       	ldd	r19, Y+3	; 0x03
    168e:	25 30       	cpi	r18, 0x05	; 5
    1690:	31 05       	cpc	r19, r1
    1692:	09 f4       	brne	.+2      	; 0x1696 <WDT_voidSleep+0x68>
    1694:	81 c0       	rjmp	.+258    	; 0x1798 <WDT_voidSleep+0x16a>
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	9b 81       	ldd	r25, Y+3	; 0x03
    169a:	85 30       	cpi	r24, 0x05	; 5
    169c:	91 05       	cpc	r25, r1
    169e:	0c f4       	brge	.+2      	; 0x16a2 <WDT_voidSleep+0x74>
    16a0:	65 c0       	rjmp	.+202    	; 0x176c <WDT_voidSleep+0x13e>
    16a2:	2a 81       	ldd	r18, Y+2	; 0x02
    16a4:	3b 81       	ldd	r19, Y+3	; 0x03
    16a6:	26 30       	cpi	r18, 0x06	; 6
    16a8:	31 05       	cpc	r19, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <WDT_voidSleep+0x80>
    16ac:	8b c0       	rjmp	.+278    	; 0x17c4 <WDT_voidSleep+0x196>
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	9b 81       	ldd	r25, Y+3	; 0x03
    16b2:	87 30       	cpi	r24, 0x07	; 7
    16b4:	91 05       	cpc	r25, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <WDT_voidSleep+0x8c>
    16b8:	9b c0       	rjmp	.+310    	; 0x17f0 <WDT_voidSleep+0x1c2>
    16ba:	af c0       	rjmp	.+350    	; 0x181a <WDT_voidSleep+0x1ec>
	{
	case 0:
		CLR_BIT(WDTCR,WDTCR_WDP0);
    16bc:	a1 e4       	ldi	r26, 0x41	; 65
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e1 e4       	ldi	r30, 0x41	; 65
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8e 7f       	andi	r24, 0xFE	; 254
    16c8:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP1);
    16ca:	a1 e4       	ldi	r26, 0x41	; 65
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e1 e4       	ldi	r30, 0x41	; 65
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8d 7f       	andi	r24, 0xFD	; 253
    16d6:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP2);
    16d8:	a1 e4       	ldi	r26, 0x41	; 65
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e1 e4       	ldi	r30, 0x41	; 65
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8b 7f       	andi	r24, 0xFB	; 251
    16e4:	8c 93       	st	X, r24
    16e6:	99 c0       	rjmp	.+306    	; 0x181a <WDT_voidSleep+0x1ec>
		break;
	case 1:
		SET_BIT(WDTCR,WDTCR_WDP0);
    16e8:	a1 e4       	ldi	r26, 0x41	; 65
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e1 e4       	ldi	r30, 0x41	; 65
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	81 60       	ori	r24, 0x01	; 1
    16f4:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP1);
    16f6:	a1 e4       	ldi	r26, 0x41	; 65
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e1 e4       	ldi	r30, 0x41	; 65
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8d 7f       	andi	r24, 0xFD	; 253
    1702:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP2);
    1704:	a1 e4       	ldi	r26, 0x41	; 65
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e1 e4       	ldi	r30, 0x41	; 65
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8b 7f       	andi	r24, 0xFB	; 251
    1710:	8c 93       	st	X, r24
    1712:	83 c0       	rjmp	.+262    	; 0x181a <WDT_voidSleep+0x1ec>
		break;
	case 2:
		CLR_BIT(WDTCR,WDTCR_WDP0);
    1714:	a1 e4       	ldi	r26, 0x41	; 65
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e1 e4       	ldi	r30, 0x41	; 65
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	8e 7f       	andi	r24, 0xFE	; 254
    1720:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP1);
    1722:	a1 e4       	ldi	r26, 0x41	; 65
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e1 e4       	ldi	r30, 0x41	; 65
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	82 60       	ori	r24, 0x02	; 2
    172e:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP2);
    1730:	a1 e4       	ldi	r26, 0x41	; 65
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e1 e4       	ldi	r30, 0x41	; 65
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8b 7f       	andi	r24, 0xFB	; 251
    173c:	8c 93       	st	X, r24
    173e:	6d c0       	rjmp	.+218    	; 0x181a <WDT_voidSleep+0x1ec>
		break;
	case 3:
		SET_BIT(WDTCR,WDTCR_WDP0);
    1740:	a1 e4       	ldi	r26, 0x41	; 65
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e1 e4       	ldi	r30, 0x41	; 65
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	81 60       	ori	r24, 0x01	; 1
    174c:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP1);
    174e:	a1 e4       	ldi	r26, 0x41	; 65
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e1 e4       	ldi	r30, 0x41	; 65
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	82 60       	ori	r24, 0x02	; 2
    175a:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP2);
    175c:	a1 e4       	ldi	r26, 0x41	; 65
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e1 e4       	ldi	r30, 0x41	; 65
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8b 7f       	andi	r24, 0xFB	; 251
    1768:	8c 93       	st	X, r24
    176a:	57 c0       	rjmp	.+174    	; 0x181a <WDT_voidSleep+0x1ec>
		break;
	case 4:
		CLR_BIT(WDTCR,WDTCR_WDP0);
    176c:	a1 e4       	ldi	r26, 0x41	; 65
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e1 e4       	ldi	r30, 0x41	; 65
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8e 7f       	andi	r24, 0xFE	; 254
    1778:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP1);
    177a:	a1 e4       	ldi	r26, 0x41	; 65
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e1 e4       	ldi	r30, 0x41	; 65
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8d 7f       	andi	r24, 0xFD	; 253
    1786:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP2);
    1788:	a1 e4       	ldi	r26, 0x41	; 65
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e1 e4       	ldi	r30, 0x41	; 65
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	84 60       	ori	r24, 0x04	; 4
    1794:	8c 93       	st	X, r24
    1796:	41 c0       	rjmp	.+130    	; 0x181a <WDT_voidSleep+0x1ec>
		break;
	case 5:
		SET_BIT(WDTCR,WDTCR_WDP0);
    1798:	a1 e4       	ldi	r26, 0x41	; 65
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e1 e4       	ldi	r30, 0x41	; 65
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	81 60       	ori	r24, 0x01	; 1
    17a4:	8c 93       	st	X, r24
		CLR_BIT(WDTCR,WDTCR_WDP1);
    17a6:	a1 e4       	ldi	r26, 0x41	; 65
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e1 e4       	ldi	r30, 0x41	; 65
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	8d 7f       	andi	r24, 0xFD	; 253
    17b2:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP2);
    17b4:	a1 e4       	ldi	r26, 0x41	; 65
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e1 e4       	ldi	r30, 0x41	; 65
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	84 60       	ori	r24, 0x04	; 4
    17c0:	8c 93       	st	X, r24
    17c2:	2b c0       	rjmp	.+86     	; 0x181a <WDT_voidSleep+0x1ec>
		break;
	case 6:
		CLR_BIT(WDTCR,WDTCR_WDP0);
    17c4:	a1 e4       	ldi	r26, 0x41	; 65
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e1 e4       	ldi	r30, 0x41	; 65
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	8e 7f       	andi	r24, 0xFE	; 254
    17d0:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP1);
    17d2:	a1 e4       	ldi	r26, 0x41	; 65
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e1 e4       	ldi	r30, 0x41	; 65
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	82 60       	ori	r24, 0x02	; 2
    17de:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP2);
    17e0:	a1 e4       	ldi	r26, 0x41	; 65
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e1 e4       	ldi	r30, 0x41	; 65
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	84 60       	ori	r24, 0x04	; 4
    17ec:	8c 93       	st	X, r24
    17ee:	15 c0       	rjmp	.+42     	; 0x181a <WDT_voidSleep+0x1ec>
		break;
	case 7:
		SET_BIT(WDTCR,WDTCR_WDP0);
    17f0:	a1 e4       	ldi	r26, 0x41	; 65
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e1 e4       	ldi	r30, 0x41	; 65
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	81 60       	ori	r24, 0x01	; 1
    17fc:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP1);
    17fe:	a1 e4       	ldi	r26, 0x41	; 65
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e1 e4       	ldi	r30, 0x41	; 65
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	82 60       	ori	r24, 0x02	; 2
    180a:	8c 93       	st	X, r24
		SET_BIT(WDTCR,WDTCR_WDP2);
    180c:	a1 e4       	ldi	r26, 0x41	; 65
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e1 e4       	ldi	r30, 0x41	; 65
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	84 60       	ori	r24, 0x04	; 4
    1818:	8c 93       	st	X, r24
		break;

	}
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <WDT_voidDisable>:

void WDT_voidDisable(void)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
	WDTCR=0b00011000;
    182e:	e1 e4       	ldi	r30, 0x41	; 65
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	88 e1       	ldi	r24, 0x18	; 24
    1834:	80 83       	st	Z, r24
	WDTCR=0;
    1836:	e1 e4       	ldi	r30, 0x41	; 65
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	10 82       	st	Z, r1
}
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <__vector_10>:



void __vector_10(void)      __attribute__((signal));
void __vector_10(void)
{
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	2f 93       	push	r18
    184e:	3f 93       	push	r19
    1850:	4f 93       	push	r20
    1852:	5f 93       	push	r21
    1854:	6f 93       	push	r22
    1856:	7f 93       	push	r23
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	af 93       	push	r26
    185e:	bf 93       	push	r27
    1860:	ef 93       	push	r30
    1862:	ff 93       	push	r31
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_COMPCallBack!=NULL)
    186c:	80 91 6a 01 	lds	r24, 0x016A
    1870:	90 91 6b 01 	lds	r25, 0x016B
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	29 f0       	breq	.+10     	; 0x1882 <__vector_10+0x40>
	{
		TIMER0_COMPCallBack();
    1878:	e0 91 6a 01 	lds	r30, 0x016A
    187c:	f0 91 6b 01 	lds	r31, 0x016B
    1880:	09 95       	icall
	}
}
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	bf 91       	pop	r27
    188c:	af 91       	pop	r26
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	7f 91       	pop	r23
    1894:	6f 91       	pop	r22
    1896:	5f 91       	pop	r21
    1898:	4f 91       	pop	r20
    189a:	3f 91       	pop	r19
    189c:	2f 91       	pop	r18
    189e:	0f 90       	pop	r0
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	0f 90       	pop	r0
    18a4:	1f 90       	pop	r1
    18a6:	18 95       	reti

000018a8 <__vector_11>:

void __vector_11(void)      __attribute__((signal));
void __vector_11(void)
{
    18a8:	1f 92       	push	r1
    18aa:	0f 92       	push	r0
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	0f 92       	push	r0
    18b0:	11 24       	eor	r1, r1
    18b2:	2f 93       	push	r18
    18b4:	3f 93       	push	r19
    18b6:	4f 93       	push	r20
    18b8:	5f 93       	push	r21
    18ba:	6f 93       	push	r22
    18bc:	7f 93       	push	r23
    18be:	8f 93       	push	r24
    18c0:	9f 93       	push	r25
    18c2:	af 93       	push	r26
    18c4:	bf 93       	push	r27
    18c6:	ef 93       	push	r30
    18c8:	ff 93       	push	r31
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVFCallBack!=NULL)
    18d2:	80 91 6c 01 	lds	r24, 0x016C
    18d6:	90 91 6d 01 	lds	r25, 0x016D
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <__vector_11+0x40>
	{
		TIMER0_OVFCallBack();
    18de:	e0 91 6c 01 	lds	r30, 0x016C
    18e2:	f0 91 6d 01 	lds	r31, 0x016D
    18e6:	09 95       	icall
	}
}
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	ff 91       	pop	r31
    18ee:	ef 91       	pop	r30
    18f0:	bf 91       	pop	r27
    18f2:	af 91       	pop	r26
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	7f 91       	pop	r23
    18fa:	6f 91       	pop	r22
    18fc:	5f 91       	pop	r21
    18fe:	4f 91       	pop	r20
    1900:	3f 91       	pop	r19
    1902:	2f 91       	pop	r18
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	0f 90       	pop	r0
    190a:	1f 90       	pop	r1
    190c:	18 95       	reti

0000190e <__vector_6>:


void __vector_6(void)		__attribute__((signal));
void __vector_6(void)
{
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	2f 93       	push	r18
    191a:	3f 93       	push	r19
    191c:	4f 93       	push	r20
    191e:	5f 93       	push	r21
    1920:	6f 93       	push	r22
    1922:	7f 93       	push	r23
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	af 93       	push	r26
    192a:	bf 93       	push	r27
    192c:	ef 93       	push	r30
    192e:	ff 93       	push	r31
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBack != NULL)
    1938:	80 91 6e 01 	lds	r24, 0x016E
    193c:	90 91 6f 01 	lds	r25, 0x016F
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	29 f0       	breq	.+10     	; 0x194e <__vector_6+0x40>
	{
		ICU_CallBack();
    1944:	e0 91 6e 01 	lds	r30, 0x016E
    1948:	f0 91 6f 01 	lds	r31, 0x016F
    194c:	09 95       	icall
	}
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti

00001974 <DIO_u8SetPinDirection>:
/*********************************************************************************/

#include "DIO_interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Direction)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	28 97       	sbiw	r28, 0x08	; 8
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	8a 83       	std	Y+2, r24	; 0x02
    198a:	6b 83       	std	Y+3, r22	; 0x03
    198c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    198e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7)
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	88 30       	cpi	r24, 0x08	; 8
    1994:	10 f0       	brcs	.+4      	; 0x199a <DIO_u8SetPinDirection+0x26>
		Local_u8ErrorState = 1;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == INPUT)
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	88 23       	and	r24, r24
    199e:	09 f0       	breq	.+2      	; 0x19a2 <DIO_u8SetPinDirection+0x2e>
    19a0:	78 c0       	rjmp	.+240    	; 0x1a92 <DIO_u8SetPinDirection+0x11e>
	{
		switch (Copy_u8Port)
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	38 87       	std	Y+8, r19	; 0x08
    19aa:	2f 83       	std	Y+7, r18	; 0x07
    19ac:	8f 81       	ldd	r24, Y+7	; 0x07
    19ae:	98 85       	ldd	r25, Y+8	; 0x08
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	91 05       	cpc	r25, r1
    19b4:	61 f1       	breq	.+88     	; 0x1a0e <DIO_u8SetPinDirection+0x9a>
    19b6:	2f 81       	ldd	r18, Y+7	; 0x07
    19b8:	38 85       	ldd	r19, Y+8	; 0x08
    19ba:	23 30       	cpi	r18, 0x03	; 3
    19bc:	31 05       	cpc	r19, r1
    19be:	34 f4       	brge	.+12     	; 0x19cc <DIO_u8SetPinDirection+0x58>
    19c0:	8f 81       	ldd	r24, Y+7	; 0x07
    19c2:	98 85       	ldd	r25, Y+8	; 0x08
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	91 05       	cpc	r25, r1
    19c8:	69 f0       	breq	.+26     	; 0x19e4 <DIO_u8SetPinDirection+0x70>
    19ca:	60 c0       	rjmp	.+192    	; 0x1a8c <DIO_u8SetPinDirection+0x118>
    19cc:	2f 81       	ldd	r18, Y+7	; 0x07
    19ce:	38 85       	ldd	r19, Y+8	; 0x08
    19d0:	23 30       	cpi	r18, 0x03	; 3
    19d2:	31 05       	cpc	r19, r1
    19d4:	89 f1       	breq	.+98     	; 0x1a38 <DIO_u8SetPinDirection+0xc4>
    19d6:	8f 81       	ldd	r24, Y+7	; 0x07
    19d8:	98 85       	ldd	r25, Y+8	; 0x08
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	91 05       	cpc	r25, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <DIO_u8SetPinDirection+0x6e>
    19e0:	40 c0       	rjmp	.+128    	; 0x1a62 <DIO_u8SetPinDirection+0xee>
    19e2:	54 c0       	rjmp	.+168    	; 0x1a8c <DIO_u8SetPinDirection+0x118>
		{
		case PORT_A :
			CLR_BIT(DDRA,Copy_u8Pin);
    19e4:	aa e3       	ldi	r26, 0x3A	; 58
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	ea e3       	ldi	r30, 0x3A	; 58
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	48 2f       	mov	r20, r24
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	02 2e       	mov	r0, r18
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_u8SetPinDirection+0x8e>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	0a 94       	dec	r0
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <DIO_u8SetPinDirection+0x8a>
    1a06:	80 95       	com	r24
    1a08:	84 23       	and	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	bb c0       	rjmp	.+374    	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_B :
			CLR_BIT(DDRB,Copy_u8Pin);
    1a0e:	a7 e3       	ldi	r26, 0x37	; 55
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e7 e3       	ldi	r30, 0x37	; 55
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_u8SetPinDirection+0xb8>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_u8SetPinDirection+0xb4>
    1a30:	80 95       	com	r24
    1a32:	84 23       	and	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	a6 c0       	rjmp	.+332    	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_C :
			CLR_BIT(DDRC,Copy_u8Pin);
    1a38:	a4 e3       	ldi	r26, 0x34	; 52
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e4 e3       	ldi	r30, 0x34	; 52
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_u8SetPinDirection+0xe2>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_u8SetPinDirection+0xde>
    1a5a:	80 95       	com	r24
    1a5c:	84 23       	and	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	91 c0       	rjmp	.+290    	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_D :
			CLR_BIT(DDRD,Copy_u8Pin);
    1a62:	a1 e3       	ldi	r26, 0x31	; 49
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e1 e3       	ldi	r30, 0x31	; 49
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_u8SetPinDirection+0x10c>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_u8SetPinDirection+0x108>
    1a84:	80 95       	com	r24
    1a86:	84 23       	and	r24, r20
    1a88:	8c 93       	st	X, r24
    1a8a:	7c c0       	rjmp	.+248    	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	79 c0       	rjmp	.+242    	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		}
	}
	else if(Copy_u8Direction == OUTPUT)
    1a92:	8c 81       	ldd	r24, Y+4	; 0x04
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <DIO_u8SetPinDirection+0x126>
    1a98:	73 c0       	rjmp	.+230    	; 0x1b80 <DIO_u8SetPinDirection+0x20c>
	{
		switch (Copy_u8Port)
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	3e 83       	std	Y+6, r19	; 0x06
    1aa2:	2d 83       	std	Y+5, r18	; 0x05
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	91 05       	cpc	r25, r1
    1aac:	51 f1       	breq	.+84     	; 0x1b02 <DIO_u8SetPinDirection+0x18e>
    1aae:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ab2:	23 30       	cpi	r18, 0x03	; 3
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	34 f4       	brge	.+12     	; 0x1ac4 <DIO_u8SetPinDirection+0x150>
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	61 f0       	breq	.+24     	; 0x1ada <DIO_u8SetPinDirection+0x166>
    1ac2:	5b c0       	rjmp	.+182    	; 0x1b7a <DIO_u8SetPinDirection+0x206>
    1ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac8:	23 30       	cpi	r18, 0x03	; 3
    1aca:	31 05       	cpc	r19, r1
    1acc:	71 f1       	breq	.+92     	; 0x1b2a <DIO_u8SetPinDirection+0x1b6>
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	e9 f1       	breq	.+122    	; 0x1b52 <DIO_u8SetPinDirection+0x1de>
    1ad8:	50 c0       	rjmp	.+160    	; 0x1b7a <DIO_u8SetPinDirection+0x206>
		{
		case PORT_A :
			SET_BIT(DDRA,Copy_u8Pin);
    1ada:	aa e3       	ldi	r26, 0x3A	; 58
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ea e3       	ldi	r30, 0x3A	; 58
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	48 2f       	mov	r20, r24
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <DIO_u8SetPinDirection+0x184>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <DIO_u8SetPinDirection+0x180>
    1afc:	84 2b       	or	r24, r20
    1afe:	8c 93       	st	X, r24
    1b00:	41 c0       	rjmp	.+130    	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_B :
			SET_BIT(DDRB,Copy_u8Pin);
    1b02:	a7 e3       	ldi	r26, 0x37	; 55
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e7 e3       	ldi	r30, 0x37	; 55
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	02 2e       	mov	r0, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <DIO_u8SetPinDirection+0x1ac>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <DIO_u8SetPinDirection+0x1a8>
    1b24:	84 2b       	or	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	2d c0       	rjmp	.+90     	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_C :
			SET_BIT(DDRC,Copy_u8Pin);
    1b2a:	a4 e3       	ldi	r26, 0x34	; 52
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e4 e3       	ldi	r30, 0x34	; 52
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_u8SetPinDirection+0x1d4>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_u8SetPinDirection+0x1d0>
    1b4c:	84 2b       	or	r24, r20
    1b4e:	8c 93       	st	X, r24
    1b50:	19 c0       	rjmp	.+50     	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		case PORT_D :
			SET_BIT(DDRD,Copy_u8Pin);
    1b52:	a1 e3       	ldi	r26, 0x31	; 49
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e1 e3       	ldi	r30, 0x31	; 49
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <DIO_u8SetPinDirection+0x1fc>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <DIO_u8SetPinDirection+0x1f8>
    1b74:	84 2b       	or	r24, r20
    1b76:	8c 93       	st	X, r24
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <DIO_u8SetPinDirection+0x210>
			break;
		}
	}
	else
	{
		Local_u8ErrorState =1;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b86:	28 96       	adiw	r28, 0x08	; 8
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DIO_u8SetPortDirection+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <DIO_u8SetPortDirection+0x8>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	8a 83       	std	Y+2, r24	; 0x02
    1ba8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    1baa:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	3d 83       	std	Y+5, r19	; 0x05
    1bb4:	2c 83       	std	Y+4, r18	; 0x04
    1bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bba:	82 30       	cpi	r24, 0x02	; 2
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	d9 f0       	breq	.+54     	; 0x1bf6 <DIO_u8SetPortDirection+0x5e>
    1bc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc4:	23 30       	cpi	r18, 0x03	; 3
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	34 f4       	brge	.+12     	; 0x1bd6 <DIO_u8SetPortDirection+0x3e>
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	61 f0       	breq	.+24     	; 0x1bec <DIO_u8SetPortDirection+0x54>
    1bd4:	1f c0       	rjmp	.+62     	; 0x1c14 <DIO_u8SetPortDirection+0x7c>
    1bd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bda:	23 30       	cpi	r18, 0x03	; 3
    1bdc:	31 05       	cpc	r19, r1
    1bde:	81 f0       	breq	.+32     	; 0x1c00 <DIO_u8SetPortDirection+0x68>
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	9d 81       	ldd	r25, Y+5	; 0x05
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	91 05       	cpc	r25, r1
    1be8:	81 f0       	breq	.+32     	; 0x1c0a <DIO_u8SetPortDirection+0x72>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <DIO_u8SetPortDirection+0x7c>
	{
	case PORT_A :
		DDRA = Copy_u8Direction;
    1bec:	ea e3       	ldi	r30, 0x3A	; 58
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	80 83       	st	Z, r24
    1bf4:	11 c0       	rjmp	.+34     	; 0x1c18 <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_B :
		DDRB = Copy_u8Direction;
    1bf6:	e7 e3       	ldi	r30, 0x37	; 55
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	80 83       	st	Z, r24
    1bfe:	0c c0       	rjmp	.+24     	; 0x1c18 <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_C :
		DDRC = Copy_u8Direction;
    1c00:	e4 e3       	ldi	r30, 0x34	; 52
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	80 83       	st	Z, r24
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <DIO_u8SetPortDirection+0x80>
		break;
	case PORT_D :
		DDRD = Copy_u8Direction;
    1c0a:	e1 e3       	ldi	r30, 0x31	; 49
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	80 83       	st	Z, r24
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_u8SetPortDirection+0x80>
		break;
	default :
		Local_u8ErrorState =1;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin ,u8 Copy_u8Value)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	28 97       	sbiw	r28, 0x08	; 8
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
    1c40:	6b 83       	std	Y+3, r22	; 0x03
    1c42:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    1c44:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin>7)
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	88 30       	cpi	r24, 0x08	; 8
    1c4a:	10 f0       	brcs	.+4      	; 0x1c50 <DIO_u8SetPinValue+0x26>
		Local_u8ErrorState =1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Value == LOW)
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	88 23       	and	r24, r24
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <DIO_u8SetPinValue+0x2e>
    1c56:	78 c0       	rjmp	.+240    	; 0x1d48 <DIO_u8SetPinValue+0x11e>
	{
		switch (Copy_u8Port)
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	38 87       	std	Y+8, r19	; 0x08
    1c60:	2f 83       	std	Y+7, r18	; 0x07
    1c62:	8f 81       	ldd	r24, Y+7	; 0x07
    1c64:	98 85       	ldd	r25, Y+8	; 0x08
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	91 05       	cpc	r25, r1
    1c6a:	61 f1       	breq	.+88     	; 0x1cc4 <DIO_u8SetPinValue+0x9a>
    1c6c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c6e:	38 85       	ldd	r19, Y+8	; 0x08
    1c70:	23 30       	cpi	r18, 0x03	; 3
    1c72:	31 05       	cpc	r19, r1
    1c74:	34 f4       	brge	.+12     	; 0x1c82 <DIO_u8SetPinValue+0x58>
    1c76:	8f 81       	ldd	r24, Y+7	; 0x07
    1c78:	98 85       	ldd	r25, Y+8	; 0x08
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	69 f0       	breq	.+26     	; 0x1c9a <DIO_u8SetPinValue+0x70>
    1c80:	60 c0       	rjmp	.+192    	; 0x1d42 <DIO_u8SetPinValue+0x118>
    1c82:	2f 81       	ldd	r18, Y+7	; 0x07
    1c84:	38 85       	ldd	r19, Y+8	; 0x08
    1c86:	23 30       	cpi	r18, 0x03	; 3
    1c88:	31 05       	cpc	r19, r1
    1c8a:	89 f1       	breq	.+98     	; 0x1cee <DIO_u8SetPinValue+0xc4>
    1c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c8e:	98 85       	ldd	r25, Y+8	; 0x08
    1c90:	84 30       	cpi	r24, 0x04	; 4
    1c92:	91 05       	cpc	r25, r1
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <DIO_u8SetPinValue+0x6e>
    1c96:	40 c0       	rjmp	.+128    	; 0x1d18 <DIO_u8SetPinValue+0xee>
    1c98:	54 c0       	rjmp	.+168    	; 0x1d42 <DIO_u8SetPinValue+0x118>
		{
		case PORT_A :
			CLR_BIT(PORTA,Copy_u8Pin);
    1c9a:	ab e3       	ldi	r26, 0x3B	; 59
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	48 2f       	mov	r20, r24
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 2e       	mov	r0, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <DIO_u8SetPinValue+0x8e>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	0a 94       	dec	r0
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <DIO_u8SetPinValue+0x8a>
    1cbc:	80 95       	com	r24
    1cbe:	84 23       	and	r24, r20
    1cc0:	8c 93       	st	X, r24
    1cc2:	bb c0       	rjmp	.+374    	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		case PORT_B :
			CLR_BIT(PORTB,Copy_u8Pin);
    1cc4:	a8 e3       	ldi	r26, 0x38	; 56
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e8 e3       	ldi	r30, 0x38	; 56
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	48 2f       	mov	r20, r24
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 2e       	mov	r0, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <DIO_u8SetPinValue+0xb8>
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	0a 94       	dec	r0
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <DIO_u8SetPinValue+0xb4>
    1ce6:	80 95       	com	r24
    1ce8:	84 23       	and	r24, r20
    1cea:	8c 93       	st	X, r24
    1cec:	a6 c0       	rjmp	.+332    	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		case PORT_C :
			CLR_BIT(PORTC,Copy_u8Pin);
    1cee:	a5 e3       	ldi	r26, 0x35	; 53
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e5 e3       	ldi	r30, 0x35	; 53
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	48 2f       	mov	r20, r24
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	02 2e       	mov	r0, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <DIO_u8SetPinValue+0xe2>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <DIO_u8SetPinValue+0xde>
    1d10:	80 95       	com	r24
    1d12:	84 23       	and	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	91 c0       	rjmp	.+290    	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		case PORT_D :
			CLR_BIT(PORTD,Copy_u8Pin);
    1d18:	a2 e3       	ldi	r26, 0x32	; 50
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e3       	ldi	r30, 0x32	; 50
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_u8SetPinValue+0x10c>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_u8SetPinValue+0x108>
    1d3a:	80 95       	com	r24
    1d3c:	84 23       	and	r24, r20
    1d3e:	8c 93       	st	X, r24
    1d40:	7c c0       	rjmp	.+248    	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	79 c0       	rjmp	.+242    	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		}
	}
	else if(Copy_u8Value == HIGH)
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <DIO_u8SetPinValue+0x126>
    1d4e:	73 c0       	rjmp	.+230    	; 0x1e36 <DIO_u8SetPinValue+0x20c>
	{
		switch (Copy_u8Port)
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	3e 83       	std	Y+6, r19	; 0x06
    1d58:	2d 83       	std	Y+5, r18	; 0x05
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	91 05       	cpc	r25, r1
    1d62:	51 f1       	breq	.+84     	; 0x1db8 <DIO_u8SetPinValue+0x18e>
    1d64:	2d 81       	ldd	r18, Y+5	; 0x05
    1d66:	3e 81       	ldd	r19, Y+6	; 0x06
    1d68:	23 30       	cpi	r18, 0x03	; 3
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	34 f4       	brge	.+12     	; 0x1d7a <DIO_u8SetPinValue+0x150>
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	91 05       	cpc	r25, r1
    1d76:	61 f0       	breq	.+24     	; 0x1d90 <DIO_u8SetPinValue+0x166>
    1d78:	5b c0       	rjmp	.+182    	; 0x1e30 <DIO_u8SetPinValue+0x206>
    1d7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d7e:	23 30       	cpi	r18, 0x03	; 3
    1d80:	31 05       	cpc	r19, r1
    1d82:	71 f1       	breq	.+92     	; 0x1de0 <DIO_u8SetPinValue+0x1b6>
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	84 30       	cpi	r24, 0x04	; 4
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	e9 f1       	breq	.+122    	; 0x1e08 <DIO_u8SetPinValue+0x1de>
    1d8e:	50 c0       	rjmp	.+160    	; 0x1e30 <DIO_u8SetPinValue+0x206>
		{
		case PORT_A :
			SET_BIT(PORTA,Copy_u8Pin);
    1d90:	ab e3       	ldi	r26, 0x3B	; 59
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	eb e3       	ldi	r30, 0x3B	; 59
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_u8SetPinValue+0x184>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <DIO_u8SetPinValue+0x180>
    1db2:	84 2b       	or	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	41 c0       	rjmp	.+130    	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		case PORT_B :
			SET_BIT(PORTB,Copy_u8Pin);
    1db8:	a8 e3       	ldi	r26, 0x38	; 56
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e8 e3       	ldi	r30, 0x38	; 56
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	48 2f       	mov	r20, r24
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	02 2e       	mov	r0, r18
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <DIO_u8SetPinValue+0x1ac>
    1dd2:	88 0f       	add	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	0a 94       	dec	r0
    1dd8:	e2 f7       	brpl	.-8      	; 0x1dd2 <DIO_u8SetPinValue+0x1a8>
    1dda:	84 2b       	or	r24, r20
    1ddc:	8c 93       	st	X, r24
    1dde:	2d c0       	rjmp	.+90     	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		case PORT_C :
			SET_BIT(PORTC,Copy_u8Pin);
    1de0:	a5 e3       	ldi	r26, 0x35	; 53
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e5 e3       	ldi	r30, 0x35	; 53
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	48 2f       	mov	r20, r24
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	02 2e       	mov	r0, r18
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_u8SetPinValue+0x1d4>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	0a 94       	dec	r0
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <DIO_u8SetPinValue+0x1d0>
    1e02:	84 2b       	or	r24, r20
    1e04:	8c 93       	st	X, r24
    1e06:	19 c0       	rjmp	.+50     	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		case PORT_D :
			SET_BIT(PORTD,Copy_u8Pin);
    1e08:	a2 e3       	ldi	r26, 0x32	; 50
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e2 e3       	ldi	r30, 0x32	; 50
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_u8SetPinValue+0x1fc>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_u8SetPinValue+0x1f8>
    1e2a:	84 2b       	or	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		default:
			Local_u8ErrorState =1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_u8SetPinValue+0x210>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3c:	28 96       	adiw	r28, 0x08	; 8
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <DIO_u8SetPortValue+0x6>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <DIO_u8SetPortValue+0x8>
    1e56:	0f 92       	push	r0
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	8a 83       	std	Y+2, r24	; 0x02
    1e5e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    1e60:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	3d 83       	std	Y+5, r19	; 0x05
    1e6a:	2c 83       	std	Y+4, r18	; 0x04
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e70:	82 30       	cpi	r24, 0x02	; 2
    1e72:	91 05       	cpc	r25, r1
    1e74:	d9 f0       	breq	.+54     	; 0x1eac <DIO_u8SetPortValue+0x5e>
    1e76:	2c 81       	ldd	r18, Y+4	; 0x04
    1e78:	3d 81       	ldd	r19, Y+5	; 0x05
    1e7a:	23 30       	cpi	r18, 0x03	; 3
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	34 f4       	brge	.+12     	; 0x1e8c <DIO_u8SetPortValue+0x3e>
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04
    1e82:	9d 81       	ldd	r25, Y+5	; 0x05
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	91 05       	cpc	r25, r1
    1e88:	61 f0       	breq	.+24     	; 0x1ea2 <DIO_u8SetPortValue+0x54>
    1e8a:	1f c0       	rjmp	.+62     	; 0x1eca <DIO_u8SetPortValue+0x7c>
    1e8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e90:	23 30       	cpi	r18, 0x03	; 3
    1e92:	31 05       	cpc	r19, r1
    1e94:	81 f0       	breq	.+32     	; 0x1eb6 <DIO_u8SetPortValue+0x68>
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9a:	84 30       	cpi	r24, 0x04	; 4
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	81 f0       	breq	.+32     	; 0x1ec0 <DIO_u8SetPortValue+0x72>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <DIO_u8SetPortValue+0x7c>
	{
	case PORT_A :
		PORTA = Copy_u8Value;
    1ea2:	eb e3       	ldi	r30, 0x3B	; 59
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	80 83       	st	Z, r24
    1eaa:	11 c0       	rjmp	.+34     	; 0x1ece <DIO_u8SetPortValue+0x80>
		break;

	case PORT_B :
		PORTB = Copy_u8Value ;
    1eac:	e8 e3       	ldi	r30, 0x38	; 56
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	80 83       	st	Z, r24
    1eb4:	0c c0       	rjmp	.+24     	; 0x1ece <DIO_u8SetPortValue+0x80>
		break;

	case PORT_C :
		PORTC = Copy_u8Value ;
    1eb6:	e5 e3       	ldi	r30, 0x35	; 53
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	80 83       	st	Z, r24
    1ebe:	07 c0       	rjmp	.+14     	; 0x1ece <DIO_u8SetPortValue+0x80>
		break;

	case PORT_D :
		PORTD = Copy_u8Value ;
    1ec0:	e2 e3       	ldi	r30, 0x32	; 50
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	80 83       	st	Z, r24
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <DIO_u8SetPortValue+0x80>
		break;

	default :

		Local_u8ErrorState =1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	27 97       	sbiw	r28, 0x07	; 7
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	de bf       	out	0x3e, r29	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	8a 83       	std	Y+2, r24	; 0x02
    1ef6:	6b 83       	std	Y+3, r22	; 0x03
    1ef8:	5d 83       	std	Y+5, r21	; 0x05
    1efa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState =0;
    1efc:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Value == NULL) || (Copy_u8Pin > 7))
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	9d 81       	ldd	r25, Y+5	; 0x05
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	19 f0       	breq	.+6      	; 0x1f0c <DIO_u8GetPinValue+0x2c>
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	88 30       	cpi	r24, 0x08	; 8
    1f0a:	10 f0       	brcs	.+4      	; 0x1f10 <DIO_u8GetPinValue+0x30>
		Local_u8ErrorState =1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Port)
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	28 2f       	mov	r18, r24
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	3f 83       	std	Y+7, r19	; 0x07
    1f18:	2e 83       	std	Y+6, r18	; 0x06
    1f1a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f1c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f1e:	42 30       	cpi	r20, 0x02	; 2
    1f20:	51 05       	cpc	r21, r1
    1f22:	59 f1       	breq	.+86     	; 0x1f7a <DIO_u8GetPinValue+0x9a>
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	34 f4       	brge	.+12     	; 0x1f3a <DIO_u8GetPinValue+0x5a>
    1f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f30:	3f 81       	ldd	r19, Y+7	; 0x07
    1f32:	21 30       	cpi	r18, 0x01	; 1
    1f34:	31 05       	cpc	r19, r1
    1f36:	69 f0       	breq	.+26     	; 0x1f52 <DIO_u8GetPinValue+0x72>
    1f38:	5c c0       	rjmp	.+184    	; 0x1ff2 <DIO_u8GetPinValue+0x112>
    1f3a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f3c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f3e:	43 30       	cpi	r20, 0x03	; 3
    1f40:	51 05       	cpc	r21, r1
    1f42:	79 f1       	breq	.+94     	; 0x1fa2 <DIO_u8GetPinValue+0xc2>
    1f44:	8e 81       	ldd	r24, Y+6	; 0x06
    1f46:	9f 81       	ldd	r25, Y+7	; 0x07
    1f48:	84 30       	cpi	r24, 0x04	; 4
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <DIO_u8GetPinValue+0x70>
    1f4e:	3d c0       	rjmp	.+122    	; 0x1fca <DIO_u8GetPinValue+0xea>
    1f50:	50 c0       	rjmp	.+160    	; 0x1ff2 <DIO_u8GetPinValue+0x112>
	{
	case PORT_A :
		*Copy_u8Value = GET_BIT(PINA,Copy_u8Pin);
    1f52:	e9 e3       	ldi	r30, 0x39	; 57
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a9 01       	movw	r20, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <DIO_u8GetPinValue+0x8a>
    1f66:	55 95       	asr	r21
    1f68:	47 95       	ror	r20
    1f6a:	8a 95       	dec	r24
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <DIO_u8GetPinValue+0x86>
    1f6e:	ca 01       	movw	r24, r20
    1f70:	81 70       	andi	r24, 0x01	; 1
    1f72:	ec 81       	ldd	r30, Y+4	; 0x04
    1f74:	fd 81       	ldd	r31, Y+5	; 0x05
    1f76:	80 83       	st	Z, r24
    1f78:	3e c0       	rjmp	.+124    	; 0x1ff6 <DIO_u8GetPinValue+0x116>
		break;
	case PORT_B :
		*Copy_u8Value = GET_BIT(PINB,Copy_u8Pin);
    1f7a:	e6 e3       	ldi	r30, 0x36	; 54
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a9 01       	movw	r20, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <DIO_u8GetPinValue+0xb2>
    1f8e:	55 95       	asr	r21
    1f90:	47 95       	ror	r20
    1f92:	8a 95       	dec	r24
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <DIO_u8GetPinValue+0xae>
    1f96:	ca 01       	movw	r24, r20
    1f98:	81 70       	andi	r24, 0x01	; 1
    1f9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1f9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1f9e:	80 83       	st	Z, r24
    1fa0:	2a c0       	rjmp	.+84     	; 0x1ff6 <DIO_u8GetPinValue+0x116>
		break;
	case PORT_C :
		*Copy_u8Value = GET_BIT(PINC,Copy_u8Pin);
    1fa2:	e3 e3       	ldi	r30, 0x33	; 51
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a9 01       	movw	r20, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <DIO_u8GetPinValue+0xda>
    1fb6:	55 95       	asr	r21
    1fb8:	47 95       	ror	r20
    1fba:	8a 95       	dec	r24
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <DIO_u8GetPinValue+0xd6>
    1fbe:	ca 01       	movw	r24, r20
    1fc0:	81 70       	andi	r24, 0x01	; 1
    1fc2:	ec 81       	ldd	r30, Y+4	; 0x04
    1fc4:	fd 81       	ldd	r31, Y+5	; 0x05
    1fc6:	80 83       	st	Z, r24
    1fc8:	16 c0       	rjmp	.+44     	; 0x1ff6 <DIO_u8GetPinValue+0x116>
		break;
	case PORT_D :
		*Copy_u8Value = GET_BIT(PIND,Copy_u8Pin);
    1fca:	e0 e3       	ldi	r30, 0x30	; 48
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a9 01       	movw	r20, r18
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <DIO_u8GetPinValue+0x102>
    1fde:	55 95       	asr	r21
    1fe0:	47 95       	ror	r20
    1fe2:	8a 95       	dec	r24
    1fe4:	e2 f7       	brpl	.-8      	; 0x1fde <DIO_u8GetPinValue+0xfe>
    1fe6:	ca 01       	movw	r24, r20
    1fe8:	81 70       	andi	r24, 0x01	; 1
    1fea:	ec 81       	ldd	r30, Y+4	; 0x04
    1fec:	fd 81       	ldd	r31, Y+5	; 0x05
    1fee:	80 83       	st	Z, r24
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <DIO_u8GetPinValue+0x116>
		break;
	default:
		Local_u8ErrorState =1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff8:	27 96       	adiw	r28, 0x07	; 7
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8Port, u8* Copy_u8Value)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <DIO_u8GetPortValue+0x6>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <DIO_u8GetPortValue+0x8>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <DIO_u8GetPortValue+0xa>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	8a 83       	std	Y+2, r24	; 0x02
    201a:	7c 83       	std	Y+4, r23	; 0x04
    201c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState =0;
    201e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	3e 83       	std	Y+6, r19	; 0x06
    2028:	2d 83       	std	Y+5, r18	; 0x05
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	82 30       	cpi	r24, 0x02	; 2
    2030:	91 05       	cpc	r25, r1
    2032:	e9 f0       	breq	.+58     	; 0x206e <DIO_u8GetPortValue+0x64>
    2034:	2d 81       	ldd	r18, Y+5	; 0x05
    2036:	3e 81       	ldd	r19, Y+6	; 0x06
    2038:	23 30       	cpi	r18, 0x03	; 3
    203a:	31 05       	cpc	r19, r1
    203c:	34 f4       	brge	.+12     	; 0x204a <DIO_u8GetPortValue+0x40>
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	91 05       	cpc	r25, r1
    2046:	61 f0       	breq	.+24     	; 0x2060 <DIO_u8GetPortValue+0x56>
    2048:	27 c0       	rjmp	.+78     	; 0x2098 <DIO_u8GetPortValue+0x8e>
    204a:	2d 81       	ldd	r18, Y+5	; 0x05
    204c:	3e 81       	ldd	r19, Y+6	; 0x06
    204e:	23 30       	cpi	r18, 0x03	; 3
    2050:	31 05       	cpc	r19, r1
    2052:	a1 f0       	breq	.+40     	; 0x207c <DIO_u8GetPortValue+0x72>
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	84 30       	cpi	r24, 0x04	; 4
    205a:	91 05       	cpc	r25, r1
    205c:	b1 f0       	breq	.+44     	; 0x208a <DIO_u8GetPortValue+0x80>
    205e:	1c c0       	rjmp	.+56     	; 0x2098 <DIO_u8GetPortValue+0x8e>
	{
	case PORT_A :
		*Copy_u8Value = PINA ;
    2060:	e9 e3       	ldi	r30, 0x39	; 57
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	eb 81       	ldd	r30, Y+3	; 0x03
    2068:	fc 81       	ldd	r31, Y+4	; 0x04
    206a:	80 83       	st	Z, r24
    206c:	17 c0       	rjmp	.+46     	; 0x209c <DIO_u8GetPortValue+0x92>
		break;
	case PORT_B :
		*Copy_u8Value = PINB ;
    206e:	e6 e3       	ldi	r30, 0x36	; 54
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	eb 81       	ldd	r30, Y+3	; 0x03
    2076:	fc 81       	ldd	r31, Y+4	; 0x04
    2078:	80 83       	st	Z, r24
    207a:	10 c0       	rjmp	.+32     	; 0x209c <DIO_u8GetPortValue+0x92>
		break;
	case PORT_C :
		*Copy_u8Value = PINC ;
    207c:	e3 e3       	ldi	r30, 0x33	; 51
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	eb 81       	ldd	r30, Y+3	; 0x03
    2084:	fc 81       	ldd	r31, Y+4	; 0x04
    2086:	80 83       	st	Z, r24
    2088:	09 c0       	rjmp	.+18     	; 0x209c <DIO_u8GetPortValue+0x92>
		break;
	case PORT_D :
		*Copy_u8Value = PIND ;
    208a:	e0 e3       	ldi	r30, 0x30	; 48
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	eb 81       	ldd	r30, Y+3	; 0x03
    2092:	fc 81       	ldd	r31, Y+4	; 0x04
    2094:	80 83       	st	Z, r24
    2096:	02 c0       	rjmp	.+4      	; 0x209c <DIO_u8GetPortValue+0x92>
		break;
	default :
		Local_u8ErrorState =1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState ;
    209c:	89 81       	ldd	r24, Y+1	; 0x01
}
    209e:	26 96       	adiw	r28, 0x06	; 6
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <Map>:

f32 Map(s32 InputValue,s32 InputMin,s32 InputMax,s32 OutMin,s32 OutMax)
{
    20b0:	af 92       	push	r10
    20b2:	bf 92       	push	r11
    20b4:	cf 92       	push	r12
    20b6:	df 92       	push	r13
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	68 97       	sbiw	r28, 0x18	; 24
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	69 87       	std	Y+9, r22	; 0x09
    20d6:	7a 87       	std	Y+10, r23	; 0x0a
    20d8:	8b 87       	std	Y+11, r24	; 0x0b
    20da:	9c 87       	std	Y+12, r25	; 0x0c
    20dc:	2d 87       	std	Y+13, r18	; 0x0d
    20de:	3e 87       	std	Y+14, r19	; 0x0e
    20e0:	4f 87       	std	Y+15, r20	; 0x0f
    20e2:	58 8b       	std	Y+16, r21	; 0x10
    20e4:	e9 8a       	std	Y+17, r14	; 0x11
    20e6:	fa 8a       	std	Y+18, r15	; 0x12
    20e8:	0b 8b       	std	Y+19, r16	; 0x13
    20ea:	1c 8b       	std	Y+20, r17	; 0x14
    20ec:	ad 8a       	std	Y+21, r10	; 0x15
    20ee:	be 8a       	std	Y+22, r11	; 0x16
    20f0:	cf 8a       	std	Y+23, r12	; 0x17
    20f2:	d8 8e       	std	Y+24, r13	; 0x18
	f32 Result =(((OutMax-OutMin)*(InputValue-InputMin))/(InputMax-InputMin));
    20f4:	2d a1       	ldd	r18, Y+37	; 0x25
    20f6:	3e a1       	ldd	r19, Y+38	; 0x26
    20f8:	4f a1       	ldd	r20, Y+39	; 0x27
    20fa:	58 a5       	ldd	r21, Y+40	; 0x28
    20fc:	8d 89       	ldd	r24, Y+21	; 0x15
    20fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2100:	af 89       	ldd	r26, Y+23	; 0x17
    2102:	b8 8d       	ldd	r27, Y+24	; 0x18
    2104:	79 01       	movw	r14, r18
    2106:	8a 01       	movw	r16, r20
    2108:	e8 1a       	sub	r14, r24
    210a:	f9 0a       	sbc	r15, r25
    210c:	0a 0b       	sbc	r16, r26
    210e:	1b 0b       	sbc	r17, r27
    2110:	29 85       	ldd	r18, Y+9	; 0x09
    2112:	3a 85       	ldd	r19, Y+10	; 0x0a
    2114:	4b 85       	ldd	r20, Y+11	; 0x0b
    2116:	5c 85       	ldd	r21, Y+12	; 0x0c
    2118:	8d 85       	ldd	r24, Y+13	; 0x0d
    211a:	9e 85       	ldd	r25, Y+14	; 0x0e
    211c:	af 85       	ldd	r26, Y+15	; 0x0f
    211e:	b8 89       	ldd	r27, Y+16	; 0x10
    2120:	28 1b       	sub	r18, r24
    2122:	39 0b       	sbc	r19, r25
    2124:	4a 0b       	sbc	r20, r26
    2126:	5b 0b       	sbc	r21, r27
    2128:	c8 01       	movw	r24, r16
    212a:	b7 01       	movw	r22, r14
    212c:	0e 94 32 12 	call	0x2464	; 0x2464 <__mulsi3>
    2130:	7b 01       	movw	r14, r22
    2132:	8c 01       	movw	r16, r24
    2134:	29 89       	ldd	r18, Y+17	; 0x11
    2136:	3a 89       	ldd	r19, Y+18	; 0x12
    2138:	4b 89       	ldd	r20, Y+19	; 0x13
    213a:	5c 89       	ldd	r21, Y+20	; 0x14
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	af 85       	ldd	r26, Y+15	; 0x0f
    2142:	b8 89       	ldd	r27, Y+16	; 0x10
    2144:	28 1b       	sub	r18, r24
    2146:	39 0b       	sbc	r19, r25
    2148:	4a 0b       	sbc	r20, r26
    214a:	5b 0b       	sbc	r21, r27
    214c:	c8 01       	movw	r24, r16
    214e:	b7 01       	movw	r22, r14
    2150:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__divmodsi4>
    2154:	da 01       	movw	r26, r20
    2156:	c9 01       	movw	r24, r18
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	af 83       	std	Y+7, r26	; 0x07
    216a:	b8 87       	std	Y+8, r27	; 0x08
	f32 OutValue =Result+OutMin;
    216c:	6d 89       	ldd	r22, Y+21	; 0x15
    216e:	7e 89       	ldd	r23, Y+22	; 0x16
    2170:	8f 89       	ldd	r24, Y+23	; 0x17
    2172:	98 8d       	ldd	r25, Y+24	; 0x18
    2174:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	2d 81       	ldd	r18, Y+5	; 0x05
    2182:	3e 81       	ldd	r19, Y+6	; 0x06
    2184:	4f 81       	ldd	r20, Y+7	; 0x07
    2186:	58 85       	ldd	r21, Y+8	; 0x08
    2188:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	ab 83       	std	Y+3, r26	; 0x03
    2196:	bc 83       	std	Y+4, r27	; 0x04
	return OutValue ;
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	ab 81       	ldd	r26, Y+3	; 0x03
    219e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	68 96       	adiw	r28, 0x18	; 24
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	df 90       	pop	r13
    21be:	cf 90       	pop	r12
    21c0:	bf 90       	pop	r11
    21c2:	af 90       	pop	r10
    21c4:	08 95       	ret

000021c6 <servo_init>:
#ifndef _servo_H_
#define _servo_H_

servo_init()
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <servo_init+0x6>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
	
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
    21d0:	af e4       	ldi	r26, 0x4F	; 79
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	ef e4       	ldi	r30, 0x4F	; 79
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	82 6a       	ori	r24, 0xA2	; 162
    21dc:	8c 93       	st	X, r24
  	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM) extremeele
    21de:	ae e4       	ldi	r26, 0x4E	; 78
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	ee e4       	ldi	r30, 0x4E	; 78
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8b 61       	ori	r24, 0x1B	; 27
    21ea:	8c 93       	st	X, r24

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
    21ec:	e6 e4       	ldi	r30, 0x46	; 70
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	87 e8       	ldi	r24, 0x87	; 135
    21f2:	93 e1       	ldi	r25, 0x13	; 19
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24

  	DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
    21f8:	a1 e3       	ldi	r26, 0x31	; 49
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e1 e3       	ldi	r30, 0x31	; 49
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 63       	ori	r24, 0x30	; 48
    2204:	8c 93       	st	X, r24
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <set_degree>:
float set_degree(int d)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <set_degree+0x6>
    2216:	00 d0       	rcall	.+0      	; 0x2218 <set_degree+0x8>
    2218:	00 d0       	rcall	.+0      	; 0x221a <set_degree+0xa>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01
	OCR1A =160+((22*d)/9);
    2222:	ea e4       	ldi	r30, 0x4A	; 74
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	49 81       	ldd	r20, Y+1	; 0x01
    2228:	5a 81       	ldd	r21, Y+2	; 0x02
    222a:	ca 01       	movw	r24, r20
    222c:	9c 01       	movw	r18, r24
    222e:	22 0f       	add	r18, r18
    2230:	33 1f       	adc	r19, r19
    2232:	24 0f       	add	r18, r20
    2234:	35 1f       	adc	r19, r21
    2236:	c9 01       	movw	r24, r18
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	82 1b       	sub	r24, r18
    2246:	93 0b       	sbc	r25, r19
    2248:	84 0f       	add	r24, r20
    224a:	95 1f       	adc	r25, r21
    224c:	29 e0       	ldi	r18, 0x09	; 9
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	b9 01       	movw	r22, r18
    2252:	0e 94 51 12 	call	0x24a2	; 0x24a2 <__divmodhi4>
    2256:	cb 01       	movw	r24, r22
    2258:	80 56       	subi	r24, 0x60	; 96
    225a:	9f 4f       	sbci	r25, 0xFF	; 255
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	80 83       	st	Z, r24
}
    2260:	26 96       	adiw	r28, 0x06	; 6
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <main>:

#include "servo.h"


int main()
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	6c 97       	sbiw	r28, 0x1c	; 28
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
	servo_init();	//Initializing the servo
    2286:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <servo_init>

	while (1)
	{
	//  NOTE: Any angle of rotation(0 to 180) can be given

  	set_degree(0);		//For 90 degree rotation
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 08 11 	call	0x2210	; 0x2210 <set_degree>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	aa e7       	ldi	r26, 0x7A	; 122
    2298:	b4 e4       	ldi	r27, 0x44	; 68
    229a:	89 8f       	std	Y+25, r24	; 0x19
    229c:	9a 8f       	std	Y+26, r25	; 0x1a
    229e:	ab 8f       	std	Y+27, r26	; 0x1b
    22a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	69 8d       	ldd	r22, Y+25	; 0x19
    22a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	4a ef       	ldi	r20, 0xFA	; 250
    22b0:	54 e4       	ldi	r21, 0x44	; 68
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8d 8b       	std	Y+21, r24	; 0x15
    22bc:	9e 8b       	std	Y+22, r25	; 0x16
    22be:	af 8b       	std	Y+23, r26	; 0x17
    22c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22c2:	6d 89       	ldd	r22, Y+21	; 0x15
    22c4:	7e 89       	ldd	r23, Y+22	; 0x16
    22c6:	8f 89       	ldd	r24, Y+23	; 0x17
    22c8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <main+0x72>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9c 8b       	std	Y+20, r25	; 0x14
    22e0:	8b 8b       	std	Y+19, r24	; 0x13
    22e2:	3f c0       	rjmp	.+126    	; 0x2362 <main+0xf0>
	else if (__tmp > 65535)
    22e4:	6d 89       	ldd	r22, Y+21	; 0x15
    22e6:	7e 89       	ldd	r23, Y+22	; 0x16
    22e8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ea:	98 8d       	ldd	r25, Y+24	; 0x18
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	3f ef       	ldi	r19, 0xFF	; 255
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	4c f5       	brge	.+82     	; 0x234e <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fc:	69 8d       	ldd	r22, Y+25	; 0x19
    22fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9c 8b       	std	Y+20, r25	; 0x14
    2322:	8b 8b       	std	Y+19, r24	; 0x13
    2324:	0f c0       	rjmp	.+30     	; 0x2344 <main+0xd2>
    2326:	88 ec       	ldi	r24, 0xC8	; 200
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9a 8b       	std	Y+18, r25	; 0x12
    232c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    232e:	89 89       	ldd	r24, Y+17	; 0x11
    2330:	9a 89       	ldd	r25, Y+18	; 0x12
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <main+0xc0>
    2336:	9a 8b       	std	Y+18, r25	; 0x12
    2338:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233a:	8b 89       	ldd	r24, Y+19	; 0x13
    233c:	9c 89       	ldd	r25, Y+20	; 0x14
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	9c 8b       	std	Y+20, r25	; 0x14
    2342:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	69 f7       	brne	.-38     	; 0x2326 <main+0xb4>
    234c:	14 c0       	rjmp	.+40     	; 0x2376 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234e:	6d 89       	ldd	r22, Y+21	; 0x15
    2350:	7e 89       	ldd	r23, Y+22	; 0x16
    2352:	8f 89       	ldd	r24, Y+23	; 0x17
    2354:	98 8d       	ldd	r25, Y+24	; 0x18
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9c 8b       	std	Y+20, r25	; 0x14
    2360:	8b 8b       	std	Y+19, r24	; 0x13
    2362:	8b 89       	ldd	r24, Y+19	; 0x13
    2364:	9c 89       	ldd	r25, Y+20	; 0x14
    2366:	98 8b       	std	Y+16, r25	; 0x10
    2368:	8f 87       	std	Y+15, r24	; 0x0f
    236a:	8f 85       	ldd	r24, Y+15	; 0x0f
    236c:	98 89       	ldd	r25, Y+16	; 0x10
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <main+0xfc>
    2372:	98 8b       	std	Y+16, r25	; 0x10
    2374:	8f 87       	std	Y+15, r24	; 0x0f
  	_delay_ms(1000);	//Delay for 1s

	set_degree(180);	//For 180 degree rotation
    2376:	84 eb       	ldi	r24, 0xB4	; 180
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	0e 94 08 11 	call	0x2210	; 0x2210 <set_degree>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	aa e7       	ldi	r26, 0x7A	; 122
    2384:	b4 e4       	ldi	r27, 0x44	; 68
    2386:	8b 87       	std	Y+11, r24	; 0x0b
    2388:	9c 87       	std	Y+12, r25	; 0x0c
    238a:	ad 87       	std	Y+13, r26	; 0x0d
    238c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a ef       	ldi	r20, 0xFA	; 250
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8f 83       	std	Y+7, r24	; 0x07
    23a8:	98 87       	std	Y+8, r25	; 0x08
    23aa:	a9 87       	std	Y+9, r26	; 0x09
    23ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <main+0x15e>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <main+0x1dc>
	else if (__tmp > 65535)
    23d0:	6f 81       	ldd	r22, Y+7	; 0x07
    23d2:	78 85       	ldd	r23, Y+8	; 0x08
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <main+0x1be>
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <main+0x1ac>
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <main+0x1a0>
    2438:	28 cf       	rjmp	.-432    	; 0x228a <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <main+0x1e8>
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	13 cf       	rjmp	.-474    	; 0x228a <main+0x18>

00002464 <__mulsi3>:
    2464:	62 9f       	mul	r22, r18
    2466:	d0 01       	movw	r26, r0
    2468:	73 9f       	mul	r23, r19
    246a:	f0 01       	movw	r30, r0
    246c:	82 9f       	mul	r24, r18
    246e:	e0 0d       	add	r30, r0
    2470:	f1 1d       	adc	r31, r1
    2472:	64 9f       	mul	r22, r20
    2474:	e0 0d       	add	r30, r0
    2476:	f1 1d       	adc	r31, r1
    2478:	92 9f       	mul	r25, r18
    247a:	f0 0d       	add	r31, r0
    247c:	83 9f       	mul	r24, r19
    247e:	f0 0d       	add	r31, r0
    2480:	74 9f       	mul	r23, r20
    2482:	f0 0d       	add	r31, r0
    2484:	65 9f       	mul	r22, r21
    2486:	f0 0d       	add	r31, r0
    2488:	99 27       	eor	r25, r25
    248a:	72 9f       	mul	r23, r18
    248c:	b0 0d       	add	r27, r0
    248e:	e1 1d       	adc	r30, r1
    2490:	f9 1f       	adc	r31, r25
    2492:	63 9f       	mul	r22, r19
    2494:	b0 0d       	add	r27, r0
    2496:	e1 1d       	adc	r30, r1
    2498:	f9 1f       	adc	r31, r25
    249a:	bd 01       	movw	r22, r26
    249c:	cf 01       	movw	r24, r30
    249e:	11 24       	eor	r1, r1
    24a0:	08 95       	ret

000024a2 <__divmodhi4>:
    24a2:	97 fb       	bst	r25, 7
    24a4:	09 2e       	mov	r0, r25
    24a6:	07 26       	eor	r0, r23
    24a8:	0a d0       	rcall	.+20     	; 0x24be <__divmodhi4_neg1>
    24aa:	77 fd       	sbrc	r23, 7
    24ac:	04 d0       	rcall	.+8      	; 0x24b6 <__divmodhi4_neg2>
    24ae:	27 d0       	rcall	.+78     	; 0x24fe <__udivmodhi4>
    24b0:	06 d0       	rcall	.+12     	; 0x24be <__divmodhi4_neg1>
    24b2:	00 20       	and	r0, r0
    24b4:	1a f4       	brpl	.+6      	; 0x24bc <__divmodhi4_exit>

000024b6 <__divmodhi4_neg2>:
    24b6:	70 95       	com	r23
    24b8:	61 95       	neg	r22
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255

000024bc <__divmodhi4_exit>:
    24bc:	08 95       	ret

000024be <__divmodhi4_neg1>:
    24be:	f6 f7       	brtc	.-4      	; 0x24bc <__divmodhi4_exit>
    24c0:	90 95       	com	r25
    24c2:	81 95       	neg	r24
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	08 95       	ret

000024c8 <__divmodsi4>:
    24c8:	97 fb       	bst	r25, 7
    24ca:	09 2e       	mov	r0, r25
    24cc:	05 26       	eor	r0, r21
    24ce:	0e d0       	rcall	.+28     	; 0x24ec <__divmodsi4_neg1>
    24d0:	57 fd       	sbrc	r21, 7
    24d2:	04 d0       	rcall	.+8      	; 0x24dc <__divmodsi4_neg2>
    24d4:	28 d0       	rcall	.+80     	; 0x2526 <__udivmodsi4>
    24d6:	0a d0       	rcall	.+20     	; 0x24ec <__divmodsi4_neg1>
    24d8:	00 1c       	adc	r0, r0
    24da:	38 f4       	brcc	.+14     	; 0x24ea <__divmodsi4_exit>

000024dc <__divmodsi4_neg2>:
    24dc:	50 95       	com	r21
    24de:	40 95       	com	r20
    24e0:	30 95       	com	r19
    24e2:	21 95       	neg	r18
    24e4:	3f 4f       	sbci	r19, 0xFF	; 255
    24e6:	4f 4f       	sbci	r20, 0xFF	; 255
    24e8:	5f 4f       	sbci	r21, 0xFF	; 255

000024ea <__divmodsi4_exit>:
    24ea:	08 95       	ret

000024ec <__divmodsi4_neg1>:
    24ec:	f6 f7       	brtc	.-4      	; 0x24ea <__divmodsi4_exit>
    24ee:	90 95       	com	r25
    24f0:	80 95       	com	r24
    24f2:	70 95       	com	r23
    24f4:	61 95       	neg	r22
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	8f 4f       	sbci	r24, 0xFF	; 255
    24fa:	9f 4f       	sbci	r25, 0xFF	; 255
    24fc:	08 95       	ret

000024fe <__udivmodhi4>:
    24fe:	aa 1b       	sub	r26, r26
    2500:	bb 1b       	sub	r27, r27
    2502:	51 e1       	ldi	r21, 0x11	; 17
    2504:	07 c0       	rjmp	.+14     	; 0x2514 <__udivmodhi4_ep>

00002506 <__udivmodhi4_loop>:
    2506:	aa 1f       	adc	r26, r26
    2508:	bb 1f       	adc	r27, r27
    250a:	a6 17       	cp	r26, r22
    250c:	b7 07       	cpc	r27, r23
    250e:	10 f0       	brcs	.+4      	; 0x2514 <__udivmodhi4_ep>
    2510:	a6 1b       	sub	r26, r22
    2512:	b7 0b       	sbc	r27, r23

00002514 <__udivmodhi4_ep>:
    2514:	88 1f       	adc	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	5a 95       	dec	r21
    251a:	a9 f7       	brne	.-22     	; 0x2506 <__udivmodhi4_loop>
    251c:	80 95       	com	r24
    251e:	90 95       	com	r25
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	08 95       	ret

00002526 <__udivmodsi4>:
    2526:	a1 e2       	ldi	r26, 0x21	; 33
    2528:	1a 2e       	mov	r1, r26
    252a:	aa 1b       	sub	r26, r26
    252c:	bb 1b       	sub	r27, r27
    252e:	fd 01       	movw	r30, r26
    2530:	0d c0       	rjmp	.+26     	; 0x254c <__udivmodsi4_ep>

00002532 <__udivmodsi4_loop>:
    2532:	aa 1f       	adc	r26, r26
    2534:	bb 1f       	adc	r27, r27
    2536:	ee 1f       	adc	r30, r30
    2538:	ff 1f       	adc	r31, r31
    253a:	a2 17       	cp	r26, r18
    253c:	b3 07       	cpc	r27, r19
    253e:	e4 07       	cpc	r30, r20
    2540:	f5 07       	cpc	r31, r21
    2542:	20 f0       	brcs	.+8      	; 0x254c <__udivmodsi4_ep>
    2544:	a2 1b       	sub	r26, r18
    2546:	b3 0b       	sbc	r27, r19
    2548:	e4 0b       	sbc	r30, r20
    254a:	f5 0b       	sbc	r31, r21

0000254c <__udivmodsi4_ep>:
    254c:	66 1f       	adc	r22, r22
    254e:	77 1f       	adc	r23, r23
    2550:	88 1f       	adc	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	1a 94       	dec	r1
    2556:	69 f7       	brne	.-38     	; 0x2532 <__udivmodsi4_loop>
    2558:	60 95       	com	r22
    255a:	70 95       	com	r23
    255c:	80 95       	com	r24
    255e:	90 95       	com	r25
    2560:	9b 01       	movw	r18, r22
    2562:	ac 01       	movw	r20, r24
    2564:	bd 01       	movw	r22, r26
    2566:	cf 01       	movw	r24, r30
    2568:	08 95       	ret

0000256a <__prologue_saves__>:
    256a:	2f 92       	push	r2
    256c:	3f 92       	push	r3
    256e:	4f 92       	push	r4
    2570:	5f 92       	push	r5
    2572:	6f 92       	push	r6
    2574:	7f 92       	push	r7
    2576:	8f 92       	push	r8
    2578:	9f 92       	push	r9
    257a:	af 92       	push	r10
    257c:	bf 92       	push	r11
    257e:	cf 92       	push	r12
    2580:	df 92       	push	r13
    2582:	ef 92       	push	r14
    2584:	ff 92       	push	r15
    2586:	0f 93       	push	r16
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	ca 1b       	sub	r28, r26
    2594:	db 0b       	sbc	r29, r27
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	09 94       	ijmp

000025a2 <__epilogue_restores__>:
    25a2:	2a 88       	ldd	r2, Y+18	; 0x12
    25a4:	39 88       	ldd	r3, Y+17	; 0x11
    25a6:	48 88       	ldd	r4, Y+16	; 0x10
    25a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    25aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    25ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    25b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    25b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    25b4:	b9 84       	ldd	r11, Y+9	; 0x09
    25b6:	c8 84       	ldd	r12, Y+8	; 0x08
    25b8:	df 80       	ldd	r13, Y+7	; 0x07
    25ba:	ee 80       	ldd	r14, Y+6	; 0x06
    25bc:	fd 80       	ldd	r15, Y+5	; 0x05
    25be:	0c 81       	ldd	r16, Y+4	; 0x04
    25c0:	1b 81       	ldd	r17, Y+3	; 0x03
    25c2:	aa 81       	ldd	r26, Y+2	; 0x02
    25c4:	b9 81       	ldd	r27, Y+1	; 0x01
    25c6:	ce 0f       	add	r28, r30
    25c8:	d1 1d       	adc	r29, r1
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	ed 01       	movw	r28, r26
    25d6:	08 95       	ret

000025d8 <_exit>:
    25d8:	f8 94       	cli

000025da <__stop_program>:
    25da:	ff cf       	rjmp	.-2      	; 0x25da <__stop_program>
